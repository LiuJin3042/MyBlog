<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CCNA-2/ch7PT实践</title>
      <link href="/2019/12/04/CCNA-2/ch7PT%E5%AE%9E%E8%B7%B5/"/>
      <url>/2019/12/04/CCNA-2/ch7PT%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="ch7PT实践"><a href="#ch7PT实践" class="headerlink" title="ch7PT实践"></a>ch7PT实践</h1><p><img src="/2019/12/04/CCNA-2/ch7PT%E5%AE%9E%E8%B7%B5/C:%5CUsers%5Clj%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191204200755847.png" alt="image-20191204200755847"></p><p><img src="/2019/12/04/CCNA-2/ch7PT%E5%AE%9E%E8%B7%B5/image-20191204221510104.png" alt="image-20191204221510104"></p><h2 id="ArtBldg"><a href="#ArtBldg" class="headerlink" title="ArtBldg"></a>ArtBldg</h2><pre><code>! 初始化配置enconf thost ArtBldgno ip domain-lookupenable secret ciscoline cons 0pass ciscologinline vty 0 15pass ciscologinexitser passbanner motd &#39;fuck you&#39;! 为svi配置默认网关ip defa 172.16.88.254 255.255.255.0! 配置vlanvlan 20name Studentexitvlan 40name Facultyexitvlan 60name Adminexitvlan 88name Managementexitinter vlan 88ip addr 172.16.88.100 255.255.255.0no shutexit! 配置中继inter f0/23switchport mode trunkswitchport trunk native vlan 99switchport trunk allowed vlan 20,40,60,88inter f0/24switchport mode trunkswitchport trunk native vlan 99switchport trunk allowed vlan 20,40,60,88inter g0/1switchport mode trunkswitchport trunk native vlan 99switchport trunk allowed vlan 20,40,60,88exit</code></pre><h2 id="1stF"><a href="#1stF" class="headerlink" title="1stF"></a>1stF</h2><pre><code>enconf tno ip domain-lookupip defa 172.16.88.254 255.255.255.0host 1stFvlan 20name Studentexitvlan 40name Facultyexitvlan 60name Adminexitvlan 88name Managementexitinter range f0/1-5switchport mode accessswitchport access vlan 20 exitinter range f0/6-10switchport mode accessswitchport access vlan 40 exitinter range f0/11-15switchport mode accessswitchport access vlan 60 exitinter vlan 88ip addr 172.16.88.101 255.255.255.0no shutexit! 配置中继inter f0/23switchport mode trunkswitchport trunk native vlan 99switchport trunk allowed vlan 20,40,60,88exit</code></pre><h2 id="2ndF"><a href="#2ndF" class="headerlink" title="2ndF"></a>2ndF</h2><pre><code>enconf thost Electronip defa 172.16.88.254 255.255.255.0vlan 20name Studentexitvlan 40name Facultyexitvlan 60name Adminexitvlan 88name Managementexitinter range f0/1-5switchport mode accessswitchport access vlan 20 exitinter range f0/6-10switchport mode accessswitchport access vlan 40 exitinter range f0/11-15switchport mode accessswitchport access vlan 60 exitinter vlan 88ip addr 172.16.88.102 255.255.255.0no shutexit! 配置中继inter f0/24switchport mode trunkswitchport trunk native vlan 99switchport trunk allowed vlan 20,40,60,88exit</code></pre><h2 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h2><pre><code>enconf thost Atomno ip domain-lookupenable secret ciscoline cons 0pass ciscologinline vty 0 15pass ciscologinexitser passbanner motd &#39;fuck you&#39;! config vlanvlan 20name Studentexitvlan 40name Facultyexitvlan 60name Adminexitvlan 88name Managementexitvlan 250name exitvlan 254name exit! inter vlan routinginter g0/0.20 encapsulation dot1q 20 ip addr 172.16.20.254 255.255.255.0inter g0/0.40encapsulation dot1q 40 ip addr 172.16.40.254 255.255.255.0inter g0/0.60encapsulation dot1q 60 ip addr 172.16.60.254 255.255.255.0inter g0/0.88encapsulation dot1q 88ip addr 172.16.88.254 255.255.255.0exitinter g0/0no shut inter g0/1.250 encapsulation dot1q 250 ip addr 172.16.250.254 255.255.255.0inter g0/0.254encapsulation dot1q 254ip addr 172.16.254.254 255.255.255.0exitinter g0/1no shut exit! 配置ACLip access-list standard 1010 permit 172.16.60.0 0.0.0.255endline vty 0 1access-class 10 inexitip access-list standard INT-WEB10 permit 172.16.40.0 0.0.0.25520 permit 172.16.60.0 0.0.0.255exitinter g0/1.250ip access-group INT-WEB outexit</code></pre>]]></content>
      
      
      <categories>
          
          <category> CCNA-2 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CCNA-2/2019-12-04-ch08DHCP</title>
      <link href="/2019/12/04/CCNA-2/2019-12-04-ch08DHCP/"/>
      <url>/2019/12/04/CCNA-2/2019-12-04-ch08DHCP/</url>
      
        <content type="html"><![CDATA[<h1 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h1><h2 id="DHCPv4"><a href="#DHCPv4" class="headerlink" title="DHCPv4"></a>DHCPv4</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><h4 id="获得地址"><a href="#获得地址" class="headerlink" title="获得地址"></a>获得地址</h4><ul><li><p>获取地址</p><p><img src="/2019/12/04/CCNA-2/2019-12-04-ch08DHCP/image-20191204155747916.png" alt="image-20191204155747916"></p></li><li><p>续约</p><p><img src="/2019/12/04/CCNA-2/2019-12-04-ch08DHCP/image-20191204155856202.png" alt="image-20191204155856202"></p></li></ul><h4 id="消息格式"><a href="#消息格式" class="headerlink" title="消息格式"></a>消息格式</h4><ul><li><p>UDP协议, 客户端的端口号是68, 服务器端口是67.</p></li><li><p>DHCPDISCOVER</p><ul><li><img src="/2019/12/04/CCNA-2/2019-12-04-ch08DHCP/image-20191204160652269.png" alt="image-20191204160652269"></li></ul></li><li><p>DHCPOFFER</p><ul><li><img src="/2019/12/04/CCNA-2/2019-12-04-ch08DHCP/image-20191204160825427.png" alt="image-20191204160825427"></li></ul></li><li></li></ul><h3 id="配置DHCP服务器"><a href="#配置DHCP服务器" class="headerlink" title="配置DHCP服务器"></a>配置DHCP服务器</h3><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><ul><li><p>排除地址</p><pre><code>ip dhcp 192.168.0.1 192.168.0.10 // 排除一个地址段ip dhcp 192.168.0.254 // 排除一个地址</code></pre></li><li><p>配置地址池</p><pre><code>ip dhcp pool Name-of-your-pool(dhcp-config)network 192.168.0.0 255.255.255.0default-router 192.168.0.1dns-server 192.168.11.5domain-name cisco.comend</code></pre></li><li><p>禁用/启用</p><pre><code>no service dhcpservice dhcp</code></pre></li></ul><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><pre><code>show run | section dhcpshow ip dhcp bingdingshow ip dhcp server statistics</code></pre><h4 id="DHCPv4中继"><a href="#DHCPv4中继" class="headerlink" title="DHCPv4中继"></a>DHCPv4中继</h4><p>只需要部署一台DHCP服务器, 整个网络都可以传播DHCP请求. 解决DHCP广播不能跨路由的问题.</p><p>在路由器上设置</p><pre><code>inter g0/0ip helper-address 192.168.11.6 // 在g0/0收到dhcp请求, 会单播发给192.168.11.6</code></pre><h3 id="配置DHCPv4客户端"><a href="#配置DHCPv4客户端" class="headerlink" title="配置DHCPv4客户端"></a>配置DHCPv4客户端</h3><p>小型办公室/家庭办公室(SOHO)中的路由器的互联网端口常常配置为DHCP, 接受运营商的IP地址. </p><pre><code>inter g0/1ip addr dhcpno shut</code></pre><h3 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h3><p>常见原因和排除方法</p><ol><li><p>地址冲突</p><p>客户端没有续租, 服务器把ip重新分配给别人. 客户端发出dhcpdiscover的时候服务器没有及时回复. 客户端就重新用上一个ip. 服务器发现了这个情况, 就会停用这个ip.</p><pre><code>show ip dhcp conflict</code></pre></li><li><p>端口没有开启</p></li><li><p>使用静态ip地址测试网络</p></li><li><p>交换机端口配置</p></li><li><p>在相同子网测试dhcpv4</p></li></ol><ul><li><p>验证路由器配置</p><pre><code>show run | section inter g0/0show run | include no service dhcp</code></pre><p>防止acl阻止端口</p><pre><code>access-list 100 permit udp any any eq 67access-list 100 permit udp any any eq 68</code></pre><p>检查acl 100</p><pre><code>debug ip packet 100debug ip dhcp events // 报告服务器时间</code></pre></li></ul><h2 id="DHCPv6"><a href="#DHCPv6" class="headerlink" title="DHCPv6"></a>DHCPv6</h2><h4 id="无状态地址自动配置-SLAAC"><a href="#无状态地址自动配置-SLAAC" class="headerlink" title="无状态地址自动配置(SLAAC)"></a>无状态地址自动配置(SLAAC)</h4><p>在没有 DHCPv6 服务器服务的情况下获取 IPv6 全局单播地址</p><ul><li><p>路由器请求(RS)</p><p>客户端使用SLAAC获取编址信息, 把RS消息发给路由器, 使用<strong>组播地址</strong><code>FF02::2</code></p></li><li><p>路由器通告(RA)</p><p>RA 消息包括本地数据段的前缀和前缀长度. 定期发送RA.使用<strong>组播地址</strong><code>FF02::1</code></p><p>后缀通过随机的方式生成, 或使用EUI-64通过MAC地址生成.</p><p>在使用这个地址前, 会发送ICMPv6的邻居请求消息. 发送后24位. 如果没有收到应答则采用. 称为邻居地址检测(DAD)</p></li></ul><h4 id="仅SLAAC"><a href="#仅SLAAC" class="headerlink" title="仅SLAAC"></a>仅SLAAC</h4><p>通告<code>前缀、前缀长度、DNS 服务器、MTU 和默认网关信息</code></p><p>将M标记O标记都设置为0</p><pre><code>no ipv6 nd managed-config-flagno ipv6 nd other-config-flag</code></pre><h4 id="无状态DHCPv6"><a href="#无状态DHCPv6" class="headerlink" title="无状态DHCPv6"></a>无状态DHCPv6</h4><p>客户端使用 RA 消息中的前缀和前缀长度</p><p>与无状态 DHCPv6 服务器通信以获取 RA 消息中未提供的其他信息. 例如, 这可能是 DNS 服务器 IPv6 地址列表. </p><pre><code>ipv6 nd other-config-flag // O设为1. M默认是0</code></pre><h4 id="有状态DHCPv6"><a href="#有状态DHCPv6" class="headerlink" title="有状态DHCPv6"></a>有状态DHCPv6</h4><p>不用RA, 从DHCPv6服务器获取所有信息</p><pre><code>ipv6 nd managed-config-flag // M设为1. O默认是0</code></pre><h4 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h4><p><img src="/2019/12/04/CCNA-2/2019-12-04-ch08DHCP/image-20191204170917519.png" alt="image-20191204170917519"></p><h3 id="配置DHCPv6"><a href="#配置DHCPv6" class="headerlink" title="配置DHCPv6"></a>配置DHCPv6</h3><h4 id="无状态DHCPv6服务器"><a href="#无状态DHCPv6服务器" class="headerlink" title="无状态DHCPv6服务器"></a>无状态DHCPv6服务器</h4><pre><code>ipv6 unicast-routingipv6 dhcp poop NAME-of-POOLdns server [dns服务器地址]domain-name example.cominter g0/0ipv6 addr ...ipv6 dhcp server NAME-of-POOLipv6 nd other-config-flag</code></pre><ul><li><p>验证</p><pre><code>  show ipv6 dhcp pool  show ipv6 inter g0/1  debug ipv6 dhcp detail</code></pre></li><li><p>无状态DHCPv6客户端</p><pre><code>  inter g0/1  ipv6 enable  ipv6 addr autoconfig</code></pre></li></ul><h4 id="有状态DHCPv6服务器"><a href="#有状态DHCPv6服务器" class="headerlink" title="有状态DHCPv6服务器"></a>有状态DHCPv6服务器</h4><pre><code>ipv6 unicast-routingipv6 dhcp poop NAME-of-POOLaddress prefix .../64 lifetime infinitedns server [dns服务器地址]domain-name example.cominter g0/0ipv6 addr ...ipv6 dhcp server NAME-of-POOLipv6 nd managed-config-flag</code></pre><ul><li><p>有状态DHCPv6客户端</p><pre><code>  inter g0/1  ipv6 enable  ipv6 addr dhcp</code></pre></li><li><p>验证</p><pre><code>show ipv6 dhcp poolshow ipv6 dhcp binding //客户端的本地链路地址与服务器分配的地址之间的自动绑定show ipv6 inter g0/1debug ipv6 dhcp detail</code></pre></li></ul><h4 id="DHCPv6中继"><a href="#DHCPv6中继" class="headerlink" title="DHCPv6中继"></a>DHCPv6中继</h4><pre><code>inter g0/0ipv6 dhcp relay destination 2001:db8:cafe:1::6end</code></pre><h3 id="故障排除-1"><a href="#故障排除-1" class="headerlink" title="故障排除"></a>故障排除</h3><ol><li><p>地址冲突</p><p>客户端会自行删除地址, 并且随机生成后缀</p></li><li><p>地址分配方法</p></li><li><p>静态IPv6测试</p></li><li><p>交换机端口</p></li><li><p>相同子网上测试</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CCNA-2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DHCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCNA-2/2019-12-03-ch02静态路由</title>
      <link href="/2019/12/03/CCNA-2/2019-12-03-ch02%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/"/>
      <url>/2019/12/03/CCNA-2/2019-12-03-ch02%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h1><p>静态路由的原因</p><ul><li>只能手动配置, 不会通告, 安全</li><li>带宽少</li></ul><p>缺点</p><ul><li>费时</li><li>易错</li><li>需要手动维护</li><li>大型网络难</li></ul><p>静态路由的AD值为1, 优先级高于动态获取的路由.</p><p>在末节网络, 不会增长的网络, 单一出口的网络上使用动态路由</p><p>其他的作用</p><ul><li>把多个连续网络汇总为一个静态路由</li><li>主链路发生故障, 创建备份路由.</li></ul><h2 id="实施静态路由"><a href="#实施静态路由" class="headerlink" title="实施静态路由"></a>实施静态路由</h2><h3 id="静态路由类型"><a href="#静态路由类型" class="headerlink" title="静态路由类型"></a>静态路由类型</h3><ul><li><p>标准: 普通的静态路由</p></li><li><p>默认: 数据包和其他路由条目不匹配的时候, 采用默认静态路由. 常用在连到ISP的端口上.</p><ul><li>0.0.0.0/0</li><li>如果一台路由器仅有另一台路由器与之相连, 称为末节路由器</li></ul></li><li><p>汇总: 多条静态路由可以汇总表示为一条</p><ul><li>目标网络连续, 在同一个送出接口上</li></ul><p><img src="/2019/12/03/CCNA-2/2019-12-03-ch02%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/image-20191203191135266.png" alt="image-20191203191135266"></p></li><li><p>浮动: 提供备份, 仅在主路不可用的时候启用. AD比主路要大.</p></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="IPv4静态路由"><a href="#IPv4静态路由" class="headerlink" title="IPv4静态路由"></a>IPv4静态路由</h3><pre><code>ip route 目标地址 子网掩码 {下一跳地址 或 送出接口} 管理距离show ip route</code></pre><h4 id="使用下一跳地址"><a href="#使用下一跳地址" class="headerlink" title="使用下一跳地址"></a>使用下一跳地址</h4><pre><code>ip route 172.16.1.0 255.255.255.0 172.16.2.2no ip route 172.16.1.0 255.255.255.0 172.16.2.2 // 取消配置</code></pre><ol><li><p>首先得知下一跳的地址是172.16.2.2</p></li><li><p>在路由表中搜索如何到达下一跳</p></li><li><p>到达下一跳, 路由器要搜索两次路由表</p></li><li><p>这就是递归查询, 要避免</p></li><li><p>默认开启的思科快速转发, 可以避免递归查找. 应当使用下一跳地址作为静态路由</p></li></ol><h4 id="直连静态路由"><a href="#直连静态路由" class="headerlink" title="直连静态路由"></a>直连静态路由</h4><pre><code>ip route 172.16.1.0 255.255.255.0 s0/0/0</code></pre><blockquote><p>对于点对点接口，您可以使用指向退出接口或下一跳地址的静态路由。对于多点/广播接口，更适合采用指向下一跳地址的静态路由。</p></blockquote><p>但是如果接口上连接了多个设备, 路由器不知道应该去哪个设备, 就无法发送数据包.</p><h4 id="完全指定"><a href="#完全指定" class="headerlink" title="完全指定"></a>完全指定</h4><p>当退出接口是多路访问接口时</p><pre><code>ip route 192.168.2.0 255.255.255.0 g0/1 </code></pre><h4 id="验证路由表"><a href="#验证路由表" class="headerlink" title="验证路由表"></a>验证路由表</h4><pre><code>show ip routeshow ip route staticshow ip route 192.168.2.1</code></pre><h4 id="默认静态路由"><a href="#默认静态路由" class="headerlink" title="默认静态路由"></a>默认静态路由</h4><pre><code>ip route 0.0.0.0 0.0.0.0 下一跳 传出端口</code></pre><h3 id="IPv6静态路由"><a href="#IPv6静态路由" class="headerlink" title="IPv6静态路由"></a>IPv6静态路由</h3><pre><code>ipv6 route 目标地址/前缀长度 {下一跳 或 传出端口}ipv6 route ::/0 {下一跳 或 传出端口}</code></pre><p>其他规则与IPv4相同</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><pre><code>show ipv6 routeshow ipv6 route staticshow ipv6 route 2001:DB8:ACAD:3::</code></pre><h3 id="动态路由管理距离"><a href="#动态路由管理距离" class="headerlink" title="动态路由管理距离"></a>动态路由管理距离</h3><p>静态是1, 动态为</p><ul><li>EIGRP: 90</li><li>IGRP: 100</li><li>OSPF: 110</li><li>IS-IS: 115</li><li>RIP: 200</li></ul><h4 id="IPv4-6浮动路由"><a href="#IPv4-6浮动路由" class="headerlink" title="IPv4/6浮动路由"></a>IPv4/6浮动路由</h4><pre><code>ip route 0.0.0.0 0.0.0.0 172.16.2.2 // AD=1ip route 0.0.0.0 0.0.0.0 10.10.10.2 5 // AD=5</code></pre><h3 id="配置静态主机路由"><a href="#配置静态主机路由" class="headerlink" title="配置静态主机路由"></a>配置静态主机路由</h3><p>主机路由/本地路由, 如果数据包是送往路由器端口, 确保路由器会接收而不是路由出去. 简写为L.</p><p>一般都是在创建端口IP地址的时候自动分配的.</p><ul><li><p>配置静态主机路由</p><p>让路由直接把流量转发到特定的设备上. 子网掩码配成<code>255.255.255.255</code>即可.</p></li></ul><h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><h4 id="路由故障类型"><a href="#路由故障类型" class="headerlink" title="路由故障类型"></a>路由故障类型</h4><ul><li>接口故障</li><li>与ISP断开连接</li><li>链路饱和</li><li>管理员输入配置错误</li></ul><p>常用工具</p><ul><li><code>ping [ip] source [端口]</code></li><li><code>traceroute</code></li><li><code>show ip route</code></li><li><code>show ip inter brief</code></li><li><code>show cdp neighbours detail</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA-2 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-30-pip换源</title>
      <link href="/2019/12/03/Python/2019-11-30-pip%E6%8D%A2%E6%BA%90/"/>
      <url>/2019/12/03/Python/2019-11-30-pip%E6%8D%A2%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1 id="pip换源"><a href="#pip换源" class="headerlink" title="pip换源"></a>pip换源</h1><p>直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，在pip 目录下新建文件pip.ini，内容如下</p><p>或者按照网友的建议：win+R 打开用户目录%HOMEPATH%，在此目录下创建 pip 文件夹，在 pip 目录下创建 pip.ini 文件, 内容如下直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，在pip 目录下新建文件pip.ini，内容如下</p><p>或者按照网友的建议：win+R 打开用户目录%HOMEPATH%，在此目录下创建 pip 文件夹，在 pip 目录下创建 pip.ini 文件, 内容如下</p><pre><code>[global]timeout = 6000index-url = https://pypi.tuna.tsinghua.edu.cn/simpletrusted-host = pypi.tuna.tsinghua.edu.cn</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-08-26-用py查看目录下所有文件</title>
      <link href="/2019/12/03/Python/2019-08-26-%E7%94%A8py%E6%9F%A5%E7%9C%8B%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/"/>
      <url>/2019/12/03/Python/2019-08-26-%E7%94%A8py%E6%9F%A5%E7%9C%8B%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="查看目录下所有文件"><a href="#查看目录下所有文件" class="headerlink" title="查看目录下所有文件"></a>查看目录下所有文件</h1><pre><code class="python">import osos.listdir()</code></pre><p>替换文件内容</p><pre><code class="python">with open(edit_file, &#39;r+&#39;, encoding=&#39;utf-8&#39;) as f:    file_lines = f.readlines()    i = 0    for each_line in file_lines:        new_line = re.sub(re_pattern, re_replace, each_line)        file_lines[i] = new_line        i = i + 1with open(edit_file, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f:    f.writelines(file_lines)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-16-oracle安装示例数据库</title>
      <link href="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="oracle安装示例数据库"><a href="#oracle安装示例数据库" class="headerlink" title="oracle安装示例数据库"></a>oracle安装示例数据库</h1><p>我们在安装完oracle数据后发现没有示例数据库,先重新配置一个有hr的数据库</p><h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><p>完成<a href="./2019-11-03-oracle工作环境.md">oracle安装</a></p><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p><del>从入门到删库跑路</del>删除原有库</p><p>输入dbca,点击删除,一路确定</p><h2 id="创建非容器的数据库"><a href="#创建非容器的数据库" class="headerlink" title="创建非容器的数据库"></a>创建非容器的数据库</h2><p>输入dbca</p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573866789059.png" alt="1573866789059"></p><p>勾掉容器数据库</p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573866845789.png" alt="1573866840466"></p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573866871323.png" alt="1573866871323"></p><p>这里也勾掉容器数据库</p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573866899402.png" alt="1573866899402"></p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573866917756.png" alt="1573866917756"></p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573866937385.png" alt="1573866937385"></p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573866948026.png" alt="1573866948026"></p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573866975319.png" alt="1573866975319"></p><p>这里勾示例方案添加到数据库</p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573867014239.png" alt="1573867014239"></p><p>字符集最好操作系统字符集</p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573867045201.png" alt="1573867045201"></p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573867064239.png" alt="1573867064239"></p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573867088628.png" alt="1573867088628"></p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573867112386.png" alt="1573867112386"></p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573867161011.png" alt="1573867161011"></p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573867495931.png" alt="1573867495931">点击<strong>口令管理</strong></p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573867626477.png" alt="1573867626477"></p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573867644945.png" alt="1573867644945"></p><p>给hr配上口令为hr</p><p><strong>如果你忘记了这一步</strong></p><p>在sqlplus中输入</p><pre><code>alter user hr account unlock identified as hr</code></pre><h2 id="登陆hr"><a href="#登陆hr" class="headerlink" title="登陆hr"></a>登陆hr</h2><p>哈哈哈哈终于装好了,我们直接登进去</p><p>发现</p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573867794323.png" alt="1573867794323"></p><p>对此,我们应该</p><p><img src="/2019/12/03/oracle/2019-11-16-oracle%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1573867821641.png" alt="1573867821641"></p><p>先变成管理员</p><pre><code class="bash">sqlplus / as sysdba</code></pre><p>然后解锁</p><pre><code>alter user hr account unlock;</code></pre><p>然后登入hr</p><pre><code>sqlplus hr/hr</code></pre><p>成功,完事情,撒花</p><h2 id="从github下载示例文件"><a href="#从github下载示例文件" class="headerlink" title="从github下载示例文件"></a>从github下载示例文件</h2><p>从github上下载源代码：</p><p><a href="https://github.com/oracle/db-sample-schemas/releases/latest" target="_blank" rel="noopener">https://github.com/oracle/db-sample-schemas/releases/latest</a></p><p>上传到数据库服务器：</p><pre><code class="bash">[oracle@dave.cndba.cn demo]$ cp /home/oracle/db-sample-schemas-12.2.0.1.zip $ORACLE_HOME/demo[oracle@dave.cndba.cn demo]$ lsdb-sample-schemas-12.2.0.1.zip  schema[oracle@dave.cndba.cn demo]$ unzip db-sample-schemas-12.2.0.1.zip[oracle@dave.cndba.cn demo]$ mv schema schema.bak[oracle@dave.cndba.cn demo]$ mv db-sample-schemas-12.2.0.1 schema</code></pre><p>导入</p><pre><code class="sql">@mksample waterman waterman hr oe pm ix sh bi users temp /home/oracle/dbca/ 192.168.0.220:1521/orcl</code></pre><p>报错处理</p><pre><code class="bash">perl -p -i.bak -e &#39;s#__SUB__CWD__#&#39;$(pwd)&#39;#g&#39; *.sql */*.sql */*.dat</code></pre><p>验证</p><pre><code class="sql">select username,created from dba_users where created&gt;sysdate-1;</code></pre><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.cndba.cn/dave/article/1985" target="_blank" rel="noopener">Oracle 12cR2 安装示例用户(Sample Schemas)</a></p>]]></content>
      
      
      <categories>
          
          <category> oracle </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-10-启动数据库</title>
      <link href="/2019/12/03/oracle/2019-11-10-%E5%90%AF%E5%8A%A8%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/12/03/oracle/2019-11-10-%E5%90%AF%E5%8A%A8%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h1><h3 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h3><ul><li>启动实例</li><li>启动监听</li></ul><p>进入路径<code>cd /u01/app/oracle/product/12.2.0.1/db_1/dbs</code></p><p>这个路径下有这些文件</p><pre><code>hc_ORCL.dat  init.ora  lkORCL  orapwORCL  snapcf_ORCL.f  spfileORCL.ora</code></pre><ul><li><p>spfileORCL.ora: 格式为spfileSID.ora, (sp=sql parameters)这里我的SID是ORCL. 是二进制文件, 较之文本文件,  会实时更新. 使用strings命令查看</p><pre><code class="bash">ORCL.__data_transfer_cache_size=0ORCL.__db_cache_size=603979776ORCL.__inmemory_ext_roarea=0ORCL.__inmemory_ext_rwarea=0ORCL.__java_pool_size=16777216ORCL.__large_pool_size=33554432ORCL.__oracle_base=&#39;/u01/app/oracle&#39;#ORACLE_BASE set from environmentORCL.__pga_aggregate_target=637534208ORCL.__sga_target=956301312 # sga可用内存大小ORCL.__shared_io_pool_size=50331648ORCL.__shared_pool_size=234881024ORCL.__streams_pool_size=0*.audit_file_dest=&#39;/u01/app/oracle/admin/orcl/adump&#39;*.audit_trail=&#39;d*.compatible=&#39;12.2.0&#39;*.control_files=&#39;/u01/app/oracle/oradata/orcl/control01.ctl&#39;,&#39;/u01/app/oracle/fast_recovery_area/orcl/control02.ctl&#39; # 控制文件位置, control02.ctl存放配置文件和检查点等记录*.db_block_size=8192 # 数据块大小*.db_name=&#39;orcl&#39; # 数据库名称*.db_recovery_file_dest=&#39;/u01/app/oracle/fast_recovery_area/orcl&#39;*.db_recovery_file_dest_size=12780m*.deferred_segment_creation=FALSE*.diagnostic_dest=&#39;/u01/app/oracle&#39;*.dispatchers=&#39;(PROTOCOL=TCP) (SERVICE=ORCLXDB)&#39;*.enable_pluggable_database=true*.local_listener=&#39;LISTENER_ORCL&#39;*.log_archive_format=&#39;%t_%s_%r.dbf&#39;*.memory_target=1507m # oracle 可用内存*.nls_language=&#39;SIMPLIFIED CHINESE&#39;*.nls_territory=&#39;CHINA&#39;*.open_cursors=300*.processes=320*.remote_login_passwordfile=&#39;EXCLUSIVE&#39;*.undo_tablespace=&#39;UNDOTBS1&#39;</code></pre></li></ul><ul><li><p>init.ora: 再spfileSID.ora和initSID.ora缺失的时候会使用此文件启动</p><p><code>create pfile from spfile</code>, 会创建initSID.ora</p></li></ul><h3 id="sqlplus命令"><a href="#sqlplus命令" class="headerlink" title="sqlplus命令"></a>sqlplus命令</h3><ul><li><code>select * from v$parameter;</code>, 查看系统参数, 不推荐使用<code>select *</code></li><li><code>desc v$parameter;</code>, 查看表字段</li><li><code>show parameter process;</code>, 查看parameter中含有process的字段</li></ul><h3 id="修改参数"><a href="#修改参数" class="headerlink" title="修改参数"></a>修改参数</h3><ul><li><code>alter system set processes=400 scope=spfile(memory|both);</code>, 把processes改为400, scope是作用域, 作用在配置文件|内存|两者.</li></ul><h3 id="开关机"><a href="#开关机" class="headerlink" title="开关机"></a>开关机</h3><p>数据库开关机阶段</p><ul><li>shutdown, 关机状态</li><li>nomount, 开启实例</li><li>mount, 打开数据和控制文件, 控制文件修复数据文件, 保证一致性完整性</li><li>open, 数据库打开</li></ul><pre><code class="bash">startup nomount; # 启动实例alter database mount; # 读取控制文件, 没有查询控制文件和日志文件alter database open; # 打开数据库alter database close; # 到mount状态, 回写数据, 拉检查点alter database dismount;</code></pre><p>关机</p><pre><code class="sql">shutdown ;startup force; 先断电再开机</code></pre><p>参数</p><ul><li>N, normal, 会话全部结束才能关机</li><li>T, transactional, 事务结束后关机</li><li>I, immediate, 没有结束的事务回滚, 立刻结束</li><li>A, abort, 立刻结束</li></ul><h2 id="安装pl-sqldeveloper"><a href="#安装pl-sqldeveloper" class="headerlink" title="安装pl sqldeveloper"></a><a href="2019-11-10-oracle客户端配置.md">安装pl sqldeveloper</a></h2><p>并且安装优化文件</p><p>安装toad</p>]]></content>
      
      
      <categories>
          
          <category> oracle </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-10-oracle文本插件</title>
      <link href="/2019/12/03/oracle/2019-11-10-oracle%E6%96%87%E6%9C%AC%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/12/03/oracle/2019-11-10-oracle%E6%96%87%E6%9C%AC%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle文本插件"><a href="#Oracle文本插件" class="headerlink" title="Oracle文本插件"></a>Oracle文本插件</h1><p>在安装完oracle后发现文本操作很不友好，退格左右按键都与正常配置不一样，以下给出相关插件</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><pre><code class="bash">wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmrpm -Uvh epel-release-latest-7.noarch.rpm</code></pre><h2 id="安裝rlwrap"><a href="#安裝rlwrap" class="headerlink" title="安裝rlwrap"></a>安裝rlwrap</h2><pre><code>yum install rlwrap -y</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>設定別名在使用者.bash_profile</p><pre><code>source .bash_profile</code></pre><p>然后启动数据库</p><pre><code class="bash">su - oraclelsnrctl startlsnrctl statussqlplus / as sysdbastartupalter system register;</code></pre>]]></content>
      
      
      <categories>
          
          <category> oracle </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-10-oracle客户端配置</title>
      <link href="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="oracle客户端配置"><a href="#oracle客户端配置" class="headerlink" title="oracle客户端配置"></a>oracle客户端配置</h1><p>目前已经通过<a href="./2019-11-03-oracle工作环境.md">oracle工作环境</a>配置了cnetos7上的oracle服务器与web端客户端，接下来介绍主要win10客户端配置。</p><p>主要涵盖</p><ul><li>Oracle Database Client12c</li><li>sqldeveloper</li></ul><h2 id="Oracle-Database-Client12c-发行版"><a href="#Oracle-Database-Client12c-发行版" class="headerlink" title="Oracle Database Client12c 发行版"></a>Oracle Database Client12c 发行版</h2><p>启动安装程序</p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573358120643.png" alt="1573358120643"></p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573358215909.png" alt="1573358215909"></p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573358244982.png" alt="1573358244982"></p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573358273369.png" alt="1573358273369"></p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573358327651.png" alt="1573358327651"></p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573358356370.png" alt="1573358356370"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h2 id="sqldeveloper"><a href="#sqldeveloper" class="headerlink" title="sqldeveloper"></a>sqldeveloper</h2><p>首先进行安装</p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573358908649.png" alt="1573358908649"></p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573360973987.png" alt="1573360973987"></p><p>安装完成</p><h1 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h1><h2 id="oracle-database-client12c"><a href="#oracle-database-client12c" class="headerlink" title="oracle database client12c"></a>oracle database client12c</h2><p>点击<img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573363651542.png" alt="1573363651542"></p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573363635595.png" alt="1573363635595"></p><h2 id="PLSQL-Developer"><a href="#PLSQL-Developer" class="headerlink" title="PLSQL Developer"></a>PLSQL Developer</h2><p>前置条件：</p><ul><li>安装完成Oracle Database client12c，并且连通以上步骤</li></ul><p>点击<img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573361404041.png" alt="1573361404041"></p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573362267186.png" alt="1573362267186"></p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573361538482.png" alt="1573361538482"></p><p>然后连不通，连不通就对了，我们点击取消进入主界面</p><p>看到这个</p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573361556406.png" alt="1573361556406"></p><p>需要<del>注册机或者</del>掏钱</p><p>这是我出于教学和科研目的的结果（耿直）</p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573370268106.png" alt="1573370268106"></p><p>当然，注册机跑不通也没关系</p><p>我们接下来进行连接配置</p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573367140950.png" alt="1573367140950"></p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573368627273.png" alt="1573368627273"></p><p>点击<img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573368897603.png" alt="1573368897603">可以自动弹出，点击应用，确定，之后关闭PLSQL Developer</p><p>找到win10端的oracle目录设置连接协议的地方</p><p>我的是E:\app\client\tianyilt\product\12.2.0\client_1\network\admin</p><p>在这里创建一个文件tnsnames.ora</p><p>填入以下内容：</p><pre><code>test_online=    (DESCRIPTION =      (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.12.132)(PORT = 1521))      (CONNECT_DATA =        (SERVER = DEDICATED)        (SERVICE_NAME = ORCL)      )    )  </code></pre><p>HOST：远程oracle的ip地址</p><p>PORT：远程lsnrctl监听的端口，默认1521</p><p>SERVICE_NAME：远程SID号，我们课程里设置的是ORCL</p><p>保存</p><p>然后再打开PLSQL Developer</p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573369362921.png" alt="1573369362921"></p><p>可以发现数据库中出现可选项目</p><p><img src="/2019/12/03/oracle/2019-11-10-oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/1573369398277.png" alt="1573369398277"></p><p>这样就可以连通了</p><p>PLSQL链接方法2</p><p>在数据库里面输入 服务器ip/SID</p><p>如192.168.12.132/orcl也可以连上</p>]]></content>
      
      
      <categories>
          
          <category> oracle </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-03-oracle工作环境安装</title>
      <link href="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
      <url>/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle工作环境安装"><a href="#Oracle工作环境安装" class="headerlink" title="Oracle工作环境安装"></a>Oracle工作环境安装</h1><p><a href="https://www.oracle.com/database/technologies/oracle-database-software-downloads.html" target="_blank" rel="noopener">下载网站</a></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1572743053819.png" alt="1572743053819"></p><p>下载12cRelease2, (12.2.0.1.0)</p><p><a href="https://docs.oracle.com/en/" target="_blank" rel="noopener">获取数据库帮助</a></p><h2 id="Oracle管理员的任务"><a href="#Oracle管理员的任务" class="headerlink" title="Oracle管理员的任务"></a>Oracle管理员的任务</h2><ol><li>确定服务器硬件</li><li>安装Oracle软件</li><li>…</li></ol><h2 id="用于管理Oracle的工具"><a href="#用于管理Oracle的工具" class="headerlink" title="用于管理Oracle的工具"></a>用于管理Oracle的工具</h2><ul><li>Oracle Universal Installer(OUI)</li><li>Database Configuration Assistant(DBCA), 创建数据库</li><li>Oracle Enterprise Manager(OEM)</li><li>SQL Plus, 管理工具</li></ul><h2 id="安装开始"><a href="#安装开始" class="headerlink" title="安装开始"></a>安装开始</h2><h3 id="环境检查"><a href="#环境检查" class="headerlink" title="环境检查"></a>环境检查</h3><ul><li><p>系统要求(很重要)</p><ul><li>系统: Centos 7.3以上</li><li>内存（交换空间）: 4G</li><li>磁盘容量: 40G以上</li></ul></li><li><p>检查版本</p><pre><code class="bash">cat /etc/redhat-release</code></pre></li><li><p>检查内核</p><pre><code class="bash">uname -a</code></pre></li><li><p>检查内存</p><pre><code class="bash">grep MemTotal /proc/meminfogrep SwapTotal /proc/meminfo</code></pre></li><li><p>检查安装包</p><p>linuxx64_12201_database, 3.3G左右</p></li></ul><h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><pre><code class="bash">yum -y install binutils compat-libcap1 compat-libstdc++-33 gcc gcc-c++ glibc glibc-devel ksh libaio libaio-devel libgcc libstdc++ libstdc++-devel libXi libXtst make sysstat unixODBC unixODBC-develyum update</code></pre><p>为虚拟机拍摄快照</p><h3 id="配置安装环境"><a href="#配置安装环境" class="headerlink" title="配置安装环境"></a>配置安装环境</h3><ul><li><p>修改主机名为任意名称(<strong>不能是localhost</strong>), 改为例如cent7</p><pre><code>sudo vi /etc/hostname</code></pre></li></ul><ul><li><p>创建用户和组(在root用户下)</p><pre><code class="bash">groupadd oinstall  groupadd dba    useradd -g oinstall -G dba oracle passwd oracle</code></pre></li><li><p>配置内存参数</p><p>创建文件</p><pre><code class="bash">touch /etc/sysctl.d/97-oracledatabase-sysctl.conf</code></pre><p>写入内容(直接复制到命令行, 需要删去注释)</p><pre><code class="bash">cat &gt;&gt; /etc/sysctl.d/97-oracledatabase-sysctl.conf &lt;&lt; EOFfs.aio-max-nr = 1048576  fs.file-max = 6815744    # shm, shared memory, 共享内存# 配置共享内存和文件操作符是为了开启自动存储管理（AMM, Automatic Memory Management）kernel.shmall = 2097152   #需要计算, 设置为shmmax/4096kernel.shmmax = 4294967295   #需要计算, 设置为物理内存的90%kernel.shmmni = 4096    kernel.sem = 250 32000 100 128    net.ipv4.ip_local_port_range = 9000 65500    net.core.rmem_default = 4194304 12c 262144   net.core.rmem_max = 4194304    net.core.wmem_default = 262144    net.core.wmem_max = 1048586EOF</code></pre><p>无注释版本</p><pre><code class="bash">cat &gt;&gt; /etc/sysctl.d/97-oracledatabase-sysctl.conf &lt;&lt; EOFfs.aio-max-nr = 1048576  fs.file-max = 6815744    kernel.shmall = 2097152   kernel.shmmax = 4294967295   kernel.shmmni = 4096    kernel.sem = 250 32000 100 128    net.ipv4.ip_local_port_range = 9000 65500    net.core.rmem_default = 4194304 12c 262144   net.core.rmem_max = 4194304    net.core.wmem_default = 262144    net.core.wmem_max = 1048586EOF</code></pre></li></ul><ul><li><p>启用配置</p><pre><code class="bash">sysctl --system # 立即生效sysctl -a |grep shmmaxsysctl -a |grep shmall</code></pre></li><li><p>配置资源限制</p><pre><code class="bash">cat &gt;&gt; /etc/security/limits.conf &lt;&lt; EOF  oracle  soft  nproc  2047    oracle  hard  nproc  16384    oracle  soft  nofile  1024    oracle  hard  nofile  65536    oracle  soft  stack   3145728oracle  hard  stack   3145728  EOF</code></pre><ul><li><p>修改本地hosts文件</p><pre><code class="bash">vi /etc/hosts </code></pre><p>在最后一行加入<code>[ip地址] [主机名]</code></p><pre><code>192.168.27.157 cent7</code></pre></li></ul></li><li><p>创建安装目录</p><pre><code class="bash">mkdir -p /u01/app/oraclechown -R oracle:oinstall /u01/app/chown -R oracle:oinstall /u01chmod -R 755 /u01/app/oracle/chmod -R 755 /u01/</code></pre></li><li><p>安装rlwrap</p><pre><code>wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmrpm -Uvh epel-release-latest-7.noarch.rpmyum install rlwrap -y</code></pre></li><li><p>配置环境变量</p><pre><code class="bash">su - oracle(以下的中文不需要去除)cat &gt;&gt; /home/oracle/.bash_profile &lt;&lt; EOFexport EDITOR=vim #oracle的BASE目录定义   export ORACLE_BASE=/u01/app/oracle #oracle的HOME目录定义   export ORACLE_HOME=\$ORACLE_BASE/product/12.2.0.1/db_1    export ORACLE_SID=ORCL#重新定义系统环境变量export PATH=\$PATH:\$HOME/.local/bin:\$HOME/bin:\$ORACLE_HOME/bin #简体中文版#export NLS_LANG=&quot;AMERICAN_AMERICA.ZHS16GBK&quot;   export NLS_LANG=&quot;SIMPLIFIED CHINESE_CHINA&quot;.UTF8 #定义语系export LANG=zh_CN.UTF-8#export LANG=en_US    #export LC_ALL=en_US    export LD_LIBRARY_PATH=/lib:/usr/lib:\$ORACLE_HOME/lib    export CLASSPATH=\$ORACLE_HOME/JRE:\$ORACLE_HOME/jlib:$ORACLE_HOME/rdbms/jlibalias sqlplus=&quot;rlwrap sqlplus&quot;    alias rman=&quot;rlwrap rman&quot;    #权限（反码）umask 022    EOFsource .bash_profile</code></pre></li><li><p>关闭selinux和防火墙</p><pre><code class="bash">vi /etc/selinux/config</code></pre><p>把<code>SELINUX=enable</code>改为<code>SELINUX=disabled</code></p><pre><code class="bash">systemctl stop firewalld.servicesystemctl disable firewalld.service</code></pre></li><li><p>关闭透明大页<br>查看</p><pre><code class="bash">cat /sys/kernel/mm/transparent_hugepage/enabled[always]代表启用[never]代表禁用</code></pre><p>修改</p><pre><code>vi /etc/default/grubGRUB_CMDLINE_LINUX=&quot;crashkernel=auto rhgb quiet transparent_hugepage=never&quot;</code></pre><p>编译文件</p><pre><code>grub2-mkconfig -o /boot/grub2/grub.cfg</code></pre></li></ul><ul><li><p>重启系统</p><pre><code>init 6</code></pre><p>检验有没有加进去</p><pre><code>cat /proc/cmdline </code></pre></li></ul><h3 id="安装oracle12c"><a href="#安装oracle12c" class="headerlink" title="安装oracle12c"></a>安装oracle12c</h3><p>先为虚拟机拍摄快照</p><ul><li><p>需要使用远程安装的方式, 先安装<code>xmanager</code></p></li><li><p>用xmanager下的xshell连接虚拟机</p></li><li><p>(用户切换到oracle)将压缩包<strong>通过xshell界面(否则会解压失败)</strong>扔到<code>/u01</code>下</p><ul><li><p>方法0，直接</p><ul><li><pre><code class="bash">        cd /u01</code></pre><p>  然后把文件拖进xshell</p></li></ul></li><li><p>方法1</p><ul><li><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1573351396870.png" alt="1573351396870"></li><li>用xftp速度更快</li></ul></li><li><p>方法2：直接拷贝进vmware虚拟机内</p></li></ul></li><li><p>友情提示，如果出现权限问题，路径问题，请使用chmod来授权与mv来移动路径</p></li><li><p>解压</p><pre><code>unzip ****.zip</code></pre></li><li><p>安装</p><pre><code>cd /u01/database./runinstaller</code></pre><p>如果出现错误<code>Error: Can&#39;t open display:</code></p><pre><code>export DISPLAY=[主机和虚拟机同一个网段的ip]:0.0</code></pre></li></ul><p>如果一切正常, 会在主机弹出gui</p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/001.png" alt="001"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/002.png" alt="002"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/003.png" alt="003"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/004.png" alt="004"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/005.png" alt="005"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/006.png" alt="006"></p><ul><li><p>最后会提示你用root身份执行两个脚本</p><pre><code>su -/u01/app/oraInventory/orainstRoot.sh   /u01/app/oracle/product/12.2.0.1/db_1/root.sh</code></pre></li></ul><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1573353610472.png" alt="1573353610472"></p><p>看到这个直接回车</p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1573353641428.png" alt="1573353641428"></p><p>看到这个键入y然后回车</p><h3 id="创建监听服务"><a href="#创建监听服务" class="headerlink" title="创建监听服务"></a>创建监听服务</h3><ul><li><p>切换到oracle用户</p></li><li><p>输入</p><p><code>netca</code></p></li><li><p>然后在gui配置, 一路下一步</p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/001-1573290283151.png" alt="001"></p></li><li><p>检验</p><pre><code>ps -ef |grep ora_</code></pre></li></ul><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre><code>dbca</code></pre><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/001-1573291200234.png" alt="001"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/002-1573291203916.png" alt="002"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/003-1573291207112.png" alt="003"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/004-1573291210275.png" alt="004"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/005-1573291214103.png" alt="005"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/006-1573291217094.png" alt="006"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/007.png" alt="007"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/008.png" alt="008"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/009.png" alt="009"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/0090.png" alt="0090"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/0091.png" alt="0091"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/010.png" alt="010"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/011.png" alt="011"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/012.png" alt="012"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/013.png" alt="013"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/014.png" alt="014"></p><h3 id="访问数据库"><a href="#访问数据库" class="headerlink" title="访问数据库"></a>访问数据库</h3><ul><li><p>安装flash-player播放器插件</p><p>前往<a href="https://www.flash.cn/" target="_blank" rel="noopener">flash官网</a>下载rpm包</p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1573292156421.png" alt="1573292156421"></p><pre><code>rpm -ivh flash-player-npapi-26.0.0.131-release.x86_64.rpmsqlplus / as sysdbaalter user sys identified by [sys密码]; # 更改sys的密码, 可不用</code></pre></li><li><p>在主机的<strong>谷歌浏览器</strong> 地址栏中输入</p><pre><code>https://[虚拟机ip地址]:5500/em/login</code></pre><p>会提示安装flash, 只要在网站设置里允许flash就可以了</p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1573293118995.png" alt="1573293118995"></p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1573295042473.png" alt="1573295042473"></p><p>注意sys登录一定要勾选以sysdba身份</p><p>成功登录.</p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1573295081107.png" alt="1573295081107"></p></li></ul><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><ul><li><p>启动配置</p><pre><code class="bash">vi /etc/oratab  #把最后的N改成Y (默认是N)    orcl:/u01/app/oracle/product/12.2.0.1/db_1:Y# rc.local启动方式cat &gt;&gt; /etc/rc.local &lt;&lt; EOF  # Oracle service start    su - oracle -c &quot;lsnrctl start&quot;    su - oracle -c &quot;dbstart&quot;    EOFchmod +x /etc/rc.local</code></pre></li><li><p>进入数据库</p><pre><code>sqlplus / as sysdba</code></pre><p>可以看到提示符变为<code>SQL&gt;</code></p></li><li><p>安装完数据库密码过期问题</p><p>(alter等命令都是在数据库管理模式下输入, 即提示符是SQL)</p><pre><code>SQL&gt; alter profile default limit password_life_time unlimited;alter profile default limit failed_login_attempts unlimited;</code></pre></li><li><p>取消段延迟特性</p><pre><code>alter system set deferred_segment_creation=false scope=both;</code></pre></li><li><p>实例启动关闭</p><pre><code>startupshutdown immediate </code></pre><p>查看实例状态</p><pre><code>select status from v$instance;</code></pre></li></ul><h2 id="如果你很不幸"><a href="#如果你很不幸" class="headerlink" title="如果你很不幸"></a>如果你很不幸</h2><h3 id="交换空间不足"><a href="#交换空间不足" class="headerlink" title="交换空间不足"></a>交换空间不足</h3><p>查看swap交换空间方式一：</p><pre><code class="bash">free -mfree -mh</code></pre><p>可以看出只有2G，而安装需要有4G</p><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1573352458187.png" alt="1573352458187"></p><p>使用dd命令创建一个swap交换文件：</p><pre><code class="bash">cd ~dd if=/dev/zero of=/home/swap bs=4096 count=1024000</code></pre><p>制作为swap格式文件：</p><pre><code>mkswap ~/swapswapon ~/swap</code></pre><p>然后查看一下</p><pre><code>free -mh</code></pre><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1573353004564.png" alt="1573353004564"></p><h3 id="netca报错Failed-to-write-core-dump"><a href="#netca报错Failed-to-write-core-dump" class="headerlink" title="netca报错Failed to write core dump"></a>netca报错Failed to write core dump</h3><p><img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1573354328768.png" alt="1573354328768"></p><p>首先确定xclock能看到</p><p>然后</p><pre><code class="bash">vi /etc/hosts </code></pre><p>作以下修改<img src="/2019/12/03/oracle/2019-11-03-oracle%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1YVD9CWT(97IJ)ZS81V%60YG.png" alt="img"></p><p>然后重启，在xmanager里面打开oracle</p>]]></content>
      
      
      <categories>
          
          <category> oracle </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-03-oracle体系结构</title>
      <link href="/2019/12/03/oracle/2019-11-03-oracle%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2019/12/03/oracle/2019-11-03-oracle%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle-DB体系结构"><a href="#Oracle-DB体系结构" class="headerlink" title="Oracle DB体系结构"></a>Oracle DB体系结构</h1><p>数据库管理系统=&gt;实现增删查改</p><p>RDBMS, 关系型数据库管理系统, 开放, 全面, 集成</p><p>数据文件+实例(进程+内存结构)</p><h2 id="连接到数据库"><a href="#连接到数据库" class="headerlink" title="连接到数据库"></a>连接到数据库</h2><ul><li>会话: 用户–发起用户进程–发起服务器进程–连接实例获取数据</li></ul><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><p><a href="https://www.jianshu.com/p/0b245d972e23?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://www.jianshu.com/p/0b245d972e23?tdsourcetag=s_pctim_aiomsg</a></p><h3 id="数据库高速缓存"><a href="#数据库高速缓存" class="headerlink" title="数据库高速缓存"></a>数据库高速缓存</h3><p>属于SGA(系统全局区), 从硬盘读取数据放到缓冲区</p><h3 id="重做日志缓冲区"><a href="#重做日志缓冲区" class="headerlink" title="重做日志缓冲区"></a>重做日志缓冲区</h3><h3 id="服务进程"><a href="#服务进程" class="headerlink" title="服务进程"></a>服务进程</h3><p>客户端=&gt;监听器=&gt;控制服务进程=&gt;控制数据库实例</p><p> Oracle实例指的是由Oracle内存结构(SGA)和Oracle进程组合在一起的统称.</p><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><ul><li>DBWn, 数据库写, 缓存数据(灰数据)写入硬盘, 定期执行, 推进检查点</li><li>LGWR, 日志写</li><li>ARCn, 归档, 日志切换时把日志放到硬盘</li></ul><h2 id="数据库存储体系架构"><a href="#数据库存储体系架构" class="headerlink" title="数据库存储体系架构"></a>数据库存储体系架构</h2><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><ul><li><p>参数文件启动实例控制内存结构</p></li><li><p>利用参数文件里的设置找到控制文件</p></li><li><p>利用控制文件找到数据文件和联机重做重做日志文件</p></li><li><p>归档重做日志, 备份文件</p></li><li><p>生成预警日志, 跟踪文件</p></li><li><p>口令文件, 数据库没有启动时检查用户是否有开机权限</p></li></ul><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h4><ul><li>oracle 数据块, 是系统块的整数倍</li><li>连续的oracle块构成区</li><li>一个表内有一个段, 一个段默认一个区, 区写满了就再加一个</li><li>表空间内部放置段, 可以横跨多个数据文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> oracle </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-09-28-Mysql简介</title>
      <link href="/2019/12/03/MySQL/2019-09-28-Mysql%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/12/03/MySQL/2019-09-28-Mysql%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li><p>lamp.sh</p></li><li><p>查看服务是否启动</p><pre><code>  systemctl | grep mysqld</code></pre></li><li><p>启动/停止/重启服务</p><pre><code>systemctl start/stop/restart mysqld</code></pre></li></ul><p><a href="https://www.cnblogs.com/caoxb/p/9405323.html" target="_blank" rel="noopener">centos安装参考</a></p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><ul><li><p><code>/etc/my.cnf</code></p></li><li><p>端口号: 默认3306. 端口号用来区分不同的服务. 前1000个端口号默认分配好. 从3306传入的是mysql服务. </p></li><li><p>有时需要关闭防火墙</p><pre><code>set enforce 0systemctl stop firewalld</code></pre></li></ul><h1 id="Mysql客户机"><a href="#Mysql客户机" class="headerlink" title="Mysql客户机"></a>Mysql客户机</h1><ul><li>sqlyog</li><li>navicat</li></ul><h2 id="客户机的配置"><a href="#客户机的配置" class="headerlink" title="客户机的配置"></a>客户机的配置</h2><ul><li>主机: 虚拟机的ip地址. 使用本机则为<code>localhost</code>或<code>127.0.0.1</code>. <code>localhost</code>是环回地址, 发送端, 接收端都是同一个机器. </li><li>两步走连接: 先连接远程服务器的ssh, 端口默认22, 然后远程服务器通过<code>loaclhost</code>连接修改数据库, 这样数据库只能被主机连接, 数据使用ssh传输, 更加安全. </li><li>端口: 默认3306</li></ul><h1 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h1><pre><code>mysql -h localhost -u root -pEnter password:</code></pre><ul><li>字符集: 创建数据库时选择, 一般选择<code>utf8-general ci</code>, ci表示<code>case insensitive</code>.<ul><li><code>show character set</code> : 查看所有字符集</li><li><code>show variables like character%</code>: 查看当前的字符集.</li></ul></li></ul><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><pre><code>create database choose; // 创建choose数据库show databases; //查看所有数据库use database1; // 切换到数据库drop database database1; // 删除数据库</code></pre><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><pre><code>show engines; // 查看支持的引擎set default_storage_engine=InnoDB;create table mytable;desc mytable; // 描述表的结构</code></pre><ul><li>innoDB(mysql默认) <ul><li>支持外键, 某个键参照另一张表中的主键</li><li>支持事务, 如果过程没有全部完成, 就全部回滚</li><li>支持全文检索</li></ul></li><li>myISAM<ul><li>可以被压缩</li><li>可以检查和修复表</li><li>不支持事务和外键</li></ul></li></ul><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><pre><code class="sql">use mydbinsert into mytable (id) Values (1)</code></pre><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>系统变量以@@开头, 用户变量用@开头</p><h1 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h1><ol><li><p>停止服务</p><ul><li><p>方法一: 停止服务</p></li><li><p>方法二: <code>flush tables with read lock;</code> 备份, 把数据刷新到数据库文件, 锁定所有的表</p></li></ul></li><li><p>选择备份文件</p><ul><li>如果用的myISAM或InnoDB而没有拆分文件, 备份就要备份整个数据库</li><li>备份配置文件</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-09-28-Mysql基本操作</title>
      <link href="/2019/12/03/MySQL/2019-09-28-Mysql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/12/03/MySQL/2019-09-28-Mysql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ol><li><p>整型</p><ul><li>有/无符号</li></ul></li><li><p>小数</p><ul><li>decimal(5,2), 一共长5位, 小数2位, 精确小数</li><li>float, 浮点数4个字节</li><li>double, 8字节</li></ul></li><li><p>字符串</p><ul><li>char: 定长(任意长度字符串都占用255个字符)</li><li>varchar: 变长(表示长度小于255字符的字符串)</li><li>text: 长文本.</li></ul></li><li><p>日期</p><ul><li>datetime/timestamp, 日期时间混合. datetime取值范围大</li><li>time/date, 表示日期或时间</li><li>select now(), 获取当前时间(选择now字段)</li></ul></li><li><p>二进制</p><ul><li>比较少用</li></ul></li></ol><ul><li><p>数据类型尽可能短且简单</p></li><li><p>尽量用内置的日期和时间数据类型</p></li><li><p>短的数据类型放前面</p></li><li><p>使用decimal而不用float</p></li><li><p>避免NULL</p></li></ul><h2 id="设置约束"><a href="#设置约束" class="headerlink" title="设置约束"></a>设置约束</h2><ol><li>设置主键<ul><li>尽量不要设置复合主键</li></ul></li><li>自动增长<ul><li>auto-increment</li></ul></li></ol><h2 id="复制表结构"><a href="#复制表结构" class="headerlink" title="复制表结构"></a>复制表结构</h2><pre><code>create table newtable like oldtable;</code></pre><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-25-画三维图</title>
      <link href="/2019/12/03/Matlab/2019-11-25-%E7%94%BB%E4%B8%89%E7%BB%B4%E5%9B%BE/"/>
      <url>/2019/12/03/Matlab/2019-11-25-%E7%94%BB%E4%B8%89%E7%BB%B4%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="画三维图"><a href="#画三维图" class="headerlink" title="画三维图"></a>画三维图</h1><h2 id="surf-x-y-z"><a href="#surf-x-y-z" class="headerlink" title="surf(x,y,z)"></a>surf(x,y,z)</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ul><li><p>绘图</p><pre><code>  [X,Y] = meshgrid(1:0.5:10,1:20);  Z = sin(X) + cos(Y);  surf(X,Y,Z)</code></pre><p>   <img src="https://ww2.mathworks.cn/help/matlab/ref/createsurfaceplotsexample_01_zh_CN.png" alt="img"> </p></li></ul><ul><li><p>用颜色代表数值的四维图</p><pre><code>[X,Y] = meshgrid(1:0.5:10,1:20);Z = sin(X) + cos(Y);C = X.*Y;surf(X,Y,Z,C)colorbar</code></pre></li><li><p>用rgb指明颜色</p><pre><code>[X,Y,Z] = peaks(25);CO(:,:,1) = zeros(25); % redCO(:,:,2) = ones(25).*linspace(0.5,0.6,25); % greenCO(:,:,3) = ones(25).*linspace(0,1,25); % bluesurf(X,Y,Z,CO)</code></pre></li></ul><h3 id="使用句柄的高级功能"><a href="#使用句柄的高级功能" class="headerlink" title="使用句柄的高级功能"></a>使用句柄的高级功能</h3><ul><li><p>半透明</p><pre><code class="matlab">s = surf(X,Y,Z,&#39;FaceAlpha&#39;,0.5)</code></pre></li><li><p>去边线</p><pre><code class="matlab">s.EdgeColor = &#39;none&#39;;</code></pre></li></ul><h2 id="mesh-X-Y-Z"><a href="#mesh-X-Y-Z" class="headerlink" title="mesh(X,Y,Z)"></a>mesh(X,Y,Z)</h2><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><ul><li><p>绘图</p><pre><code>[X,Y] = meshgrid(-8:.5:8);R = sqrt(X.^2 + Y.^2) + eps;Z = sin(R)./R;mesh(X,Y,Z)</code></pre><p> <img src="https://ww2.mathworks.cn/help/matlab/ref/specifycolorfomeshplotexample_01_zh_CN.png" alt="img"> </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Matlab </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-18-plot作图</title>
      <link href="/2019/12/03/Matlab/2019-11-18-plot%E4%BD%9C%E5%9B%BE/"/>
      <url>/2019/12/03/Matlab/2019-11-18-plot%E4%BD%9C%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="plot函数"><a href="#plot函数" class="headerlink" title="plot函数"></a>plot函数</h1><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ul><li>markersize, 调整标记大小</li><li>linewidth, 调整线宽</li></ul><h2 id="调整图片初始大小位置"><a href="#调整图片初始大小位置" class="headerlink" title="调整图片初始大小位置"></a>调整图片初始大小位置</h2><pre><code class="matlab">set(gcf,&#39;position&#39;,[10,10,2000,2000]) % 从屏幕的坐标(10,10)跨到(2000,2000)</code></pre><h2 id="画子图"><a href="#画子图" class="headerlink" title="画子图"></a>画子图</h2><pre><code class="matlab">subplot(2,3,4) % 2行3列, 第四个图</code></pre><h2 id="坐标轴"><a href="#坐标轴" class="headerlink" title="坐标轴"></a>坐标轴</h2><h3 id="坐标轴范围"><a href="#坐标轴范围" class="headerlink" title="坐标轴范围"></a>坐标轴范围</h3><pre><code class="matlab">axis equal % 坐标轴等比例axis([-2,3,-1.5,inf]) % x从-2到3, y下限是-1.5, 上限自动(设为inf)</code></pre><h3 id="坐标轴标签"><a href="#坐标轴标签" class="headerlink" title="坐标轴标签"></a>坐标轴标签</h3><pre><code class="matlab">xlabel(&#39;$P_{\phi}/\psi_{w}$&#39;,&#39;FontSize&#39;,16,&#39;interpreter&#39;,&#39;latex&#39;)</code></pre><p>interpreter可以选择<code>latex</code>, <code>tex</code>, <code>none</code></p><h2 id="添加图例"><a href="#添加图例" class="headerlink" title="添加图例"></a>添加图例</h2><pre><code>legend(&#39;legend1&#39;,&#39;legend2&#39;,...)        </code></pre><p>图例和plot的顺序一一对应.</p><p>如果不想显示某个plot的图例, 给这个plot一个句柄, 然后关闭这个句柄的图例</p><pre><code class="matlab">a = plot(x3,y3,&#39;k-&#39;,x3,z3,&#39;k-&#39;,u3,s3,&#39;k-&#39;,v3,r3,&#39;k-&#39;,t3,w3,&#39;k-&#39;,&#39;LineWidth&#39;,1);set(a,&#39;handlevisibility&#39;,&#39;off&#39;);</code></pre><h2 id="为图添加注释"><a href="#为图添加注释" class="headerlink" title="为图添加注释"></a>为图添加注释</h2><pre><code class="matlab">text(x,y,&#39;comment&#39;)</code></pre><h2 id="添加标题"><a href="#添加标题" class="headerlink" title="添加标题"></a>添加标题</h2><pre><code class="matlab">title(&#39;your title&#39;, &#39;interpreter&#39;, &#39;none&#39;)</code></pre><h2 id="保存当前图片"><a href="#保存当前图片" class="headerlink" title="保存当前图片"></a>保存当前图片</h2><pre><code class="matlab">saveas(gcf, &#39;path&#39;)</code></pre><p>可以保存为png或fig文件</p>]]></content>
      
      
      <categories>
          
          <category> Matlab </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-08-25-Markdown学习笔记</title>
      <link href="/2019/12/03/Markdown/2019-08-25-Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/12/03/Markdown/2019-08-25-Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML" async></script><style>  table{    border-left:1px solid #000000;border-top:1px solid #000000;    width: 100%;    word-wrap:break-word; word-break:break-all;  }  table th{  text-align:center;  }  table th,td{    border-right:1px solid #000000;border-bottom:1px solid #000000;  }</style><h1 id="Markdown学习笔记"><a href="#Markdown学习笔记" class="headerlink" title="Markdown学习笔记"></a>Markdown学习笔记</h1><h2 id="使用-创建不同等级的标题"><a href="#使用-创建不同等级的标题" class="headerlink" title="使用#创建不同等级的标题"></a>使用#创建不同等级的标题</h2><pre><code># 一级标题## 二级标题</code></pre><h2 id="两个以上空格-enter-表示分段"><a href="#两个以上空格-enter-表示分段" class="headerlink" title="两个以上空格+[enter]表示分段"></a>两个以上空格+[enter]表示分段</h2><p>This is first paragraph.<br>This is second paragraph.  </p><h2 id="不同的字体"><a href="#不同的字体" class="headerlink" title="不同的字体"></a>不同的字体</h2><pre><code>*italic***bold*****bold italic***</code></pre><p><strong>我永远爱八重樱</strong></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><pre><code>***</code></pre><p>Part 1 …</p><hr><p>part 2 …</p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><pre><code>~~UNIX~~</code></pre><p>GNU’s NOT <del>UNIX</del></p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><pre><code>&lt;u&gt;我永远爱八重樱&lt;/u&gt;</code></pre><p><u>我永远爱八重樱</u></p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><pre><code>八重樱[^1].[^1]: 我老婆.</code></pre><p>八重樱<a href="我老婆.">^1</a>.</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="使用-表示无序列表"><a href="#使用-表示无序列表" class="headerlink" title="使用*表示无序列表."></a>使用<code>*</code>表示无序列表.</h3><pre><code>* First* Second* Third</code></pre><p>我的老婆有:</p><ul><li>八重樱</li><li>八重樱</li><li>八重樱  </li></ul><h3 id="使用数字-表示有序列表"><a href="#使用数字-表示有序列表" class="headerlink" title="使用数字+.表示有序列表."></a>使用<code>数字+.</code>表示有序列表.</h3><ol><li>八重樱</li><li>七重樱</li><li>六重樱  </li></ol><h3 id="使用tab表示嵌套列表"><a href="#使用tab表示嵌套列表" class="headerlink" title="使用tab表示嵌套列表"></a>使用tab表示嵌套列表</h3><ol><li>八重樱<ul><li>我老婆  </li></ul></li></ol><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><blockquote><p>block<br>block  </p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol><li>用重音符号包裹代码.<br>打印<code>print(&#39;hello world&#39;)</code>.</li><li>用三个重音符号包裹代码块并指定语言.<pre><code class="python">print(&#39;我永远爱八重樱&#39;)</code></pre></li></ol><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>[连接名称](链接地址)<br>或<br>&lt;链接地址&gt;<br><a href="https://www.zhihu.com" target="_blank" rel="noopener">知乎</a><br><a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a><br>[连接名称][引注]<br><a href="https://www.google.com" target="_blank" rel="noopener" title="可以输入标题">Google</a>  </p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>&lt;img src=”./八重樱.bmp” width=”50%”&gt;<br>将显示如下效果.<br><img src="/2019/12/03/Markdown/2019-08-25-Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/八重樱.bmp" width="50%"></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre><code>|表头|表头|表头||:-|-:|:-:||左对齐|右对齐|居中对齐|</code></pre><table><thead><tr><th align="left">表头</th><th align="right">表头</th><th align="center">表头</th></tr></thead><tbody><tr><td align="left">左对齐</td><td align="right">右对齐</td><td align="center">居中对齐</td></tr></tbody></table><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="html元素"><a href="#html元素" class="headerlink" title="html元素"></a>html元素</h3><pre><code>使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</code></pre><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p><code>\</code> +<code>特殊符号</code>表示转义.<br>支持</p><blockquote><p>\   反斜线<br>`   反引号<br>*   星号<br>_   下划线<br>{}  花括号<br>[]  方括号<br>()  小括号<br>#   井字号<br>+   加号<br>-   减号<br>.   英文句点<br>!   感叹号  </p></blockquote><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><pre><code>$$\beta =\frac{P}{B^22\mu _0}$$</code></pre><p>输出<br>$$<br>\beta =\frac{P}{B^22\mu _0}<br>$$<br>有时公式无法正常显示, 就需要在文档中加上:</p><pre><code class="html">&lt;script src=&#39;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&#39; async&gt;&lt;/script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-09-17-后台运行python</title>
      <link href="/2019/12/03/Linux/2019-09-17-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8Cpython/"/>
      <url>/2019/12/03/Linux/2019-09-17-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8Cpython/</url>
      
        <content type="html"><![CDATA[<h1 id="后台运行python"><a href="#后台运行python" class="headerlink" title="后台运行python"></a>后台运行python</h1><h2 id="方法1-使用nohup"><a href="#方法1-使用nohup" class="headerlink" title="方法1:使用nohup"></a>方法1:使用nohup</h2><pre><code>$ nohup python ***.py &amp;</code></pre><p>输入这条指令后使用<code>exit</code>退出ssh客户端. </p><h2 id="方法2-用screen来后台运行工程"><a href="#方法2-用screen来后台运行工程" class="headerlink" title="方法2:用screen来后台运行工程"></a>方法2:用screen来后台运行工程</h2><p>###首先安装screen</p><p>###创建screen</p><p>在命令行输入</p><pre><code class="bash">screen</code></pre><p>来开启新的窗口,在里面运行python xxxx.py</p><p>现在就算ssh挂了该进程也不会死,而且可以通过后面的手段重新打开该进程</p><p>###重新回到窗口</p><pre><code class="bash">screen -ls</code></pre><p>可以看到目前后台运行的screen的id</p><p>如果dettached、</p><pre><code class="bash">screen -r id</code></pre><p>如果attached</p><pre><code class="bash">screen -rd id</code></pre><p>这里好处是,screen也可以显示程序的输出</p><p>但是还是推荐把输出写入txt里面</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-09-03-shell脚本</title>
      <link href="/2019/12/03/Linux/2019-09-03-shell%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/12/03/Linux/2019-09-03-shell%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>第一行声明shell的名称</p><pre><code>#!/bin/bash</code></pre></li><li><p>程序结构</p><ul><li>声明shell名称</li><li>程序内容:<ul><li>内容与功能</li><li>版本信息</li><li>作者联系方式</li><li>创建日期</li><li>维护记录</li></ul></li><li>声明环境变量, PATH是最重要的, 让程序运行的时候可以直接下达指令</li><li>主要程序</li><li>执行成果告知, <code>exit 0</code>表示离开程序, 返回一个0给系统. </li></ul></li><li><p>程序运行</p><ul><li><p>保存为<code>.sh</code>格式</p></li><li><p>使用<code>./filename.sh</code>或者<code>sh filename.sh</code>执行</p></li><li><p>注意要有<code>x</code>权限</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-09-01-环境变量</title>
      <link href="/2019/12/03/Linux/2019-09-01-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2019/12/03/Linux/2019-09-01-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h1><p><strong>环境变量在注销后会被重置, 所以要修改<code>~/.bashrc</code>文档让环境变量自动加载</strong></p><p><strong><code>source ~/.bashrc</code>来立即执行修改</strong></p><ol><li><p>提示字符</p><p>输入bash命令前面显示的信息, 例如<code>[root@linux home] $</code>, 可以使用PS1变量修改.</p><p>特殊字符的含义为: </p><ul><li>\d ：代表日期，格式为 Weekday Month Date，例如 “Mon Aug 1”</li><li>\H ：完整的主机名称。举例来说，鸟哥的练习机 linux.dmtsai.tw ，那么这个主机名称就是 linux.dmtsai.tw</li><li>\h ：仅取主机名称的第一个名字。以上述来讲，就是 linux 而已， .dmtsai.tw 被省略。</li><li>\t ：显示时间，为 24 小时格式，如： HH:MM:SS</li><li>\T ：显示时间，12 小时的时间格式！</li><li>\A ：显示时间，24 小时格式， HH:MM</li><li>\u ：目前使用者的账号名称；</li><li>\v ：BASH 的版本信息；</li><li>\w ：完整的工作目录名称。主目录会以 ~ 取代；</li><li>\W ：利用 basename 取得工作目录名称，所以仅会列出最后一个目录名。</li><li>\# ：下达的第几个指令。</li><li>\$ ：提示字符，如果是 root 时，提示字符为 # ，否则就是 $ 啰～</li></ul><pre><code># PS1=&#39;[\u@\h \w \A #\#]\$&#39;</code></pre></li><li><p>快捷键</p><pre><code># stty -a # 查看所有快捷键# stty [command] [hotkey]</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-09-01-数据流</title>
      <link href="/2019/12/03/Linux/2019-09-01-%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
      <url>/2019/12/03/Linux/2019-09-01-%E6%95%B0%E6%8D%AE%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h1><h2 id="数据流重定向"><a href="#数据流重定向" class="headerlink" title="数据流重定向"></a>数据流重定向</h2><ol><li><p>将命令的输出写入文件</p><pre><code># ls -al / &gt; ./rootfiles # 写入到rootfiles# ls -al / &gt;&gt; ./rootfiles # 追加到rootfiles</code></pre></li><li><p>将命令报错写入文件</p><pre><code># ls -al /notadir 2&gt; ./rootfiles # 写入到rootfiles# ls -al /notadir 2&gt;&gt; ./rootfiles # 追加到rootfiles# ls -al /notadir 2&gt; /dev/null # /dev/null是一个黑洞, 扔进去的东西就没了 </code></pre></li><li><p>将正确和报错都写入同一个文件</p><pre><code># ls -al / &gt; ./rootfiles 2&gt;&amp;1 # 写入到rootfiles, &amp;1指代rootfiles</code></pre></li><li><p>从文件读取</p><pre><code># ls &lt; listfile</code></pre></li></ol><h2 id="一定条件下执行命令"><a href="#一定条件下执行命令" class="headerlink" title="一定条件下执行命令"></a>一定条件下执行命令</h2><ol><li><p><code>;分隔符</code>:连续执行多个命令</p><pre><code># ls;touch newfile</code></pre></li><li><p><code>&amp;&amp;分隔符</code>: 在前一条命令不报错的时候执行下一条命令</p><pre><code># ls /tmp &amp;&amp; touch /tmp/newfile # /tmp目录存在时创建/tmp/newfile</code></pre></li><li><p><code>||分隔符</code>: 在前一条命令报错的时候执行下一条命令</p><pre><code># ls /tmp/newfile || touch /tmp/newfile # 如果/tmp/newfile不存在就创建它</code></pre></li></ol><h2 id="提取信息"><a href="#提取信息" class="headerlink" title="提取信息"></a>提取信息</h2><ol><li><p>使用<code>grep</code>搜寻字符串</p><pre><code># grep [expr] [targetfile(s)]</code></pre><ul><li><p>数据流重定向给grep</p><pre><code> # ls | grep [expr]</code></pre></li><li><p><code>grep</code>正则表达式的特殊规则</p><ul><li><code>{m, n}</code>:大括号需要转义, 亦即写成<code>grep &#39;...\{m, n\}&#39; ...</code></li><li><code>[a-z]</code>: 中括号不需要转义</li></ul></li><li><p><code>egrep</code>, 延申的正则表达式</p><ul><li>可以使用<code>+, ?, |, ()</code>等特殊符号</li></ul></li></ul></li><li><p>使用<code>sed</code>替换删除</p><pre><code># sed &#39;[line range][actions]&#39; [stdin]</code></pre><p><code>[line range]</code>用<code>n1,n2</code>的形式表示<code>n1行到n2行所有行</code>.</p><p><code>[actions]</code>包括: <code>a</code>: 新增, <code>c</code>: 取代, <code>d</code>: 删除, <code>i</code>:插入, <code>p</code>: 打印, <code>s</code>: 取待, 语法类似vim中ex编辑器.</p><p>如果一个<code>sed</code>不够, 还可以再接<code>sed</code>.</p><p><strong>单引号不要丢</strong></p><ul><li><p>列出<code>/etc/passwd</code>, 删除2到5行</p><pre><code># cat /etc/passwd | sed &#39;2,5d&#39;</code></pre></li><li><p>在2到5行后增加两行文字<code>111\n222</code></p><pre><code># cat /etc/passwd | sed &#39;2,5a111\&gt;222&#39; # 通过命令行的换行来增加多行文字</code></pre></li><li><p>将2到5行的<code>:</code>更换为<code>,</code></p><pre><code># cat /etc/passwd | sed &#39;2,5s/:/,/g&#39;</code></pre></li></ul></li></ol><h2 id="比较文件不同"><a href="#比较文件不同" class="headerlink" title="比较文件不同"></a>比较文件不同</h2><ol><li><p><code>diff</code></p><pre><code># diff [-bBi] from-file to-file比较from-file和to-file的不同, 输出from-file和to-file的差异-b: 多个连续空格视作一个-B: 忽略空行差异-i: 忽略大小写差异</code></pre></li><li><p><code>cmp</code></p><pre><code># cmp [-s] from-file to-file如果没有-s参数, 只会列出第一个不同处. 可以比较二进制文件.</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-09-01-shell快捷键</title>
      <link href="/2019/12/03/Linux/2019-09-01-shell%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2019/12/03/Linux/2019-09-01-shell%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="查看shell的快捷键"><a href="#查看shell的快捷键" class="headerlink" title="查看shell的快捷键"></a>查看shell的快捷键</h1><pre><code># stty -aspeed 38400 baud; rows 24; columns 80; line = 0;intr = ^C; quit = ^\; erase = ^?; kill = ^U; eof = ^D; eol = M-^?; eol2 = M-^?;swtch = M-^?; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W;lnext = ^V; flush = ^O; min = 1; time = 0;-parenb -parodd -cmspar cs8 hupcl -cstopb cread -clocal -crtscts-ignbrk brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff-iuclc ixany imaxbel iutf8opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprtechoctl echoke</code></pre><p>其中, </p><ul><li><code>intr</code>: 中断当前命令</li><li><code>quit</code>: 中断命令, 给出<code>core dumped</code>错误</li><li><code>erase</code>: 退格. 注意<code>^?</code>要输入<code>[ctrl][shift][/]</code></li><li><code>kill</code>: 清除整行</li><li><code>eof</code>: end of file, 关闭当前终端窗口</li><li><code>start</code>: 重新启动该程序的output</li><li><code>stop</code>: 终止output</li><li><code>susp</code>: 送出一个<code>terminal stop</code>给当前运行的程序</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-08-31-bash变量设置</title>
      <link href="/2019/12/03/Linux/2019-08-31-bash%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE/"/>
      <url>/2019/12/03/Linux/2019-08-31-bash%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Bash变量"><a href="#Bash变量" class="headerlink" title="Bash变量"></a>Bash变量</h1><ol><li><p>变量的命名和赋值</p><pre><code> # name1=Vbird # 等号周围没有空格 # name2=$name1 # name2内容为Vbird # name2=&quot;$name1&quot; # name2内容为Vbird, 双引号可以引用变量内容 # name2=&#39;$name1&#39; # name2内容为$name1 # name2=&quot;$name1&quot;yes # name2内容为Vbirdyes # name3=`ls` # 使用重音符号``可调用命令的返回值, name3的内容位ls显示的东西 # echo $name3 # 查看name3的内容, 注意$符号 # echo $? # ?的值代表上一条命令的返回值, 如果上一条命令没有错误, 返回值通常为0 # export name3 # 让name3变为环境变量, 可以在子进程中访问 # export # 查看所有环境变量 # env # 查看所有环境变量 # set # 查看所有变量</code></pre></li><li><p>读取变量, 数组, 声明</p><ul><li><p><code>read -p &quot;接提示字符&quot; -t 等待输入最长时间 var_name</code>: 将输入的字符传递给var_name</p></li><li><p><code>declare [-axir] variable</code>: 将variable定义为不同的类型:</p><ul><li><code>-a</code>: 数组</li><li><code>-i</code>: 整数</li><li><code>-x</code>: 环境变量</li><li><code>-r</code>: readonly</li></ul><pre><code># declare -i sum=100+200# echo $sum # 输出300</code></pre></li><li><p>数组</p><ul><li><code>var[1]=aaa</code>: 定义数组</li><li><code>echo ${var[1]}</code>: 显示数组</li></ul></li></ul></li><li><p>匹配替换删除并输出</p><ul><li><code>echo ${var##expr}</code>: 从var开头匹配expr表达式, 并且删除匹配到的部分(var内容没有改变), 输出剩下的. 贪婪匹配.</li><li><code>echo ${var#expr}</code>: 开头, 非贪婪匹配.</li><li><code>echo ${var%%expr}</code>: 结尾, 贪婪匹配.</li><li><code>echo ${var%expr}</code>: 结尾, 非贪婪匹配.</li><li><code>echo ${var//text/sub}</code>: 在var中, 取代<code>text</code>为<code>sub</code>, 匹配到的全部取代.</li><li><code>echo ${var/text/sub}</code>: 仅取待第一个.</li></ul></li><li><p>根据str的内容设置var</p><ul><li><code>var=${str-newvar}</code>: 如果<code>str</code><strong>存在</strong>, <code>var=$str</code>, 如果<strong>不存在</strong>, <code>var=&quot;newvar&quot;</code></li><li><code>var=${str=newvar}</code>: 如果<code>str</code><strong>存在</strong>, 设置<code>var=$str</code>, 如果<code>str</code><strong>不存在</strong>, 就设置<code>str=&quot;newvar&quot;, var=&quot;newvar&quot;</code></li><li><code>var=${str?novar}</code>: 如果<code>str</code>存在, <code>var=$str</code>, 如果<strong>不存在</strong>, 报错<code>novar</code></li></ul></li><li><p>history</p><ul><li><code>history 3</code>: 查看3条历史命令</li><li><code>history -c</code>: 清除history</li><li><code>history -w</code>: 保存history到histfiles</li><li><code>history -r</code>: 从historyfiles读取history</li><li><code>!23</code>: 执行history编号23的命令</li><li><code>!expr</code>: 从history列表中的命令, 从下至上, 开头匹配<code>expr</code>, 直到第一个匹配成功, 执行这条命令</li><li><code>!!</code>: 执行上一条命令</li></ul></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-08-30-归档压缩备份</title>
      <link href="/2019/12/03/Linux/2019-08-30-%E5%BD%92%E6%A1%A3%E5%8E%8B%E7%BC%A9%E5%A4%87%E4%BB%BD/"/>
      <url>/2019/12/03/Linux/2019-08-30-%E5%BD%92%E6%A1%A3%E5%8E%8B%E7%BC%A9%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="tar的常见应用"><a href="#tar的常见应用" class="headerlink" title="tar的常见应用"></a>tar的常见应用</h2><ul><li><p>查看<code>etc.tar.gz</code>中存在的文件并且解压<code>etc.tar.gz</code>内的passwd文件</p><pre><code>tar -ztvf ./etc.tar.gz # -t用来查看tar -zxvf ./etc.tar.gz etc/passwd # 注意etc前面没有斜杠</code></pre></li><li><p>归档某一个文件/文件夹并且保留权限</p><pre><code>tar -zcvpf # p == permission, 用来保留权限</code></pre></li><li><p>仅备份2005/06/01后创建的文件</p><pre><code>tar -N &#39;2005/06/01&#39; -zcvf ...</code></pre></li><li><p>备份<code>/home</code>, 但不要<code>/home/newfile</code></p><pre><code>tar --exclude /home/newfile -zcvf home.tar.gz /home</code></pre></li><li><p>仅备份2005/06/01后创建的文件</p><pre><code>tar --exclude -N &#39;2005/06/01&#39; -zcvf /home</code></pre></li></ul><h2 id="dd-备份磁盘"><a href="#dd-备份磁盘" class="headerlink" title="dd: 备份磁盘"></a>dd: 备份磁盘</h2><ul><li><p><code>dd if=input_file of=output_file bs=block_size</code>: bs如果未指定就为512字节.</p></li><li><p><code>dd if=/dev/hda1 of=somefile</code>: 将/dev/hda1这个磁盘完整备份到somefile中去. 注意somefile不要再hda1内.</p></li><li><p><code>dd if=somefile of=/dev/hda1</code>: 还原到hda1.</p></li></ul><h2 id="cpio-通过数据流重定向备份文件"><a href="#cpio-通过数据流重定向备份文件" class="headerlink" title="cpio: 通过数据流重定向备份文件"></a>cpio: 通过数据流重定向备份文件</h2><pre><code># cpio -covB &gt; FileNameOrDeviceName # 备份到FileNameOrDeviceName# cpio -icduv &lt; FileNameOrDeviceName # 从FileNameOrDeviceName还原</code></pre><ul><li>需要先用find输出文件路径以及文件名, 然后将输出定向到cpio进行备份.</li></ul><pre><code># find /etc -type f | cpio -o &gt; /root/etc.cpio # 备份/etc下所有文件</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-08-29-档案属性和用户配置</title>
      <link href="/2019/12/03/Linux/2019-08-29-%E6%A1%A3%E6%A1%88%E5%B1%9E%E6%80%A7%E5%92%8C%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/12/03/Linux/2019-08-29-%E6%A1%A3%E6%A1%88%E5%B1%9E%E6%80%A7%E5%92%8C%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>如何识别用户<br>id 当前是什么用户 返回：uid：用户id，gid：组id:组目录：登陆后用哪个shell，…系统通过uid鉴别用户<br>/etc/passwd 存放所有用户，username:x:1:0,代表用户名与密码与uid与组id<br>ls -l &gt;&gt; -rw-r–r–. 1 root root 17 …. root.txt ,第一个字符：字符设备c、区块设备b、文件-,一个数字代表链接，跟着用户和用户组，文件大小，修改时间，文件名<br>/etc/sudoers 所有管理员授权的用户,不应当随意编辑<br>visudo 编辑sudoers文件</p><h2 id="chgrp-chown-chmod"><a href="#chgrp-chown-chmod" class="headerlink" title="chgrp, chown, chmod"></a>chgrp, chown, chmod</h2><pre><code># chgrp [-R] groupname filename/dir# chown [-R] groupname filename/dir# chmod [-R] 777 filename/dir</code></pre><h2 id="关于用户权限的一些信息"><a href="#关于用户权限的一些信息" class="headerlink" title="关于用户权限的一些信息"></a>关于用户权限的一些信息</h2><ul><li>目录的<code>x</code>权限决定能否进入目录, <code>w</code>权限决定能否在目录下进行删除, 更新, 新建等操作.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-08-29-根目录,ext3</title>
      <link href="/2019/12/03/Linux/2019-08-29-%E6%A0%B9%E7%9B%AE%E5%BD%95,ext3/"/>
      <url>/2019/12/03/Linux/2019-08-29-%E6%A0%B9%E7%9B%AE%E5%BD%95,ext3/</url>
      
        <content type="html"><![CDATA[<h1 id="根目录-ext3"><a href="#根目录-ext3" class="headerlink" title="根目录,ext3"></a>根目录,ext3</h1><h2 id="根目录下的文件"><a href="#根目录下的文件" class="headerlink" title="根目录下的文件"></a>根目录下的文件</h2><ul><li><p><code>/bin</code>, <code>/usr/bin</code>, <code>/usr/local/bin</code>: 可执行的二进制文件</p></li><li><p><code>/boot</code>: 开机文件, <code>/boot/vmlinuz</code>下放置的是linux内核. <code>/boot/grub</code>防止的开机管理程序<code>grub</code>.</p></li><li><p><code>/dev</code>: 装置与接口文档. 接口设备(character device), 如键盘, 鼠标等; 块设备(block device), 如硬盘, 光盘等.</p></li><li><p><code>/etc</code>: 系统的设定文件, 如用户等.</p><ul><li><p><code>/etc/init.d/</code>: 服务的启动与停止.</p><p><code>/etc/init.d/iptables start</code>: 启动iptables服务.</p><p><code>/etc/init.d/iptables stop</code>: 停用iptables服务.</p></li></ul></li><li><p><code>/lib</code>, <code>/usr/lib</code>, <code>/usr/local/lib</code>: 函数库. kernel的关键模块放置在<code>/lib/modules</code>下.</p></li><li><p><code>/mnt</code>: 挂载点.</p></li><li><p><code>/opt</code>: 软件安装的目录.</p></li><li><p><code>/proc</code>: 重要的数据, 只存放在内存中. </p></li><li><p><code>/sbin</code>, <code>/usr/sbin</code>, <code>/usr/local/sbin</code>: 只有管理员才能使用的可执行二进制文件.</p></li><li><p><code>/srv</code>: 一些服务要用到的数据就放在里面.</p></li><li><p><code>/usr</code>: 系统程序, 图形接口文件, 函数库, 本机自行安装的软件, 共享的目录与文件.</p><ul><li><code>/usr/bin</code>, <code>/usr/sbin</code></li><li><code>/usr/include</code>: c/c++ 需要include的库.</li><li><code>/usr/lib</code>: 软件函数库. </li><li><code>/usr/local</code>: 本机自行安装软件预放置的目录. </li><li><code>/usr/share</code>: 共享目录. <code>/usr/share/doc</code>: 系统说明文件. <code>/usr/share/man</code>: man的说明文档. </li><li><code>/usr/src</code>: linux系统代码. <code>/usr/src/linux</code>是核心源代码. </li></ul></li><li><p><code>/var</code>: 常态性变动文档.</p><ul><li><code>/var/chache</code>: 缓存文档. </li><li><code>/var/lib</code>: 程序运行时需要使用的数据文件放置的目录. </li><li><code>/var/log</code>: 登陆文件.</li><li><code>/var/spool</code>: 队列数据. <code>/var/spool/mail</code>放置收到的邮件. <code>/var/spool/mqueue</code>放置暂时发不出去的邮件. </li></ul></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>系统启动只会挂载根目录所在的分区, 因此与系统启动有关的文件都要放在根目录所在的分区内, 包括<code>/etc, /sbin, /bin, /dev, /lib</code>.</li><li>读取频繁的文件(容易造成磁盘损坏), 需要特定空间的文件可以单独挂载, 如<code>/home, /usr, /var</code>. </li></ul><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p><strong>ext3</strong>: 比ext2多了一个磁盘写入的日志, 写入磁盘时, 就会在日志中记录<code>开始写入</code>, 写入后就会记录<code>完成写入</code>. 这样遭遇断电事故, 检查日志就可以缩小检查文件一致性的磁盘范围. </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-08-29-man,info,reboot</title>
      <link href="/2019/12/03/Linux/2019-08-29-man,info,reboot/"/>
      <url>/2019/12/03/Linux/2019-08-29-man,info,reboot/</url>
      
        <content type="html"><![CDATA[<h1 id="man-info-shutdown"><a href="#man-info-shutdown" class="headerlink" title="man, info, shutdown"></a>man, info, shutdown</h1><h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><ul><li>查看特定代号的man, 使用<code>man -f [words]</code>, 可以查询<code>[words]</code>代表的所有代号. <code>man -f</code>相当于<code>whatis</code></li></ul><pre><code># man -f passwdpasswd (5)           - password filesslpasswd (1ssl)     - compute password hashespasswd (1)           - update user&#39;s authentication tokens</code></pre><ul><li><p>粗略寻找文件和帮助, 使用<code>man -k [words]</code>, 则会正则匹配<code>[words]</code>,<code>man -k</code>相当于<code>apropos</code>.</p></li><li><p>查看man文档的类型数字代表的含义, 使用<code>man man</code>, 在第二页. </p></li><li><p>查看特定类型的文件, 例如<code>passwd (5)</code>, 那么使用<code>man 5 passwd</code>.</p></li><li><p>man文档存放在<code>/usr/share</code>目录下.</p></li></ul><h2 id="info"><a href="#info" class="headerlink" title="info"></a>info</h2><ul><li>将光标停在info节点上, 按住<code>[enter]</code>就可以进入该节点.</li><li><code>n</code>和<code>p</code>分别用于跳转到下一个, 上一个节点. </li></ul><h2 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h2><ul><li><code>shutdown -h 1:30</code>: 在1:30关机.</li><li><code>shutdown -h +10</code>: 在10分钟后关机.</li><li><code>shutdown -r now</code>: 立刻重启. </li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-08-27-磁盘格式说明</title>
      <link href="/2019/12/03/Linux/2019-08-27-%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/"/>
      <url>/2019/12/03/Linux/2019-08-27-%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux的磁盘格式"><a href="#Linux的磁盘格式" class="headerlink" title="Linux的磁盘格式"></a>Linux的磁盘格式</h1><h2 id="磁盘分区术语说明"><a href="#磁盘分区术语说明" class="headerlink" title="磁盘分区术语说明"></a>磁盘分区术语说明</h2><ol><li>NTFS: 微软专用的磁盘格式,  替代FAT.</li><li>EXT4: 第四代扩展文件系统. </li><li>GUID: 全局唯一标识符, 128位, 显示硬件的唯一性.</li><li>UEFI: 统一的可扩展固件接口. 用于加载操作系统. </li><li>MBR: 分区表类型: 主引导记录, 磁盘前面的引导代码. <u>将分区信息写道磁盘64个字节中</u>, 读写硬盘时判断分区的合法性, 分区引导信息. Linux系统中MBR是GRUB加载器. 电脑启动时, BIOS先读取MBR, MBR启动windows.<ul><li>MBR分区可直接用的叫主分割(Primary), 不可直接用的叫扩展分割(Extended), 扩展分割最多一个.</li><li>Extended可以使用逻辑分区(Logical)来分割, 分区信息被记录到Extended中.</li><li>可以有多达63个逻辑分区. </li></ul></li><li>GPT: 分区表类型: GUID Partition Table, 全局唯一标识磁盘分区表. 使用UEFI启动. 微软建议使用GPT. </li><li>MSR: 微软保留分区. 一共备用. 在将磁盘转换为动态磁盘的时候会使用. </li><li>ESP: EFI系统分区. EFI BIOS来启动操作系统. <blockquote><p>使用DiskGenius查看分区类型: 选择硬盘, 如果显示<code>转换为MBR分区</code>, 说明当前是GPT. </p><img src="/2019/12/03/Linux/2019-08-27-%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/001.png" width="100%"></blockquote></li></ol><h2 id="Linux磁盘文件"><a href="#Linux磁盘文件" class="headerlink" title="Linux磁盘文件"></a>Linux磁盘文件</h2><ol><li>Linux硬件都挂载到/dev/下, <ul><li>IDE接口的硬盘目录: <code>/dev/hd\[abcd][123456...]</code>, <code>a</code>对应第一个IDE槽的master, <code>b</code>对应第一个的slave. 1对应第一个分区. 如果配置为<code>2\*primary + 1\*logical</code>, 那么<code>primary</code>对应<code>hda1,hda2</code>, <code>extended</code>对应<code>hda3</code>, <code>logical</code>对应<code>hda4</code>.</li><li>SATA接口的硬盘目录: <code>/dev/sd[abcd...]</code>.</li><li>m.2接口: <code>/dev/nvme[0123...]n1p[1234...]</code>.</li></ul></li></ol><h2 id="Linux安装分区"><a href="#Linux安装分区" class="headerlink" title="Linux安装分区"></a>Linux安装分区</h2><ol><li><p>/boot分区: 早年的bios只能读取1024个柱面. 如果启动文件放在前1024个柱面以外, 就无法读取. 因此需要专门划分100MB的/boot分区. 现在已不需要.</p></li><li><p>/swap分区: 虚拟内存. 服务器数据库需要大量读写的时候就尤为重要. 内存较小时, 大约是RAM的两倍.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-08-27-vim编辑器</title>
      <link href="/2019/12/03/Linux/2019-08-27-vim%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2019/12/03/Linux/2019-08-27-vim%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h1><pre><code>test paragraph:My name is van, i&#39;m an artist, a performance artist. i&#39;m hired for people to fulfill their fantasies, the deep dark fantesies.a</code></pre><h2 id="Moving-Cursor"><a href="#Moving-Cursor" class="headerlink" title="Moving Cursor"></a>Moving Cursor</h2><ul><li><code>i</code>: insert</li><li><code>I</code>: insert at front of line</li><li><code>a</code>: append</li><li><code>A</code>: append at end of line</li><li><code>o</code>: overline</li><li><code>O</code>: upperline</li><li><code>w</code>: word forward</li><li><code>b</code>: word backword</li><li><code>0</code>: move to the head of the line</li><li><code>$</code>: move o the end of line </li><li><code>+</code>: go to the first letter next line</li><li><code>-</code>: first letter last line</li><li><code>e/E</code>: end of word</li><li><code>h,j,k,l</code>: left,up,down,right</li><li><code>4h</code>: repeat ‘h’ 4 times</li></ul><h2 id="Edit"><a href="#Edit" class="headerlink" title="Edit"></a>Edit</h2><ul><li><code>c</code>: change the letter</li><li><code>cc</code>: change whole line</li><li><code>cw</code>: change word</li><li><code>c2b</code>: 2 words before the cursor</li><li><code>c$/C</code>: delete words from cursor to the end of this line(stay in insert mode)</li><li><code>c0</code>: cursor to the begin of the line</li><li><code>C</code>: delete words from the cursor to the end</li><li><code>s</code>: switch letter(will stay in the insert mode)</li><li><code>r</code>: replace(will stay in the cmd mode) </li><li><code>R</code>: replace but will cover letters behind</li><li><code>u</code>: undo</li><li><code>U</code>: recover whole line</li><li><code>ctrl+r</code>: redo</li><li><code>ZZ</code>: save and quit</li><li><code>:e!</code>: ignore changes without quitting the file</li><li><code>:q!</code>: ignore changes and quit</li><li><code>x</code>: delete letter in the cursor(stay in cmd mode)</li><li><code>X</code>: delete letter before cursor</li><li><code>d</code>: delete and put them in clipboard </li><li><code>dw</code>: delete word</li><li><code>dd</code>: delete line</li><li>`db,d2b,2dd,d$=D,d0,…</li><li><code>p</code>: place the text behind the cursor</li><li><code>P</code>: place before cursor</li><li><code>y</code>: copy</li><li><code>yy/Y</code>: copy whole line</li><li><code>.</code>: repeat last command</li></ul><h2 id="Scrolling-Screen"><a href="#Scrolling-Screen" class="headerlink" title="Scrolling Screen"></a>Scrolling Screen</h2><pre><code>^f means [ctrl] + [f]</code></pre><ul><li><code>^f</code>: forward scroll screen </li><li><code>^b</code>: backward scroll screen</li><li><code>^d</code>: downward half screen</li><li><code>^u</code>: upward half screen</li><li><code>z[enter]</code>: move cursor to the top of screen </li><li><code>z.</code>: move cursor to mid of screen</li><li><code>z-</code>: move cursor to end of screen</li><li><code>50z[enter]</code>: move line 50 to the top</li><li><code>H</code>: move cursor to the top of screen</li><li><code>M</code>: mid of screen</li><li><code>L</code>: buttom of screen</li><li><code>5H</code>: 5 lines down the screen</li><li><code>5L</code>: 5 lines up the screen</li><li><code>+/-</code>: move to the first letter of next/up line</li><li><code>^</code>: move to the first no space place</li><li><code>5|</code>: move to the 5th column of this line</li><li><code>e</code>: move to the end of letter</li><li><code>E</code>: move to the end of letter ignoring the punctuate</li><li><code>(</code>: move to the begining of current sentence</li><li><code>)</code>: ~ next sentence</li><li><code>{</code>: ~ current paragraph</li><li><code>}</code>: ~ next paragraph</li><li><code>[[</code>: ~ this section</li><li><code>]]</code>: ~ next section</li><li>`Move based of Search</li><li><code>/</code>: search downwards</li><li><code>?</code>: search upwards</li><li><code>n</code>: repeat last search</li><li><code>N</code>: repeat last search but in the opposite direction</li><li><code>fw</code>: move cursor to the next place of ‘w’(in this line)</li><li><code>Fw</code>: ~ last place ~</li><li><code>tw</code>: move cursor to the place before ‘w’    </li><li><code>Tw</code>: ~ last place ~</li><li><code>;</code>: repeat last searching cmd</li><li><code>&#39;</code>: ~ opposite direction</li><li>`Move based on line number</li><li><code>set nu</code>: view line number</li><li><code>ctrl+G</code>: view info of this line</li><li><code>G</code>: go to the last line</li><li><code>55G</code>: go to 55th line</li><li>`(command)(number)(object)</li><li><code>c17G</code>: change text from cursor to line 17</li><li><code>d{</code>: delete text from cursor to last paragraph</li><li><code>yH</code>: copy from cursor to head of screen</li></ul><h2 id="Open-File"><a href="#Open-File" class="headerlink" title="Open File"></a>Open File</h2><ul><li><code>vi + file</code>: open file at last line</li><li><code>vi +10 file</code>: open file at 10th line</li><li><code>vi +/&quot;pattern&quot; file</code>: open file at first pattern</li><li><code>vi -R file</code>: open file in “ReadOnly”(this case, use `:w! to write and quit)</li><li><code>view file</code>: ditto</li></ul><h2 id="Mark"><a href="#Mark" class="headerlink" title="Mark"></a>Mark</h2><ul><li><code>mx</code>: mark current place as x(can be any symble)</li><li><code>&#39;x</code>: move cursor to the line marked with x</li><li><code>\</code>x`: move cursor to mark x</li><li><code>``</code>: return to last mark or the place of cursor before moving</li><li><code>&#39;&#39;</code>: return to last mark or begining of the line </li></ul><h2 id="ex-Editor"><a href="#ex-Editor" class="headerlink" title="ex Editor"></a>ex Editor</h2><ul><li><code>:d[ln]</code>: delete + line number [ln]</li><li><code>:m</code>: move line</li><li><code>:co</code>/<code>t</code>: copy line</li><li><code>:3,18d</code>: delete line 3 to line 18</li><li><code>:170,220m3</code>: move line 170 to line 220 below line 3</li><li><code>:23,29c100</code>: copy line 23 to line 29 and paste below line 100</li><li><code>:set nu</code>: display line number</li><li><code>:.$0%</code>: present/last/first/all line of this passage</li><li><code>:20,.m$</code>: move from line 20 to present line to the end line</li><li><code>:+/-</code>: reletive line number</li><li><code>:.,.+10co.-20</code>: copy from present line to present +10 line and paste present - 20 line  </li><li><code>:/pattern/</code>: find line through pattern</li><li><code>(in vi)d/while</code>: delete words from cursor to ‘while’</li><li><code>(in ex):.,/while/d</code>: delete current to next match ‘while’</li><li><code>:g/pattern</code>: move to last ‘pattern’ in the article</li><li><code>:g/pattern/p</code>: display all lines that match pattern</li><li><code>:g!/pattern/p</code>: display any line not mathch ‘pattern’</li><li><code>:60,110g/pattern/p</code>: from line 60 to 110, search and display</li><li><code>|</code>: split commands</li><li><code>:1,3d | s/thier/their</code>: del 1 to 3 line, sub ‘thier’ to ‘their’(in current line, which is original line 4)</li><li><code>:w!</code>: write in by force</li><li><code>:1,30w newfile.txt</code>: write line 1 to 30 to newfile.txt</li><li><code>:1,30w &gt;&gt; newfile.txt</code>: append 1,30 to newfile.txt</li><li><code>:r/read filename</code>: read a newfile and copy it to next line of cursor</li><li><code>:100 r filename</code>: put the file to 100 line</li><li><code>:vi file1 file2; :w; :n</code>: edit file1, write file1, goto file2</li><li><code>:args</code>: show all file in edit list</li><li><code>:e file2</code>: switch to file2</li><li><code>:#,%</code>: represent for first file and second file</li><li><code>:w %.new</code>: save present content in buffer to a new file</li><li><code>:&quot;f4yy, w, e letter, &quot;fp</code>: yank line 4 into buffer ‘f’, save, switch to file ‘letter’, place text</li></ul><h2 id="Global-Replacement"><a href="#Global-Replacement" class="headerlink" title="Global Replacement"></a>Global Replacement</h2><ul><li><code>:s/old/new/</code>: substitude one ‘old’ to ‘new’, in current line</li><li><code>:s/old/new/g</code>: substitude all ‘old’ in the line</li><li><code>:1,$s/old/new/g</code>: substitude whole passage</li><li><code>:%s/old/new/g</code>: % == 1,$</li><li><code>:1,$s/old/new/gc</code>: c means confirmation, mannually confirm each change.(y+enter to change, enter to pass)</li><li><code>:g/pattern/s/old/new/g</code>: global search line with ‘pattern’, and sub ‘old’ to</li><li>`:  ‘new’ in the matched line </li><li><code>:%s/Yae/&amp; Sakura/</code>: substitude ‘Yae’ for ‘Yae Sakura’, ‘&amp;’ represents matched</li><li>`:  content</li><li><code>:s/\(this\) \(that\)/\u\1 \l\2</code>: ‘This That’ =&gt; ‘This that’</li><li>`:  !Attention, must use ‘(‘,’)‘ so the matched pattern can be written in \1, \2</li><li><code>:g/content/mo14</code>: search line with ‘content’ and move to line 14</li><li><code>:1,10g/^/ 12,17 t $</code>: copy line 12 to line 17 to end of passage 10 times</li><li><code>:g /^\d/.+2 w &gt;&gt; newfile</code>: search line begin with number, append 2 line next to it</li><li>`:  to a newfile</li><li><code>:/^part2/,/^part3/ g /^Chapter/ .+2 w &gt;&gt; newfile</code>: search line begin with</li><li>`:  Chapter from line start with ‘part2’ to ‘part3’ and append 2 lines after it to</li><li>`:  new file</li><li><code>:/^part2/,/^part3/ g /^Chapter/ .+2 w &gt;&gt; newfile | + t $</code>: append those lines to</li><li>`:  newfile and put one line after it to end of passage</li></ul><h2 id="Chapter-7-Advanced-Edit"><a href="#Chapter-7-Advanced-Edit" class="headerlink" title="Chapter 7: Advanced Edit"></a>Chapter 7: Advanced Edit</h2><h3 id="Customize-vi"><a href="#Customize-vi" class="headerlink" title="Customize vi"></a>Customize vi</h3><ul><li><code>:set option</code>: turn off option</li><li><code>:set nooption</code>: turn off option</li><li><code>:set all</code>: check all options</li><li><code>:set wrapmargin=10</code>: right margin = 10, auto change line</li><li><code>config &#39;.exrc&#39; file</code>: vi will pre process commands in ‘.exrc’, no need to input</li><li><code>&#39;</code>:’ before commands. <h3 id="Unix-Command"><a href="#Unix-Command" class="headerlink" title="Unix Command"></a>Unix Command</h3></li><li><code>:!ls</code>: add ‘!’ before order to run in unix</li><li><code>:sh</code>: open a shell window(press ^d to quit)</li><li><code>:r !filename</code>: put contents in filename to this passage</li></ul><h2 id="Chapter-10-vim-vi-improved"><a href="#Chapter-10-vim-vi-improved" class="headerlink" title="Chapter 10: vim-vi improved"></a>Chapter 10: vim-vi improved</h2><ul><li><code>50%</code>: go to line 50/100*(total line number)</li><li><code>v</code>: visual mode, can select words and put them into buffer<br><code>in visual mode</code><ul><li><code>as</code>: add a sentence to selected area</li><li><code>is</code>: add inner sentence</li><li><code>ap</code>: add paragraph</li><li><code>ip</code>: add inner paragraph</li><li><code>5aw</code>: add 5 words(including punctuations)</li><li><code>5aW</code>: add 5 words(just words)</li></ul></li></ul><h2 id="Chapter-11-Multi-Windows"><a href="#Chapter-11-Multi-Windows" class="headerlink" title="Chapter 11: Multi Windows"></a>Chapter 11: Multi Windows</h2><h3 id="CREATE-NEW-WINDOW"><a href="#CREATE-NEW-WINDOW" class="headerlink" title="CREATE NEW WINDOW"></a>CREATE NEW WINDOW</h3><ul><li>in command line<ul><li><code>vim -o file1 file2</code></li><li><code>vim -o3 file1 file2</code>: open 3 windows in total</li></ul></li><li>in ex mode<ul><li><code>vsplit</code>: split windows vertically</li><li><code>split file2</code>: open file2 in another window horizontally</li><li><code>[n]split file2</code>: display n lines of file2 horizontally. </li><li>`  if no file is specified, display another window in the same content of present window. New window will cut the screen evenly if no [n] is specified. </li><li><code>^WS</code>: same as split </li><li><code>[n]new</code>: new window, creat a new file. </li><li><code>[n]vnew</code>: open a vertical window.<h3 id="MOVE-CURSOR"><a href="#MOVE-CURSOR" class="headerlink" title="MOVE CURSOR"></a>MOVE CURSOR</h3></li></ul></li><li><code>^W+h/j/k/l</code>: move cursor between windows, in the direction of h/j/k/l</li><li><code>+t</code>: move to upper left corner.</li><li><code>+b</code>: move to buttom right corner.</li><li><code>+p</code>: move to last visited window.</li><li><code>+w</code>: move to window below or to the right.(will circle back)</li><li>`MOVE WINDOW<ul><li><code>^W+r</code>: Rotate the window below or to the right.</li><li><code>+R</code>: Rotate the window in the opposite way.</li><li><code>+x</code>: exchange position with ajacent window.</li><li><code>3^W+x</code>: exchange position with 3rd window below it.</li><li><code>+H/J/K/L</code>: move window to the left/bottom/top/right side of the screen.</li><li><code>+T</code>: move window to the new page.</li></ul></li><li>RESIZE WINDOW<ul><li><code>^W+=</code>: justfy windows to the same size.</li><li><code>+-</code>: cut one line of present window.</li><li><code>++</code>: add one line to present windwo.</li><li><code>+&gt;</code>: cut one column.</li><li><code>+&lt;</code>: add one column.</li><li><code>:resize +n</code>: add n lines to present window.</li><li><code>:resize n</code>: set width of present window to n lines.</li><li><code>:vertical resize n</code>: set column number.</li></ul></li><li>NEW TAB<ul><li><code>:tabnew filename</code>: open new file in a new tab.</li><li><code>:tabclose</code>: close present tab.</li><li><code>:tabonly</code>: close all but this tab.</li></ul></li><li>QUIT TAB<ul><li><code>^W+q</code>: If ‘hidden’ is set and this window is the last one, window will be closed while buffer is saved. If ‘hidden’ not set or unsaved changes remain in buffer, no change will be make.</li><li><code>+c</code>: Close present window.</li><li><code>+o</code>: Close all but this.</li><li><code>:only</code>: Close all but this. </li><li><code>:close</code>: Close present window.</li><li><code>:quit</code>: Leave the file while keeping the buffer.</li></ul></li></ul><h2 id="Chapter-12-Vim-Script"><a href="#Chapter-12-Vim-Script" class="headerlink" title="Chapter 12: Vim Script"></a>Chapter 12: Vim Script</h2><ul><li>Edit <code>.vimrc</code>/<code>.gvimrc</code>/<code>_gvimrc</code></li></ul><h2 id="Chapter-13-Other-Usage"><a href="#Chapter-13-Other-Usage" class="headerlink" title="Chapter 13: Other Usage"></a>Chapter 13: Other Usage</h2><ul><li>FOLD<ul><li><code>zA</code>: Recursively switch the folding state. </li><li><code>zC</code>: Recursively close folds.</li><li><code>zD</code>: Recursively delete folds.</li><li><code>zE</code>: Remove all folds.</li><li><code>zf</code>: Fold starts from present cursor position to next position.</li><li><code>[n]zf</code>: Fold n lines.</li><li><code>zM</code>: Set foldlevel to 0.</li><li><code>zN</code>: Set foldenable.</li><li><code>zn</code>: Reset foldenable.</li><li><code>zi</code>: Switch value of foldenable.</li><li><code>zo</code>: Recursively onpen folds.</li><li><code>za</code>: Switch status of a fold.</li><li><code>zd</code>: Delete a fold.</li><li><code>zj</code>: Move cursor to the begining of next fold.</li><li><code>zk</code>: Move cursor to the end of last fold.</li><li><code>zr</code>: Increment value of fold level.</li><li><code>zm</code>: Decrement value of fold level.</li><li><code>:mkview</code>,<code>:loadview</code>: Save all folds.</li></ul></li><li>examples`:<ul><li><code>3zF</code>: Fold 3 lines, including present line.</li><li><code>3zfj</code>: Fold present line and 3 lines below.</li><li>Firstly move cursor to <code>{</code> or <code>}</code>, then type <code>zf%</code>, will fold a code block. because <code>%</code> is used to move between pairs of brackets.</li><li><code>Fold from &#39;FOLD&#39; to &#39;examples&#39;</code>: move cursor to FOLD, type <code>zf/examples[enter]</code>. Everything do to the folded line will change all lines folded.</li><li><code>:set foldmethod=indent</code>: Fold based on indents.</li><li><code>:set foldlevel=0</code>: Only view zero level of fold.</li><li><code>:set foldmethod=syntax</code>: Fold based on syntax.</li></ul></li><li>INDENT<ul><li><code>:set ..indent</code></li><li><code>autoindent</code></li><li><code>cindent</code>: for c language.</li><li><code>smartindent</code></li></ul></li><li>COMPLETE KEY WORDS<ul><li><code>^x</code>: Complete words.</li><li><code>^x^f</code>: Complete filename.</li><li><code>^x^n</code>: Find among candidates. (after that)^n`: Next completion choice. </li><li><code>^p</code>: Previous choice.</li><li><code>^x^l</code>: Complete line.</li><li><code>^x^i</code>: Find keywords in present file and included files.</li><li><code>^x^s</code>: Give a candidate list of available words. Need to switch on spelling check. `:set spell.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-23-unable to autodetect email address解决方法</title>
      <link href="/2019/12/03/Git/2019-11-23-unable%20to%20autodetect%20email%20address%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2019/12/03/Git/2019-11-23-unable%20to%20autodetect%20email%20address%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="unable-to-auto-detect-email-address解决方法"><a href="#unable-to-auto-detect-email-address解决方法" class="headerlink" title="unable to auto-detect email address解决方法"></a>unable to auto-detect email address解决方法</h1><p> git pull 失败 ,提示：<code>fatal: refusing to merge unrelated histories</code> </p><p> 使用</p><pre><code>git pull origin master --allow-unrelated-histories </code></pre><p>然后git提示<code>unable to auto-detect email address</code>,</p><ul><li><p>在<code>.git</code>文件夹下, <code>vi config</code></p></li><li><p>在最前面加上</p><pre><code>[user]email=your emailname=your name</code></pre></li><li><p>不需要单引号</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-23-github_desktop的gui界面简单操作</title>
      <link href="/2019/12/03/Git/2019-11-23-github_desktop%E7%9A%84gui%E7%95%8C%E9%9D%A2%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/12/03/Git/2019-11-23-github_desktop%E7%9A%84gui%E7%95%8C%E9%9D%A2%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>#github desktop的gui界面简单操作</p><p>github在PC平台推出了这款应用<img src="/2019/12/03/Git/2019-11-23-github_desktop%E7%9A%84gui%E7%95%8C%E9%9D%A2%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/1574471105559.png" alt="1574471105559"></p><p>极大地简化了使用git的操作,现在以一次日常操作为例讲解其使用方法</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://desktop.github.com/" target="_blank" rel="noopener">安装连接</a></p><p>​    下载完一路默认</p><h2 id="添加本地仓库"><a href="#添加本地仓库" class="headerlink" title="添加本地仓库"></a>添加本地仓库</h2><p>比如我刚刚<del>从刘锦的博客把所有代码剽窃了</del>,<img src="/2019/12/03/Git/2019-11-23-github_desktop%E7%9A%84gui%E7%95%8C%E9%9D%A2%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/1574472839733.png" alt="1574472839733"></p><p>现在准备放到自己的博客网站.当前工作目录如下</p><p><img src="/2019/12/03/Git/2019-11-23-github_desktop%E7%9A%84gui%E7%95%8C%E9%9D%A2%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/1574472951010.png" alt="1574472951010"></p><p><img src="/2019/12/03/Git/2019-11-23-github_desktop%E7%9A%84gui%E7%95%8C%E9%9D%A2%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/1574473125827.png" alt="1574473125827"></p><p><img src="/2019/12/03/Git/2019-11-23-github_desktop%E7%9A%84gui%E7%95%8C%E9%9D%A2%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/1574473163626.png" alt="1574473163626"></p><p>添加后发现我刚才因为抄了一大堆代码产生的更改</p><p><img src="/2019/12/03/Git/2019-11-23-github_desktop%E7%9A%84gui%E7%95%8C%E9%9D%A2%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/1574473219593.png" alt="1574473219593"></p><h2 id="本地同步远程"><a href="#本地同步远程" class="headerlink" title="本地同步远程"></a>本地同步远程</h2><p>直接提交</p><p><img src="/2019/12/03/Git/2019-11-23-github_desktop%E7%9A%84gui%E7%95%8C%E9%9D%A2%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/1574473383934.png" alt="1574473383934"></p><p>然后一键同步</p><p><img src="/2019/12/03/Git/2019-11-23-github_desktop%E7%9A%84gui%E7%95%8C%E9%9D%A2%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/1574473671656.png" alt="1574473671656"></p><p>可以看到完全同步</p><p><a href="https://tianyilt.github.io/MyBlog/" target="_blank" rel="noopener">剽窃的地址</a></p><h3 id="切换远程仓库位置"><a href="#切换远程仓库位置" class="headerlink" title="切换远程仓库位置"></a>切换远程仓库位置</h3><p>如果使用的是fork的仓库,可以在gui设置远程</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-10-在github端fork远程同步</title>
      <link href="/2019/12/03/Git/2019-11-10-%E5%9C%A8github%E7%AB%AFfork%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
      <url>/2019/12/03/Git/2019-11-10-%E5%9C%A8github%E7%AB%AFfork%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="在github端fork远程同步"><a href="#在github端fork远程同步" class="headerlink" title="在github端fork远程同步"></a>在github端fork远程同步</h1><p>现在我们已经fork别人的一个远程仓库，经过一段时间，原仓库进行了一端更新，我们需要与远程的原仓库同步。</p><p>进入自己fork仓库的pull request</p><p><img src="/2019/12/03/Git/2019-11-10-%E5%9C%A8github%E7%AB%AFfork%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5/1573359731289.png" alt="1573359731289"></p><p><img src="/2019/12/03/Git/2019-11-10-%E5%9C%A8github%E7%AB%AFfork%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5/1573359783354.png" alt="1573359783354"></p><p>可以发现目前默认是从自己仓库同步到原仓库，需要交换标签顺序，首先把发起栏目改成原仓库</p><p><img src="/2019/12/03/Git/2019-11-10-%E5%9C%A8github%E7%AB%AFfork%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5/1573359832906.png" alt="1573359832906"></p><p>可是会出现这个页面</p><p><img src="/2019/12/03/Git/2019-11-10-%E5%9C%A8github%E7%AB%AFfork%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5/1573359891243.png" alt="1573359891243"></p><p>点击</p><p> compare across forks</p><p><img src="/2019/12/03/Git/2019-11-10-%E5%9C%A8github%E7%AB%AFfork%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5/1573359938161.png" alt="1573359938161"></p><p>再把目标仓库换成自己fork仓库</p><p><img src="/2019/12/03/Git/2019-11-10-%E5%9C%A8github%E7%AB%AFfork%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5/1573359959587.png" alt="1573359959587"></p><p>可以从这里看到自己更新的内容</p><p>点击<img src="/2019/12/03/Git/2019-11-10-%E5%9C%A8github%E7%AB%AFfork%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5/1573359982645.png" alt="1573359982645"></p><p><img src="/2019/12/03/Git/2019-11-10-%E5%9C%A8github%E7%AB%AFfork%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5/1573360028978.png" alt="1573360028978"></p><p><img src="/2019/12/03/Git/2019-11-10-%E5%9C%A8github%E7%AB%AFfork%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5/1573360054850.png" alt="1573360054850"></p><p>自此，完成合并</p><p>从自己pull request到原仓库方法一样</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-10-27-使用guiscrcpy投屏</title>
      <link href="/2019/12/03/Git/2019-10-27-%E4%BD%BF%E7%94%A8guiscrcpy%E6%8A%95%E5%B1%8F/"/>
      <url>/2019/12/03/Git/2019-10-27-%E4%BD%BF%E7%94%A8guiscrcpy%E6%8A%95%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="使用guiscrcpy投屏"><a href="#使用guiscrcpy投屏" class="headerlink" title="使用guiscrcpy投屏"></a>使用guiscrcpy投屏</h1><p><a href="https://github.com/srevinsaju/guiscrcpy#Installation" target="_blank" rel="noopener">github项目地址</a></p><p>对于Windows平台: </p><ul><li><p><a href="https://github.com/srevinsaju/guiscrcpy/releases/download/1.10/guiscrcpy-1.10-27082019-windows.exe" target="_blank" rel="noopener">下载安装包</a>(不要使用pip下载)</p></li><li><p>安装到<code>c:/program files(x86)</code></p></li><li><p>找到<code>guiscrcpy</code>文件夹, 把它添加到PATH</p></li><li><p>安装adb</p><ul><li><p>从<a href="https://developer.android.google.cn/studio/releases/platform-tools?hl=zh_cn" target="_blank" rel="noopener">这个网站</a>下载一个压缩包</p><p><img src="/2019/12/03/Git/2019-10-27-%E4%BD%BF%E7%94%A8guiscrcpy%E6%8A%95%E5%B1%8F/1572136841226.png" alt="1572136841226"></p></li><li><p>解压会看到一个叫<code>platform-tools</code>的文件夹, 放到到C盘根目录</p></li><li><p>添加这个文件夹到PATH变量</p></li><li><p>在cmd中输入adb, 如果看到一大堆输出, 表示已经安装成功</p></li></ul></li><li><p>将手机USB调试打开(直接在设置里搜索USB, 一般在开发者选项里面) , 把手机用数据线连接到电脑</p></li><li><p>查看手机的ip地址(手机要和电脑放在同一个局域网内)</p><ul><li>设置-关于手机-状态-ip地址</li></ul></li><li><p>在命令行使用adb连接手机</p><ul><li><code>adb tcpip 5555 \\开启5555端口用于adb连接</code></li><li><code>adb connect DEVICE_IP:5555 \\此时可以断开数据线连接</code></li></ul></li><li><p>把命令行切换到<code>c:/program files(x86)/guiscrcpy</code>, 输入<code>guiscrcpy</code>, 即可运行.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-08-30-和fork来的仓库同步</title>
      <link href="/2019/12/03/Git/2019-08-30-%E5%92%8Cfork%E6%9D%A5%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5/"/>
      <url>/2019/12/03/Git/2019-08-30-%E5%92%8Cfork%E6%9D%A5%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="和fork来的仓库同步"><a href="#和fork来的仓库同步" class="headerlink" title="和fork来的仓库同步"></a>和fork来的仓库同步</h1><p>git将fork的仓库名称记为<code>upstream</code>, 因此同步就和远程仓库一样.</p><p>同步远程仓库时, 使用</p><pre><code>$ git pull origin</code></pre><p>同步fork的原仓库, 使用</p><pre><code>$ git pull upstream master</code></pre><p>然后推送到远程</p><pre><code>$ git push origin master</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-08-25-git基础命令</title>
      <link href="/2019/12/03/Git/2019-08-25-git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/12/03/Git/2019-08-25-git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="git基础命令"><a href="#git基础命令" class="headerlink" title="git基础命令"></a>git基础命令</h1><h2 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h2><ul><li><code>git  init</code> 初始化  </li><li><code>git  status</code>  </li></ul><h2 id="提交和日志"><a href="#提交和日志" class="headerlink" title="提交和日志"></a>提交和日志</h2><ul><li><code>git  add</code>  </li><li><code>git  commit -m &#39;write something to explain the changes&#39;</code>  </li><li><code>git  log --pretty=oneline</code>  </li><li><code>git  log --graph --pretty=oneline --abbrev-commit</code> 可视化  </li></ul><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><ul><li><code>git  reset --hard HEAD^</code>  </li><li><code>git  reset --hard version_id</code>  </li><li><code>git  checkout -- &lt;filename&gt;</code> 丢弃工作区的修改，退回到版本库（或暂存区）最新版本  </li><li><code>git  reset HEAD &lt;filename&gt;</code> 撤销暂存区的修改，重新放回工作区<br><code>rm &lt;filename&gt;</code> 从系统删除文件  </li><li><code>git  rm &lt;filename&gt;</code> 从版本库删除文件。删除之后要git commit -m提交  </li></ul><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>github git仓库托管服务  </p><ul><li><code>git  remote</code> 查看远程库信息  </li><li><code>git  remote -v</code> 查看远程库详细信息  </li><li><code>git  remote add origin https://github.com/LiuJin3042/learngit.git</code> 关联远程库，默认名称origin  </li><li><code>git  remote add &lt;repo_name&gt; https://github.com/LiuJin3042/learngit.git</code> 关联远程库，用任意名称  </li><li><code>git  push -u origin master</code> 将本地分支master上传到远程库origin，-u参数关联master分支  </li><li><code>git  push origin master(dev)</code> 将本地分支master(dev)的修改推送到github。没有联网也可以工作  </li><li><code>git  clone https://...</code> 复制远程库到本地，复制后只能看到master分支  </li><li><code>git  pull</code> 必须先将远程库同步到本地，解决冲突后本地才可以push到远程  </li></ul><h2 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h2><ul><li><code>git  branch --set-upstream-to=origin/dev dev</code> 将本地的dev和远程的dev链接起来  </li><li><code>git  checkout -b branch-name origin/branch-name</code> 本地创建和远程分支对应的分支，分支名称最好一致  </li><li><code>git  checkout -b dev</code> 创建dev分支，切换到dev分支（相当于下面两条指令）  <ul><li><code>git branch dev</code>  </li><li><code>git checkout dev</code>  </li></ul></li><li><code>git  branch</code> 查看分支  </li><li><code>git  merge dev</code> 合并指定分支到当前分支  </li><li><code>git  branch -d dev</code> 删除dev  </li><li><code>git  merge --no-ff -m &quot;merge with no-ff&quot; dev</code> 禁用fast forward  </li></ul><h2 id="上传大文件"><a href="#上传大文件" class="headerlink" title="上传大文件"></a>上传大文件</h2><p>超过100M的大文件需要使用git-lfs上传. 但是git-lfs对库的容量有要求, 库超过1G大就要购买额外空间.</p><ul><li>在<a href="git-lfs.github.com">此网站</a>下载git-lfs并安装(Windows系统)</li><li>在<code>git bash</code>中输入<code>git lfs install</code></li><li>在库中输入<code>git lfs track &quot;*.pdf&quot;</code>, 以后pdf文件都是用git-lfs上传</li></ul><h2 id="暂存状态"><a href="#暂存状态" class="headerlink" title="暂存状态"></a>暂存状态</h2><ul><li><code>git  stash</code>清空工作区，将当前工作放到栈里  </li><li><code>git  stash list</code> 查看栈  </li><li><code>git  stash pop</code> 恢复栈，清空内容。  </li><li><code>git  stash app</code>  </li></ul><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul><li><code>git  tag</code> 查看所有标签  </li><li><code>git  tag v0.9 f52c633</code> 在id为f52c633的commit上打一个标签，标签名是v0.9  </li><li><code>git  show &lt;tagname&gt;</code> 查看标签信息  </li><li><code>git  tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb</code> -a添加标签名称，-m添加备注  </li><li><code>git  tag -d &lt;tagname&gt;</code>  </li><li><code>git  push origin &lt;tagname&gt;</code> 将本地的标签推到远程  </li><li><code>git  push origin --tags</code> 推送所有标签  </li><li><code>git  push origin :refs/tags/v0.9</code> 删除远程标签，要先删除本地的标签，然后用这句话  </li></ul><h2 id="杂项配置"><a href="#杂项配置" class="headerlink" title="杂项配置"></a>杂项配置</h2><ul><li><code>git  config --global color.ui true</code> 命令显示颜色  </li></ul><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>编写 .gitignore 文件<br>.gitignore 需要提交到库里，并对文件做版本管理  </p><ul><li><code>git  add -f App.class</code> 强制添加被忽略的文件  </li><li><code>git  check-ignore -v App.class</code>  </li></ul><h2 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h2><ul><li><code>git  config --global alias.st status</code> 用st代替status命令。–global是全局参数，表示本电脑所有git库都可以使用  </li></ul><h2 id="配置git服务器"><a href="#配置git服务器" class="headerlink" title="配置git服务器"></a>配置git服务器</h2><ul><li>推荐linux系统<br><code>sudo apt-get install git</code><br><code>sudo adduser git</code>  </li><li>把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个  </li><li>先选定一个目录作为Git仓库，假定<code>是/srv/sample.git</code>，在/srv目录下输入命令：<br><code>sudo git init --bare sample.git</code>  </li><li>把owner改为git: <code>sudo chown -R git:git sample.git</code>  </li><li>禁用shell登录sudo chown -R git:git sample.git改为git: <code>x:1001:1001:...:/home/git:/usr/bin/git-shell</code>  </li><li><code>git  clone git@server:/srv/sample.git</code>  </li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-08-26-Echarts安装和使用</title>
      <link href="/2019/12/03/Echarts/2019-08-26-Echarts%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/03/Echarts/2019-08-26-Echarts%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Echarts安装和使用"><a href="#Echarts安装和使用" class="headerlink" title="Echarts安装和使用"></a>Echarts安装和使用</h1><ol><li><p>从<a href="https://github.com/apache/incubator-echarts/tree/4.2.1" target="_blank" rel="noopener">官方github页面</a>下载完整的zip安装包.  </p><img src="/2019/12/03/Echarts/2019-08-26-Echarts%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/001.bmp" width="100%"></li><li><p>解压安装包到任意路径[^1]下, 我这里放到了C盘的根目录.  </p><img src="/2019/12/03/Echarts/2019-08-26-Echarts%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/002.png" width="100%">[^1]: 考虑到引用的方便, 最好放在根目录下. </li><li><p>在目录中找到<code>./dist/echarts.js</code>, 记住这个文件的绝对路径, 可以使用win10的复制路径功能. 我这里是<code>&#39;C:\incubator-echarts\dist\echarts.js&#39;</code>.</p><img src="/2019/12/03/Echarts/2019-08-26-Echarts%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/003.png" width="100%"></li><li><p>新建一个html文件, 用记事本(或其他编辑器)写入以下的html代码(来自官方的示例网站).<br>注意将其中的<code>&lt;script src=&#39;C:\incubator-echarts\dist\echarts.js&#39;&gt;&lt;/script&gt;</code>改为自己的路径.</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&#39;utf-8&#39;&gt; &lt;title&gt;ECharts&lt;/title&gt; &lt;!-- 引入 echarts.js --&gt; &lt;script src=&#39;C:\incubator-echarts\dist\echarts.js&#39;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt; &lt;div id=&#39;main&#39; style=&#39;width: 600px;height:400px;&#39;&gt;&lt;/div&gt; &lt;script type=&#39;text/javascript&#39;&gt;     // 基于准备好的dom，初始化echarts实例     var myChart = echarts.init(document.getElementById(&#39;main&#39;));     // 指定图表的配置项和数据     var option = {         title: {             text: &#39;ECharts 入门示例&#39;         },         tooltip: {},         legend: {             data:[&#39;销量&#39;]         },         xAxis: {             data: [&#39;衬衫&#39;,&#39;羊毛衫&#39;,&#39;雪纺衫&#39;,&#39;裤子&#39;,&#39;高跟鞋&#39;,&#39;袜子&#39;]         },         yAxis: {},         series: [{             name: &#39;销量&#39;,             type: &#39;bar&#39;,             data: [5, 20, 36, 10, 10, 20]         }]     };     // 使用刚指定的配置项和数据显示图表。     myChart.setOption(option); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li><li><p>保存退出编辑, 使用浏览器打开html, 就能看到绘出的图片.  </p><img src="/2019/12/03/Echarts/2019-08-26-Echarts%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/004.png" width="100%"></li><li><p>官方的<a href="https://www.echartsjs.com/examples/#chart-type-line" target="_blank" rel="noopener">示例网站</a>提供了大量的漂亮示例和源代码, 经过适当修改就能画出我们需要的图片, 非常有用.  </p><img src="/2019/12/03/Echarts/2019-08-26-Echarts%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/005.bmp" width="100%"><img src="/2019/12/03/Echarts/2019-08-26-Echarts%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/006.bmp" width="100%"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Echarts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-08-30-上海堡垒的细节(槽点)</title>
      <link href="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/"/>
      <url>/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/</url>
      
        <content type="html"><![CDATA[<h2 id="categories-影评"><a href="#categories-影评" class="headerlink" title="categories: 影评"></a>categories: 影评</h2><h1 id="上海堡垒的细节-槽点"><a href="#上海堡垒的细节-槽点" class="headerlink" title="上海堡垒的细节(槽点)"></a>上海堡垒的细节(槽点)</h1><p>上海堡垒自从上映后在网络上争议不断，很让我好奇这部中国科幻元年上映的第二部科幻片究竟烂到什么地步。今天，上海堡垒上线爱奇艺网站，而我作为尊贵的会员，第一时间抱着批判的态度观赏了本片。以下的细节(槽点)，你注意到了吗？</p><ol start="2"><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567152373981.png" alt="1567152373981"></p><p>我仙藤不配拥有英文名，居然只能用拼音。还有这Chinese是从哪冒出来的。</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567152795465.png" alt="1567152795465"></p><p>电影中是defend the station（还是state？听不清）, 字幕是country</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567153485321.png" alt="1567153485321"></p><p>这个街机室(VR训练室)有必要这么大吗？上海的房价啊</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567153598044.png" alt="1567153598044"></p><p>椰树牌海报.我就不放流浪地球的征兵广告了。</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567153688020.png" alt="1567153688020"></p><p>求帽子的仰角。说实话lh的表演不算差，只是扮相不像一个军人。</p></li><li><p>这一幕特效过渡不自然，第一幕：花瓶黑化=&gt;屏幕黑掉</p><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567153936861.png" alt="1567153936861"></p><p>=&gt;屏幕亮起=&gt;第二幕：泡防御</p><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567153980085.png" alt="1567153980085"></p><p>这两者有衔接关系吗</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567154168943.png" alt="1567154168943"></p><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567154179393.png" alt="1567154179393"></p><p>韩国: 这是中国的雾霾, 西北风把它吹了过来.</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567154423244.png" alt="1567154423244">)<img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567154357235.png" alt="1567154357235">这会议室, 这指挥室, 我怀疑你们搞腐败。对了，这个指挥室好像负责所有无人机无人车的操纵，这得是单身多少年的手速。</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567154612016.png" alt="1567154612016">独立日同款攻击方式</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567154906753.png" alt="1567154906753"></p><p>996， icu嘛</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567156399233.png" alt="1567156399233"></p><p>前面一堆步兵用枪打不死的野怪这个火炮两下就干掉了，那还要啥步兵，不应该火炮满街跑吗？然鹅，这是片中的火炮少之又少。</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567157204698.png" alt="1567157204698"></p><p>友军和外星人还在巷战，无人机来了个无差别轰炸？</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567158001405.png" alt="1567158001405"></p><p>庆功宴上的人比战场上的人还多呢</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567158549784.png" alt="1567158549784"></p><p>由于都去参与庆功宴的所以人口不足，两位指挥官干起了后勤的工作。</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567159644667.png" alt="1567159644667"></p><p>建议使用linux系统，这样外星人撤销泡防御还要输入管理员密码。</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567159976811.png" alt="1567159976811"><br><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567159852465.png" alt="1567159852465">外星人在一台服务器上撤销了泡防御，我方不惜自毁服务器，备用服务器启动，泡防御正常。可是正常的故障转移集群不应该是：一台服务器被摧毁，备用服务器启动，继续撤销泡防御？</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567160433618.png" alt="1567160433618"></p><p>上海不是最后的堡垒吗，撤退到哪？</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567160813074.png" alt="1567160813074"></p><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567160822056.png" alt="1567160822056"></p><p>上海市的安危寄托在灰鹰小队三个人身上</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567161272401.png" alt="1567161272401">光明敞亮的指挥部，果然被一锅端了。</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567161346159.png" alt="1567161346159">还是想不通，为什么要给士兵配发打不死外星人的枪呢？</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567161831558.png" alt="1567161831558"></p><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567161842589.png" alt="1567161842589"></p><p>合着有这么厉害的手雷，干嘛不早点用，要同归于尽时候用？</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567162477498.png" alt="1567162477498"></p><p>我。。。</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567162510351.png" alt="1567162510351"></p><p>本来以为上海陆沉是个大场面，没想到一阵烟把建筑全覆盖了，接着就五年后，上海重建了，和原来一摸一样。。。可不是一模一样吗，特效画新建筑得多费劲啊</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567162685821.png" alt="1567162685821"></p><p>又活了？</p></li><li><p><img src="/2019/12/03/%E5%BD%B1%E8%AF%84/2019-08-30-%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92%E7%9A%84%E7%BB%86%E8%8A%82(%E6%A7%BD%E7%82%B9)/1567164290420.png" alt="1567164290420"></p><p>掌纹解锁遗物盒，你值得拥有。</p></li><li><p>总体感觉：可能是被网上喷得太多了吧，内心已经建好了防线，看下来居然感觉比预期要高一点。这部电影难道没有优点吗？特效好歹做了飞船和外星人，动作戏还很多。但是这部电影缺点很全面：该上大场面就用烟糊弄；主演扮相出戏；感情戏不应该出现；没有统一的世界观设定……如果这些缺点全都无视掉，那和全程闭眼也没有区别。流量明星不是原罪，错在该做到位的全没到位。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo图片不显示解决方法</title>
      <link href="/2019/12/03/hexo/hexo%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2019/12/03/hexo/hexo%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<hr><p>测试图片</p><img src="/2019/12/03/hexo/hexo%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20191203133639628.png" alt="image-20191203133639628" style="zoom:50%;"><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><p>下载最新版的typora, 在偏好设置中如下设置</p><p><img src="/2019/12/03/hexo/hexo%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20191203133817604.png" alt="image-20191203133817604"></p><p>这样就会图片就会自动保存在同名文件夹里. 用typora编辑所有md文档.</p></li><li><p>找到<code>Hexo</code>下的<code>_config.yml</code>里的<code>post_asset_folder</code>，把这个选项从<code>false</code>改成<code>true</code>. </p></li><li><p><code>npm install https://github.com/7ym0n/hexo-asset-image --save</code>(这是个修改过的插件，经测试无问题)</p></li><li><p>清空缓存并且生成网页</p><pre><code>hexo clhexo g -d</code></pre></li><li><p>打开服务</p><pre><code>hexo server</code></pre></li><li><p>去浏览器<code>localhost:4000</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-28-ch09 IPv4 NAT</title>
      <link href="/2019/11/28/CCNA-2/2019-11-28-ch09%20IPv4%20NAT/"/>
      <url>/2019/11/28/CCNA-2/2019-11-28-ch09%20IPv4%20NAT/</url>
      
        <content type="html"><![CDATA[<h1 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h1><p>公有IPv4地址有限, 为了节省地址发明. 内网流量传到外网, 通过路由器包装, 路由器会把NAT地址池中的一个地址拿来替换内网地址. 这样外网看来是一个公有地址在通讯. </p><h2 id="NAT-操作"><a href="#NAT-操作" class="headerlink" title="NAT 操作"></a>NAT 操作</h2><p>NAT有这些术语</p><ul><li>内部地址: 经过NAT转换设备的地址</li><li>外部地址: 目标设备的地址</li><li>本地地址: 内网出现的地址</li><li>全局地址: 出现在外网</li></ul><p>推广</p><ul><li>内部本地: 内网出现的要被转换的地址</li><li>内部全局: 内网地址转换后的地址</li><li>外部本地: 目标设备的地址在内网的样子(不变)</li><li>外部全局: 目标设备的地址在外网的样子(==外部本地)</li></ul><h3 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h3><ul><li>内部主机使用内部本地地址发送一个数据包</li><li>NAT路由器接到数据包</li><li>NAT路由器吧数据包的内部本地地址替换为内部全局地址</li><li>发往外部全局地址</li><li>收到回信</li><li>把内部全局地址按照映射表转换为内部本地地址</li><li>发送回去</li></ul><h3 id="NAT类型"><a href="#NAT类型" class="headerlink" title="NAT类型"></a>NAT类型</h3><ul><li><p>静态NAT: 本地地址-全局地址, 一对一映射, 永久的, 除非手动更改.</p></li><li><p>动态NAT: 多对多. 100内部, 10个全局, 可以按需转换. 如果NAT池耗尽, 其他的接入就要等待</p><p>静态/动态NAT工作流程</p><ul><li>发起会话</li><li>路由器的一个端口上接收到数据包, 如果应用了NAT, 就检查数据包的内部地址, 如果满足条件, 就进行转换</li><li>收到数据包时根据记录的映射进行转换</li></ul></li><li><p>端口地址转换PAT: 多对一. 根据端口转发. 重复次数高达65536次</p><p>一般来说只有一个内部全局地址.</p><p>通信流程</p><ul><li>发起TCP/IP会话</li><li>生成一个 TCP 或 UDP 源端口值或专门为 ICMP 分配的查询 ID来标记会话</li><li>用端口号确定转发</li></ul><p>如果源端口别占用, 会从相应端口组( 0–511、512–1023 或 1024–65535 )分配第一个可用的端口号. <strong>新的端口号是对于内部全局地址而言的, 内部本地地址不必更改端口号</strong>. 收到数据包的时候, 会根据映射表把端口号和ip都进行转换.</p></li></ul><h3 id="NAT优势"><a href="#NAT优势" class="headerlink" title="NAT优势"></a>NAT优势</h3><ul><li>节省地址</li><li>增强连接公网的灵活性, 可以实施多池/备用池/负载均衡池</li><li>更改公共IPv4地址不必对本地地址重新编址, 为内部网络编址方案提供了一致性 </li><li>隐藏内部地址</li></ul><h3 id="NAT缺陷"><a href="#NAT缺陷" class="headerlink" title="NAT缺陷"></a>NAT缺陷</h3><ul><li><p>转发延迟</p></li><li><p>端到端编址的丢失, 与目的IPv4地址有关的协议将不可用. 例如数字签名</p></li><li><p>端到端IPv4可追溯性缺失, 排除故障困难</p></li><li><p>隧道协议复杂. IPsec不可用</p></li><li><p>外网发起的TCP链接的一些服务或无状态协议可能中断</p></li></ul><h2 id="配置NAT"><a href="#配置NAT" class="headerlink" title="配置NAT"></a>配置NAT</h2><h3 id="静态NAT"><a href="#静态NAT" class="headerlink" title="静态NAT"></a>静态NAT</h3><p>配置 192.168.10.254 映射到 209.165.201.5 </p><pre><code>(config)ip nat inside source static 192.168.10.254 209.168.201.5 // 静态nat映射interface s0/0/0(config-if)ip addr 192.168.1.2 255.255.255.252 // 分配端口ipip nat inside // 配置为nat内部接口exit(config)inter s0/1/0(config-if)ip addr 209.165.200.1 255.255.255.252ip nat outside</code></pre><p>验证NAT</p><pre><code>clear ip nat statistics // 先清空NAT统计信息show ip nat translations // 清空后是没有转换的, 如果一段时间后看到了转换, 说明NAT成功建立</code></pre><h3 id="动态NAT"><a href="#动态NAT" class="headerlink" title="动态NAT"></a>动态NAT</h3><pre><code>(config)ip nat pool NAT-POOL-NAME 209.168.200.226 209.168.200.240 netmask 255.255.255.224 // 地址池access-list 1 permit 192.168.0.0 0.0.255.255 // 建立ACL 1ip nat inside source list 1 pool NAT-POOL-NAME // 把 nat pool 和 ACL 1 绑定inter s0/0/0(config-if)ip nat insideinter s0/1/0ip nat outside</code></pre><p>验证NAT</p><pre><code>(en)show ip nat translations verbose // 加上verbose查看详细信息, 包括过期时间ip nat translation timeout timeout-seconds // 设定过期时间(默认1天)clear ip nat translation inside [内部全局ip] [内部本地ip] {可选: global [外部本地ip] [外部全局ip]} // 清除一个动态转换条目clear ip nat translation protocol inside [内部全局ip] [内部全局port] [内部本地ip] [内部本地port] {可选: global [外部本地ip] [外部本地port] [外部全局ip] [外部全局port]} // 清楚一个PATclear ip nat translation * // 加上*清楚所有动态条目</code></pre><h3 id="PAT"><a href="#PAT" class="headerlink" title="PAT"></a>PAT</h3><p>PAT可以是地址池可以是一个地址</p><pre><code>ip nat pool POOL-1 209.168.200.226 209.165.200.240 netmask 255.255.255.224access-list 1 permit 192.168.0.0 0.0.255.255 // 建立ACL 1ip nat inside source list 1 pool POOL-1 overload // 注意关键词overloadinter s0/0/0(config-if)ip nat insideinter s0/1/0ip nat outside</code></pre><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>为了在点对点传输中, 让外部客户机访问内网的服务器, 用端口转发, 把特定请求转发到内部的特定端口.</p><p>例如: </p><p>外部用户想访问内网的web服务器</p><ul><li>外部用户向80端口发送请求</li><li>路由器接收到80端口的请求, 把它转发到内部的192.168.1.100:8080主机</li><li>内部主机接受请求并且应答</li></ul><p>配置</p><pre><code>ip nat inside source static tcp 192.168.10.254 80 209.165.200.225 8080inter s0/0/0ip nat insideinter s0/1/0ip nat outside</code></pre><h3 id="NAT和IPv6"><a href="#NAT和IPv6" class="headerlink" title="NAT和IPv6"></a>NAT和IPv6</h3><p>IPv6唯一本地地址(ULA), 为本地站点的通信提供IPv6地址空间, <strong>前缀FC00::/7</strong>, 第8位是0或1, 如果前缀是本地分配的, 第8位就是1. 这样前缀就是<strong>FD00/8</strong></p><p>![image-20191129093417161](2019-11-28-ch09 IPv4 NAT/image-20191129093417161.png)</p><ul><li>允许站点合并, 私下互联</li><li>独立于ISP, 不可进行互联网链接</li><li>不可同通过互联网路由</li></ul><p>IPv6的NAT用来提供仅支持IPv6和仅支持IPv4的网络之间的访问, 不是地址转换.</p><h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><h3 id="NAT故障排除命令"><a href="#NAT故障排除命令" class="headerlink" title="NAT故障排除命令"></a>NAT故障排除命令</h3><p><strong>步骤 1.</strong>根据配置，清楚地确定应该实现什么样的 NAT。这可能会揭示出配置问题。</p><p><strong>步骤 2.</strong>使用 <strong>show ip nat translations</strong> 命令验证转换表中转换条目是否正确。</p><ul><li><p>如果内外接口弄反了</p><pre><code>inter s0/0/0no ip nat outsideip nat inside</code></pre><p>使用<strong>show access-lists</strong>检查ACL配置</p><pre><code>show access-listsno access-list 1access-list 1 permit ...</code></pre></li></ul><p><strong>步骤 3.</strong>使用 <strong>clear</strong> 和 <strong>debug</strong> 命令验证 NAT 是否如预期一样工作。检查动态条目被清除后，是否又被重新创建出来。</p><pre><code>debug ip nat</code></pre><p>![image-20191129094323010](2019-11-28-ch09 IPv4 NAT/image-20191129094323010.png)</p><p><strong>步骤 4.</strong>详细审查数据包传送情况，确认路由器具有移动数据包所需的正确路由信息。</p>]]></content>
      
      
      <categories>
          
          <category> CCNA-2 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-25-ch03动态路由</title>
      <link href="/2019/11/28/CCNA-2/2019-11-25-ch03%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/"/>
      <url>/2019/11/28/CCNA-2/2019-11-25-ch03%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h1><h2 id="动态路由协议"><a href="#动态路由协议" class="headerlink" title="动态路由协议"></a>动态路由协议</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h4><ul><li>1988, RIPv1</li><li>开放最短路径优先OSPF</li><li>中间系统到中间系统IS-IS</li><li>(思科推出面向大型网络)内部网关路由协议(IGRP), 及其增强型(EIGRP)</li><li>边界网关协议BGP</li></ul><h4 id="动态路由协议-1"><a href="#动态路由协议-1" class="headerlink" title="动态路由协议"></a>动态路由协议</h4><p>动态路由协议用于路由器之间交换路由信息, 作用包括</p><ul><li>发现远程网络</li><li>动态更新路由信息</li><li>确定最佳路径</li><li>当前路径无法使用时找出最佳路径</li></ul><p>组成部分为</p><ul><li>数据结构: 路由表或数据库. 保存在内存中</li><li>路由协议消息: 路由器之间沟通方法. 统一的消息, 找到附近路由, 交换信息, 维护网络</li><li>算法: 确定最佳路径</li></ul><h4 id="静态-动态路由优缺点"><a href="#静态-动态路由优缺点" class="headerlink" title="静态/动态路由优缺点"></a>静态/动态路由优缺点</h4><p>静态优点</p><ul><li>末端网络</li><li>不会增长的小型网络</li><li>访问单一的路由</li></ul><p>静态缺点</p><ul><li>大型网络实施难</li><li>管理耗时</li><li>不会动态更新</li></ul><p>动态优点</p><ul><li>适用于大型网络</li><li>可以自动适应网络拓扑的改变</li></ul><p>动态缺点</p><ul><li>不够安全</li><li>占用资源</li></ul><h2 id="RIPv2"><a href="#RIPv2" class="headerlink" title="RIPv2"></a>RIPv2</h2><p>几乎不使用</p><h4 id="RIPv1"><a href="#RIPv1" class="headerlink" title="RIPv1"></a>RIPv1</h4><ul><li><p>启动/停止</p><pre><code>router rip // 默认运行ripv1no router rip</code></pre></li><li><p>通告直连网络的<strong>有类ip地址</strong>, 通告的接口会开始发送和接受rip更新, 每30s通告网络</p><pre><code>router rip(config-router)network 192.168.1.0network 192.168.2.0</code></pre></li><li><p>查看配置</p><pre><code>show ip protocols</code></pre><p><img src="/2019/11/28/CCNA-2/2019-11-25-ch03%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20191125211615257.png" alt="image-20191125211615257"></p><pre><code>show ip route | begin Gateway</code></pre><p><img src="/2019/11/28/CCNA-2/2019-11-25-ch03%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20191125211713244.png" alt="image-20191125211713244"></p></li></ul><h4 id="RIPv2-1"><a href="#RIPv2-1" class="headerlink" title="RIPv2"></a>RIPv2</h4><ul><li><p>启用</p><pre><code>router rip(config-router)version 2</code></pre></li><li><p>禁用自动汇总. 默认会在主网边界上自动汇总网络. 只有v2才可以禁用</p><pre><code>(config-router)no auto-summary</code></pre></li></ul><h4 id="被动接口"><a href="#被动接口" class="headerlink" title="被动接口"></a>被动接口</h4><p>频繁而不需要的rip信息会造成</p><ul><li>浪费带宽</li><li>设备处理rip信息会耗费资源</li><li>rip被截获, 带来风险.</li></ul><p>配置被动接口, 只允许接口接收更新, 不发出更新. 这个接口的网络可以通过其他接口发出.</p><pre><code>router rippassive-interface g0/0end</code></pre><p>把所有接口设置为默认接口</p><pre><code>passive-interface default</code></pre><p>启用接口</p><pre><code>no passive-interface</code></pre><h4 id="传播默认路由"><a href="#传播默认路由" class="headerlink" title="传播默认路由"></a>传播默认路由</h4><p>一般来说, 一个网络中只有一个接口接到ISP, 想联通互联网的数据都必须走这个接口. 把这个接口设置为默认静态路由, 然后通告.</p><pre><code>(config)ip route 0.0.0.0 0.0.0.0 s0/0/1 209.168.200.226router ripdefault-information originateend</code></pre><h2 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h2><h3 id="IPv4路由表组成部分"><a href="#IPv4路由表组成部分" class="headerlink" title="IPv4路由表组成部分"></a>IPv4路由表组成部分</h3><ul><li><p>本地</p><p><img src="/2019/11/28/CCNA-2/2019-11-25-ch03%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20191125215933298.png" alt="image-20191125215933298"></p></li><li><p>远程</p><p><img src="/2019/11/28/CCNA-2/2019-11-25-ch03%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20191125220229456.png" alt="image-20191125220229456"></p></li></ul><p>路由源(ip的获取方式)中关于远程网络的代号</p><ul><li>S: 静态</li><li>D: EIGRP协议获取</li><li>O: OSPF</li><li>R: RIP</li></ul><h3 id="路由表分级"><a href="#路由表分级" class="headerlink" title="路由表分级"></a>路由表分级</h3><ul><li><p>最终路由</p><p>包含下一跳IPv4地址或送出接口的路由表条目. 例如动态获取的直连本地路由</p><p><img src="/2019/11/28/CCNA-2/2019-11-25-ch03%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20191125220626520.png" alt="image-20191125220626520"></p></li><li><p>一级路由</p><p>子网掩码小于等于网络地址有类掩码</p><ul><li>网络路由: 子网掩码等于有类掩码. eg. <code>192.168.1.0/24</code></li><li>超网路由: 掩码小于有类掩码. <code>192.168.0.0/16</code></li><li>默认路由: <code>0.0.0.0/0</code></li></ul><p>路由源可以是直连网络, 静态路由, 动态路由.</p><p><img src="/2019/11/28/CCNA-2/2019-11-25-ch03%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20191125221300000.png" alt="image-20191125221300000"></p></li><li><p>一级父路由</p><p>划分子网的一级路由, 不能是最终路由</p><p><img src="/2019/11/28/CCNA-2/2019-11-25-ch03%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20191125221438286.png" alt="image-20191125221438286"></p></li><li><p>二级子路由</p><p>一级父路由的子路由</p></li></ul><h3 id="IPv4路由查找"><a href="#IPv4路由查找" class="headerlink" title="IPv4路由查找"></a>IPv4路由查找</h3><h4 id="路由查找过程"><a href="#路由查找过程" class="headerlink" title="路由查找过程"></a>路由查找过程</h4><ul><li>匹配一级路由<ul><li>匹配到最终路由, 成功</li><li>匹配到一级父路由<ul><li>匹配子路由<ul><li>匹配成功</li><li>匹配失败<ul><li>匹配1级超网路由<ul><li>匹配成功</li><li>匹配失败, 默认路由</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><blockquote><p>如果未使用思科快速转发 (CEF)，仅引用下一跳 IP 地址而不引用退出接口的路由必须解析为具有退出接口的路由。在没有 CEF 的情况下，会对下一跳 IP 地址执行递归查找，直到将该路由解析为某个退出接口。默认情况下，启用 CEF。 </p></blockquote><h4 id="最佳路由-最长匹配"><a href="#最佳路由-最长匹配" class="headerlink" title="最佳路由=最长匹配"></a>最佳路由=最长匹配</h4><blockquote><p> 要使数据包的目标 IPv4 地址和路由表中的路由形成匹配，两者之间从最左侧开始必须存在最少匹配位数。这个最少匹配位数由路由表中路由的子网掩码决定。 </p></blockquote><p>和路由器的子网处在一个网段, 且路由器子网包含的主机数量最少, 就转发给这个路由.</p><p>最<strong>精确</strong>地转发数据包</p><p><img src="/2019/11/28/CCNA-2/2019-11-25-ch03%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20191125222400469.png" alt="image-20191125222400469"></p><p>路由3的子网掩码可以满足数据包的ip而且最长, 因此转发给路由3.</p><h2 id="IPv6路由"><a href="#IPv6路由" class="headerlink" title="IPv6路由"></a>IPv6路由</h2><ul><li>IPv6是无类的, 所有路由都是1级最终路由</li></ul><h3 id="直连"><a href="#直连" class="headerlink" title="直连"></a>直连</h3><p><img src="/2019/11/28/CCNA-2/2019-11-25-ch03%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20191126133904479.png" alt="image-20191126133904479"></p><h3 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h3><p><img src="/2019/11/28/CCNA-2/2019-11-25-ch03%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20191126134039605.png" alt="image-20191126134039605"></p><p><a href="./2019-11-25-ch03pt实践.md">pt实践</a></p>]]></content>
      
      
      <categories>
          
          <category> CCNA-2 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-24-谷歌云T4服务器配置</title>
      <link href="/2019/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2019-11-24-%E8%B0%B7%E6%AD%8C%E4%BA%91T4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2019-11-24-%E8%B0%B7%E6%AD%8C%E4%BA%91T4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>#2019-11-24-谷歌云T4服务器配置</p><p>辣鸡神经网络,本地挂个4天都跑不完,8G显存都能爆掉,我选择tesla T4服务器</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>科学上网</li><li>visa卡注册的账户</li><li>已经提升过权限,不再是免费用户</li><li>有xshell与xftp更加方便地进行图形化操作</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>建立前查看gpu在哪里有 <a href="https://cloud.google.com/compute/docs/gpus/" target="_blank" rel="noopener">https://cloud.google.com/compute/docs/gpus/</a><br>上来先 <a href="https://app.yinxiang.com/shard/s31/nl/23686157/6219b777-705d-4d6c-8319-ad038219d36a" target="_blank" rel="noopener">(1条消息)用SSH工具XShell连接谷歌云 root用户或普通用户 - 干货 - CSDN博客</a><br>然后根据 <a href="https://app.yinxiang.com/shard/s31/nl/23686157/988e45eb-d2a7-4bcf-b3a6-6340aa26f6f5" target="_blank" rel="noopener">在谷歌云服务器上搭建深度学习平台</a></p><h2 id="申请compute-engine"><a href="#申请compute-engine" class="headerlink" title="申请compute engine"></a>申请compute engine</h2><p><img src="/2019/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2019-11-24-%E8%B0%B7%E6%AD%8C%E4%BA%91T4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/1574582404542.png" alt="1574582404542"></p><p><img src="/2019/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2019-11-24-%E8%B0%B7%E6%AD%8C%E4%BA%91T4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/1574582419933.png" alt="1574582419933"></p><p>然后不出所料地出现</p><p><img src="/2019/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2019-11-24-%E8%B0%B7%E6%AD%8C%E4%BA%91T4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/1574582433893.png" alt="1574582433893"></p><p>提高配额</p><p>首先全局添加gpu</p><p><img src="/2019/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2019-11-24-%E8%B0%B7%E6%AD%8C%E4%BA%91T4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/1574585845393.png" alt="1574585845393"></p><p>然后修改每个地区</p><p><img src="/2019/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2019-11-24-%E8%B0%B7%E6%AD%8C%E4%BA%91T4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/1574582451567.png" alt="1574582451567"></p><p>把配额都提升到1,然后第二天配额通过后再来</p><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><h3 id="ssh配置"><a href="#ssh配置" class="headerlink" title="ssh配置"></a>ssh配置</h3><p><img src="/2019/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2019-11-24-%E8%B0%B7%E6%AD%8C%E4%BA%91T4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/1574748770830.png" alt="1574748770830"></p><p>夺取新时代中国特色社会主义root账户所有权</p><pre><code class="bash">sudo -i</code></pre><p>禁用防火墙</p><pre><code class="bash">sudo ufw disable</code></pre><h4 id="修改SSH配置文件"><a href="#修改SSH配置文件" class="headerlink" title="修改SSH配置文件"></a><strong>修改SSH配置文件</strong></h4><p><strong>/etc/ssh/sshd_config</strong></p><pre><code>vi /etc/ssh/sshd_config</code></pre><p>修改PermitRootLogin和PasswordAuthentication为yes</p><pre><code class="bash"># Authentication:PermitRootLogin yes //默认为no，需要开启root用户访问改为yes# Change to no to disable tunnelled clear text passwordsPasswordAuthentication yes //默认为no，改为yes开启密码登陆</code></pre><h4 id="给root用户设置密码"><a href="#给root用户设置密码" class="headerlink" title="给root用户设置密码"></a><strong>给root用户设置密码</strong></h4><pre><code>passwd root</code></pre><p>####<strong>重启SSH服务使修改生效</strong></p><pre><code>/etc/init.d/ssh restart</code></pre><h3 id="xshell-连接"><a href="#xshell-连接" class="headerlink" title="xshell 连接"></a>xshell 连接</h3><h3 id="光速配置深度学习环境"><a href="#光速配置深度学习环境" class="headerlink" title="光速配置深度学习环境"></a>光速配置深度学习环境</h3><h4 id="显卡驱动安装"><a href="#显卡驱动安装" class="headerlink" title="显卡驱动安装"></a>显卡驱动安装</h4><pre><code class="bash">apt -y install ubuntu-drivers-commonapt-get updateapt-get upgradeubuntu-drivers autoinstall</code></pre><p>然后<code>nvidia-smi</code>暗中观察一下</p><p><img src="/2019/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2019-11-24-%E8%B0%B7%E6%AD%8C%E4%BA%91T4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/1574749300805.png" alt="1574749300805"></p><h4 id="安装anaconda"><a href="#安装anaconda" class="headerlink" title="安装anaconda"></a>安装anaconda</h4><pre><code class="bash">wget https://repo.anaconda.com/archive/Anaconda3-2019.07-Linux-x86_64.shcd ~mkdir .condacd -bash Anaconda3-2019.07-Linux-x86_64.shsource ~/.bashrc</code></pre><p>ps:感兴趣的同学可以考虑不创建.conda,然后欢乐踩坑</p><h4 id="配置conda环境"><a href="#配置conda环境" class="headerlink" title="配置conda环境"></a>配置conda环境</h4><p>用conda只为一个原因.不用自己搞cuda与cudnn,只要安装<strong>-gpu</strong>就可以自动根据tensorflow版本配置相应版本的cuda与cudnn</p><p>如果输入conda显示<code>command not find</code>,应该考虑重连</p><pre><code class="bash">conda install -y tensorflow-gpu==1.14.0conda install -y keras-gpu</code></pre><h3 id="部署项目过去"><a href="#部署项目过去" class="headerlink" title="部署项目过去"></a>部署项目过去</h3><p>如果有github库直接git clone就行了.</p><p>通常需要使用xftp来传输文件到相应的位置</p><p><img src="/2019/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2019-11-24-%E8%B0%B7%E6%AD%8C%E4%BA%91T4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/1574756196114.png" alt="1574756196114"></p><h3 id="调用程序训练"><a href="#调用程序训练" class="headerlink" title="调用程序训练"></a>调用程序训练</h3><h4 id="利用screen防止xshell关进程亡"><a href="#利用screen防止xshell关进程亡" class="headerlink" title="利用screen防止xshell关进程亡"></a>利用screen防止xshell关进程亡</h4><p>如果程序要花费很长时间训练,xshell会中途断掉,需要先</p><pre><code class="screen">screen</code></pre><p>生成新的窗口,然后训练<br>重新回到窗口</p><pre><code>screen -ls</code></pre><p>查看id</p><p>如果dettached用<code>screen -r id</code>如果attached用<code>screen -rd id</code></p><h4 id="tensorboard服务器在本地端查看"><a href="#tensorboard服务器在本地端查看" class="headerlink" title="tensorboard服务器在本地端查看"></a>tensorboard服务器在本地端查看</h4><p>在谷歌云防火墙开放外部端口，然后运行</p><p>具体操作参考</p><p><a href="https://www.jianshu.com/p/893d622d1b5a" target="_blank" rel="noopener">https://www.jianshu.com/p/893d622d1b5a</a></p><pre><code class="bash">tensorboard --logdir=&#39;logs&#39; --port=6006</code></pre><p>之后通过http://[服务器ip]:6006访问</p><h4 id="设置python运行的工作路径"><a href="#设置python运行的工作路径" class="headerlink" title="设置python运行的工作路径"></a>设置python运行的工作路径</h4><p>如果直接运行,会看到令人窒息的结果</p><p><img src="/2019/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2019-11-24-%E8%B0%B7%E6%AD%8C%E4%BA%91T4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/1574584660714.png" alt="1574584660714"></p><p>这完全是因为工作路径PYTHONPATH下没有相关文件夹,需要设定工作路径</p><p>用<code>export PYTHONPATH=</code>可以解忧</p><pre><code class="bash">export PYTHONPATH=&quot;${PYTHONPATH}:/root/model_test(now)&quot;</code></pre><p>然后</p><pre><code class="bash">python3.7 /root/model_test\(now\)/train_script/train.py</code></pre><h2 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h2><p>k80配置完成后的history记录，中间先安装-gpu再装显卡驱动，因此产生很多波折</p><pre><code class="bash">  1  wget https://repo.anaconda.com/archive/Anaconda3-2019.07-Linux-x86_64.sh    2  bash Anaconda3-2019.07-Linux-x86_64.sh    3  sudo bash Anaconda3-2019.07-Linux-x86_64.sh    4  l    5  ll    6  cd /    7  ll    8  python    9  pip   10  conda   11  conda config --set auto_activate_base false   12  bash -u Anaconda3-2019.07-Linux-x86_64.sh   13  cd ~   14  bash -u Anaconda3-2019.07-Linux-x86_64.sh   15  ll   16  ./Anaconda3-2019.07-Linux-x86_64.sh   17  sudo -u ./Anaconda3-2019.07-Linux-x86_64.sh   18  passwd rppt   19  passwd root   20  vi /etc/ssh/sshd_config   21  /etc/init.d/ssh restart   22  ll   23  mkdir .conda   24  bash -u Anaconda3-2019.07-Linux-x86_64.sh   25  ./Anaconda3-2019.07-Linux-x86_64.sh   26  sudo -u ./Anaconda3-2019.07-Linux-x86_64.sh   27  rm -r anaconda3/   28  ll   29  bash  Anaconda3-2019.07-Linux-x86_64.sh   30  conda   31  lspci | grep -i nvidia   32  ubuntu-drivers autoinstall   33  apt install ubuntu-drivers-common   34  ubuntu-drivers autoinstall   35  nvidia-smi   36  history   37  conda list   38  pip install tqdm   39  conda install -y tensorflow-gpu==1.14.0   40  conda install -y keras-gpu   41  pip install scikit-learn   42  ll   43  nvidia-smi   44  git   45  ll   46  cd DGA-detector/   47  conda info   48  conda list   49  conda env export --file DGA.yml   50  cd DGA-detector/   51  ll   52  cd model_test\(now\)/   53  ll   54  python train_script/train.py   55  python ./train_script/train.py   56  pwd   57  export PYTHONPATH=&quot;${PYTHONPATH}:/root/DGA-detector/model_test(now)&quot;   58  python ./train_script/train.py   59  nvcc -v   60  apt install nvidia-cuda-toolkit   61  reboot   62  nvidia-smi   63  nvcc 0v   64  nvcc -v   65  nvcc   66  conda list   67  nvcc -v   68  nvcc --help   69  nvcc -V   70  conda install -y tensorflow-gpu==1.14.0   71  nvidia-smi   72  nvcc --version   73  cat /proc/driver/nvidia/version   74  sudo add-apt-repository ppa:graphics-drivers/ppa   75  apt update   76  apt list --upgradable   77  apt upgrade   78  nvidia-smi   79  sudo lshw -numeric -C display   80  ubuntu-drivers devices   81  apt install nvidia-430   82  nvidia-smi   83  nvcc -V   84  apt install nvidia-cuda-toolkit   85  apt uninstall nvidia-cuda-toolkit   86  apt remove nvidia-cuda-toolkit   87  apt install nvidia-cuda-toolkit   88  nvidia-smi   89  reboot   90  cd DGA-detector/model_test\(now\)/train_script/   91  ./ train.py   92  python train.py   93  export PYTHONPATH=&quot;${PYTHONPATH}:/root/DGA-detector/model_test(now)&quot;   94  python train.py   95  test2forbaipiao   96  ubuntu-drivers devices   97  nvcc -v   98  nvcc -V   99  nvidia-smi  100  history  101  watch nvidia-smi  102  history</code></pre>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-16-pycharm无法运行调出console</title>
      <link href="/2019/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2019-11-16-pycharm%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E8%B0%83%E5%87%BAconsole/"/>
      <url>/2019/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2019-11-16-pycharm%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E8%B0%83%E5%87%BAconsole/</url>
      
        <content type="html"><![CDATA[<p>这个时候要重装ipython</p><ul><li><p>物理删除ipython文件</p><p>在anaconda安装该环境的安装目录下</p></li></ul><p>删除<strong>ipython-版本号-py3.6.egg-info文件</strong></p><p>如D:\appstore\anaconda\env\pytorch\Lib\site-packages\ipython-5.1.0-py3.6.egg-info 文件即可</p><ul><li>然后在相应conda环境下pip install ipython</li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RSE_C2_PT</title>
      <link href="/2019/11/26/CCNA-2/RSE_C2_PT%20/"/>
      <url>/2019/11/26/CCNA-2/RSE_C2_PT%20/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章实战分析"><a href="#第二章实战分析" class="headerlink" title="第二章实战分析"></a>第二章实战分析</h1><h2 id="R1"><a href="#R1" class="headerlink" title="!R1"></a>!R1</h2><pre><code>enconf terminalhostname Centralipv6 unicast-routing no ip domain-lookup int s0/0/0description For Primary Lanip add 128.107.0.1 255.255.255.252ipv add 2001:DB8:2:1::1/64ipv add FE80::1 link-localno shexitint s0/0/1description For Backup Lanip add 128.107.0.5 255.255.255.252ipv add 2001:DB8:3:1::1/64ipv add FE80::1 link-localno shexitint s0/1/1description For Routerip add 10.10.20.1 255.255.255.252ipv add 2001:DB8:1:1::1/64ipv add FE80::1 link-localno shexitenable secret ciscoline console 0password classloginexitline vty 0 15password classloginexitservice passbanner motd &quot;you are fucking crazy&quot;ip route 10.10.2.0 255.255.255.0 s0/1/1ip route 10.10.1.0 255.255.255.0 s0/1/1ipv6 route 2001:DB8:1:B::/64 S0/1/1ipv6 route 2001:DB8:1:A::/64 S0/1/1ip route 0.0.0.0 0.0.0.0 s0/0/0ip route 0.0.0.0 0.0.0.0 s0/0/1 2ipv6 route ::/0 s0/0/1 2sh ip route </code></pre><h2 id="West"><a href="#West" class="headerlink" title="!West"></a>!West</h2><pre><code>enconf thostname Westipv6 unicast-routingint s0/0/0ip add 10.10.20.2 255.255.255.252ipv add 2001:DB8:1:1::2/64ipv add FE80::2 link-localno shexitint g0/0ip add 10.10.1.254 255.255.255.0ipv add 2001:DB8:1:A::1/64ipv add FE80::2 link-localno shexitint g0/1ip add 10.10.2.254 255.255.255.0ipv add 2001:DB8:1:B::1/64ipv add FE80::2 link-localno shexitip route 0.0.0.0 0.0.0.0 s0/0/0ipv6 route ::/0 s0/0/0</code></pre><p>会看到</p><pre><code>West#sh ipv6 route IPv6 Routing Table - 8 entriesCodes: C - Connected, L - Local, S - Static, R - RIP, B - BGP       U - Per-user Static route, M - MIPv6       I1 - ISIS L1, I2 - ISIS L2, IA - ISIS interarea, IS - ISIS summary       O - OSPF intra, OI - OSPF inter, OE1 - OSPF ext 1, OE2 - OSPF ext 2       ON1 - OSPF NSSA ext 1, ON2 - OSPF NSSA ext 2       D - EIGRP, EX - EIGRP externalS   ::/0 [1/0]     via Serial0/0/0, directly connectedC   2001:DB8:1:1::/64 [0/0]     via Serial0/0/0, directly connectedL   2001:DB8:1:1::2/128 [0/0]     via Serial0/0/0, receiveC   2001:DB8:1:A::/64 [0/0]     via GigabitEthernet0/0, directly connectedL   2001:DB8:1:A::1/128 [0/0]     via GigabitEthernet0/0, receiveC   2001:DB8:1:B::/64 [0/0]     via GigabitEthernet0/1, directly connectedL   2001:DB8:1:B::1/128 [0/0]     via GigabitEthernet0/1, receiveL   FF00::/8 [0/0]     via Null0, receive</code></pre><p><img src="/2019/11/26/CCNA-2/RSE_C2_PT%20/1574498707719.png" alt="1574498707719"></p><p><a href="https://www.youtube.com/watch?v=fmvC_LPpJTA" target="_blank" rel="noopener">具体视频教程链接</a></p>]]></content>
      
      
      <categories>
          
          <category> CCNA-2 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-10-ch03pt实践</title>
      <link href="/2019/11/26/CCNA-2/2019-11-10-ch03pt%E5%AE%9E%E8%B7%B5/"/>
      <url>/2019/11/26/CCNA-2/2019-11-10-ch03pt%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="RIP实战"><a href="#RIP实战" class="headerlink" title="RIP实战"></a>RIP实战</h1><p>现在查看<a href="https://www.ccna7.com/3-2-1-8-packet-tracer-configuring-ripv2/" target="_blank" rel="noopener">实战部分1</a></p><p>R1</p><pre><code class="tcl">!R1enconf terminal!Use the appropriate command to create a default route on R1 for all Internet traffic to exit the network through S0/0/1.ip route 0.0.0.0 0.0.0.0 s0/0/1!Enter RIP protocol configuration mode.router rip!Use version 2 of the RIP protocol and disable the summarization of networks.version 2no auto-summary!Configure RIP for the networks that connect to R1.network 192.168.1.0network 192.168.2.0!Configure the LAN port that contains no routers so that it does not send out any routing information.passive-interface gig 0/0!Advertise the default route configured in step 1a with other RIP routers.default-information originateexitexit!check configureshow ip protocols!save configurecopy running-config startup-config </code></pre><p>R2</p><pre><code>enconf terminalroute ripversion 2no auto-summarynetwork 192.168.2.0network 192.168.3.0network 192.168.4.0passive-interface gig 0/0exitexitCopy running-config startup-config</code></pre><p>R3</p><pre><code class="tcl">enconf terminalrouter ripversion 2no auto-summarynetwork 192.168.4.0network 192.168.5.0passive-interface gig 0/0exitexitCopy running-config startup-config</code></pre><p><a href="http://www.cabrillo.edu/~rgraziani/cis82/labs-v6/3-2-1-9-Lab-ConfiguringBasicRIPv2.pdf" target="_blank" rel="noopener">实战部分2</a></p>]]></content>
      
      
      <categories>
          
          <category> CCNA-2 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-26-ch05交换机配置</title>
      <link href="/2019/11/26/CCNA-2/2019-11-26-ch05%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/11/26/CCNA-2/2019-11-26-ch05%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="交换机配置"><a href="#交换机配置" class="headerlink" title="交换机配置"></a>交换机配置</h1><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="通过初始配置设置交换机"><a href="#通过初始配置设置交换机" class="headerlink" title="通过初始配置设置交换机"></a>通过初始配置设置交换机</h3><h4 id="交换机启动顺序"><a href="#交换机启动顺序" class="headerlink" title="交换机启动顺序"></a>交换机启动顺序</h4><ul><li><p>POST: power on self test 加电自检. </p></li><li><p>引导程序: 存放在rom中</p></li><li><p>低级cpu初始化: 初始化cpu寄存器</p></li><li><p>启动初始化系统主板的flash系统</p></li><li><p>加载ios到内存</p><ul><li><p>用boot环境变量的信息启动</p><ul><li>环境变量未设置-找flash中第一个可执行文件</li></ul><pre><code>show boot // 查看启动文件设置boot system flash://..... // 指定启动文件</code></pre></li></ul></li></ul><ul><li>开机后在nvram中找到startup config</li></ul><h4 id="修复系统"><a href="#修复系统" class="headerlink" title="修复系统"></a>修复系统</h4><p><img src="/2019/11/26/CCNA-2/2019-11-26-ch05%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/image-20191126144003969.png" alt="image-20191126144003969"></p><p>进入到恢复模式, 可以格式化操作系统, 重新安装操作系统, 回复密码</p><h4 id="LED指示灯"><a href="#LED指示灯" class="headerlink" title="LED指示灯"></a>LED指示灯</h4><ul><li>系统: 绿色-正常, 琥珀色-不正常, 不亮-未开机</li><li>冗余电源(RPS): 不亮-未发现RPS, 绿色-正常, 闪烁-RPS正在为其他设备供电, 琥珀色-RPS故障, 琥珀色闪烁-RPS正在供电.</li><li>端口状态: <ul><li>绿色-一条链路, </li><li>绿色闪烁-传输数据, </li><li>绿色琥珀色交替-故障. </li><li>琥珀色-端口阻塞, 正在确保转发域不存在环路; 端口被激活30s内是这个状态</li><li>琥珀色闪烁-端口阻塞, 转发域存在环路;</li></ul></li><li>端口双工LED, 绿色: 全双工, 不亮: 半双工, </li><li>端口速度LED, 绿色: 100Mbps, 绿色闪烁: 1000Mbps, 不亮: 10Mbps</li><li>以太网供电(PoE), <ul><li>不亮: 没有使用PoE. </li><li>琥珀色闪烁: 没有选择PoE, 但是有一个端口断电或故障</li><li>绿色: 选择了PoE</li><li>绿色琥珀色交替: PoE被拒绝, 用电设备的供电超过交换机电源容量</li><li>琥珀色闪烁: 故障关闭</li><li>琥珀色: 禁用PoE</li></ul></li></ul><h2 id="配置交换机端口"><a href="#配置交换机端口" class="headerlink" title="配置交换机端口"></a>配置交换机端口</h2><h4 id="准备基本交换机管理"><a href="#准备基本交换机管理" class="headerlink" title="准备基本交换机管理"></a>准备基本交换机管理</h4><p>想远程管理访问交换机, 必须配置ip, 子网掩码, 如果是其他网络访问还要配置默认网关. 配置到虚拟接口SVI上</p><p>所有端口默认是分给vlan1的. 所以SVI也是默认给vlan1. 最好是将SVI分配给另一个vlan. </p><pre><code>conf tinter vlan 99ip addr ...no shutend(config)ip default-gateway ...end(en)copy run start</code></pre><h4 id="配置全双工"><a href="#配置全双工" class="headerlink" title="配置全双工"></a>配置全双工</h4><p>交换机都有自动协商功能(默认启用), 但是连接到专用设备的时候, 手动配置非常有用.</p><pre><code>conf tinter g0/0duplex full // 全双工speed 100 // 100Mbpsend</code></pre><p>1000Mbps只能在全双工下工作</p><h4 id="MDIX"><a href="#MDIX" class="headerlink" title="MDIX"></a>MDIX</h4><p>auto-MDIX自动检测直通/交叉, 自动配置, 但是连接到服务器/工作站等没有自动MDIX的, 就需要手动选择电缆. 启用MDIX:</p><pre><code>conf tinter g0/0duplex autospeed automdix autoend</code></pre><h4 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h4><pre><code>show interfaces f0/18show ip f0/18show mac-address-tableshow flash</code></pre><h3 id="接入层故障排除"><a href="#接入层故障排除" class="headerlink" title="接入层故障排除"></a>接入层故障排除</h3><p><img src="/2019/11/26/CCNA-2/2019-11-26-ch05%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/image-20191126193054420.png" alt="image-20191126193054420"></p><ul><li>接口up, 协议down, 说明另一端接口可能被禁用, 查看是否有<code>EMI/noise</code>, 找到噪声源. 双工配置是否正确. </li><li>接口协议都down, 说明电缆未链接/损坏, 接口损坏, 接口速度不匹配造成问题</li><li>管理性关闭, 说明被手动禁用</li></ul><p><img src="/2019/11/26/CCNA-2/2019-11-26-ch05%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/image-20191126193413274.png" alt="image-20191126193413274"></p><ul><li>如果CRC错误多, 说明电缆/布线可能存在问题(电磁干扰)</li><li>冲突: 半双工时会存在. 全双工不会存在冲突</li><li>延迟冲突: 传输了512位的帧之后发生冲突. 可能由于电缆过长, 一端是全双工而另一端是半双工.</li><li>超长帧: 可能因为NIC故障.</li></ul><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><ul><li><p>配置步骤</p><pre><code>show ip ssh // 检查是否支持sshconf t // 全局配置ip domain-name cisco.com // 配置ip域名crypto key generate rsa // 生成rsa密钥对username admin secret ccna // 创建用户line vty 0 15 // 在vty0-15上启用transport input ssh // 只接受sshlogin local // 从本地用户名数据库验证身份exitip ssh version 2 // 开启第二版sshexit</code></pre></li></ul><h3 id="保护未使用端口安全"><a href="#保护未使用端口安全" class="headerlink" title="保护未使用端口安全"></a>保护未使用端口安全</h3><ul><li><p>禁用未使用端口</p><pre><code>interface range f0/1 - 15(config-if-range)shutdown</code></pre></li><li><p>安全mac地址: 限定端口的mac地址, 其他地址不可接入</p><ul><li><p>静态安全: 手动配置</p></li><li><p>动态安全: 动态获取, 存储在地址表中, 重启后删除</p></li><li><p>粘性安全: 动态获取或手动配置, 存储在地址表中, 添加到运行配置(RAM).</p><pre><code>switchport port-security mac-address sticky [mac-address] no switchport port-security mac-address sticky //禁用</code></pre></li></ul></li><li><p>违规模式: 违反安全要求后</p><ul><li>保护: 安全MAC地址数量达到限制, 未知源的数据包会被丢弃, 不通知. 直至移除足够数量的安全 MAC 地址或增加允许的最大地址数</li><li>限制: 同保护, 只是会发出通知.</li><li>关闭: <strong>如果不配置违规模式的默认模式</strong>, 立刻禁用, <code>show interface f0/18</code>会显示<code>err-disabled</code>. 使用<code>no shut</code>重新开启.</li></ul><pre><code>switchport port-security violation {protect | restrict | shutdown}</code></pre></li><li><p>总结配置</p><pre><code>inter f0/18(config if)switchport mode accessswitchport port-securityswitchport port-security maximum 10switchport port-security mac-address sticky</code></pre></li><li><p>查看配置</p><pre><code>(en)show port-security inter f0/18show port-security address</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA-2 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-24-RSE_C2_PT</title>
      <link href="/2019/11/25/CCNA-2/2019-11-24-RSE_C2_PT%20/"/>
      <url>/2019/11/25/CCNA-2/2019-11-24-RSE_C2_PT%20/</url>
      
        <content type="html"><![CDATA[<p>en<br>conf terminal<br>!R1<br>hostname Central<br>ipv6 unicast-routing<br>no ip domain-lookup<br>int s0/0/0<br>description For Primary Lan<br>ip add 128.107.0.1 255.255.255.252<br>ipv add 2001:DB8:2:1::1/64<br>ipv add FE80::1 link-local<br>no sh<br>exit</p><p>int s0/0/1<br>description For Backup Lan<br>ip add 128.107.0.5 255.255.255.252<br>ipv add 2001:DB8:3:1::1/64<br>ipv add FE80::1 link-local<br>no sh<br>exit</p><p>int s0/1/1<br>description For Router<br>ip add 10.10.20.1 255.255.255.252<br>ipv add 2001:DB8:1:1::1/64<br>ipv add FE80::1 link-local<br>no sh<br>exit</p><p>enable secret cisco<br>line console 0<br>password class<br>login<br>exit</p><p>line vty 0 15<br>password class<br>login<br>exit<br>service pass<br>banner motd “you are fucking crazy”<br>ip route 10.10.2.0 255.255.255.0 s0/1/1<br>ip route 10.10.1.0 255.255.255.0 s0/1/1<br>ipv6 route 2001:DB8:1:B::/64 S0/1/1<br>ipv6 route 2001:DB8:1:A::/64 S0/1/1<br>ip route 0.0.0.0 0.0.0.0 s0/0/0<br>ip route 0.0.0.0 0.0.0.0 s0/0/1 2<br>ipv6 route ::/0 s0/0/1 2</p><p>!确认配置<br>sh ip route</p><hr><p>!West<br>hostname West</p><p>ipv6 unicast-routing<br>int s0/0/0<br>ip add 10.10.20.2 255.255.255.252<br>ipv add 2001:DB8:1:1::2/64<br>ipv add FE80::2 link-local<br>no sh<br>exit<br>int g0/0<br>ip add 10.10.1.254 255.255.255.0<br>ipv add 2001:DB8:1:A::1/64<br>ipv add FE80::2 link-local<br>no sh<br>exit<br>int g0/1<br>ip add 10.10.2.254 255.255.255.0<br>ipv add 2001:DB8:1:B::1/64<br>ipv add FE80::2 link-local<br>no sh<br>exit</p><p>ip route 0.0.0.0 0.0.0.0 s0/0/0<br>ipv6 route ::/0 s0/0/0</p><p>会看到<br>West#sh ipv6 route<br>IPv6 Routing Table - 8 entries<br>Codes: C - Connected, L - Local, S - Static, R - RIP, B - BGP<br>       U - Per-user Static route, M - MIPv6<br>       I1 - ISIS L1, I2 - ISIS L2, IA - ISIS interarea, IS - ISIS summary<br>       O - OSPF intra, OI - OSPF inter, OE1 - OSPF ext 1, OE2 - OSPF ext 2<br>       ON1 - OSPF NSSA ext 1, ON2 - OSPF NSSA ext 2<br>       D - EIGRP, EX - EIGRP external<br>S   ::/0 [1/0]<br>     via Serial0/0/0, directly connected<br>C   2001:DB8:1:1::/64 [0/0]<br>     via Serial0/0/0, directly connected<br>L   2001:DB8:1:1::2/128 [0/0]<br>     via Serial0/0/0, receive<br>C   2001:DB8:1:A::/64 [0/0]<br>     via GigabitEthernet0/0, directly connected<br>L   2001:DB8:1:A::1/128 [0/0]<br>     via GigabitEthernet0/0, receive<br>C   2001:DB8:1:B::/64 [0/0]<br>     via GigabitEthernet0/1, directly connected<br>L   2001:DB8:1:B::1/128 [0/0]<br>     via GigabitEthernet0/1, receive<br>L   FF00::/8 [0/0]<br>     via Null0, receive</p><hr><p><img src="/2019/11/25/CCNA-2/2019-11-24-RSE_C2_PT%20/1574498707719.png" alt="1574498707719"></p><p><a href="https://www.youtube.com/watch?v=fmvC_LPpJTA" target="_blank" rel="noopener">具体视频教程链接</a></p>]]></content>
      
      
      <categories>
          
          <category> CCNA-2 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-23-ch10设备发现，管理，维护</title>
      <link href="/2019/11/23/CCNA-2/2019-11-23-ch10%E8%AE%BE%E5%A4%87%E5%8F%91%E7%8E%B0%EF%BC%8C%E7%AE%A1%E7%90%86%EF%BC%8C%E7%BB%B4%E6%8A%A4/"/>
      <url>/2019/11/23/CCNA-2/2019-11-23-ch10%E8%AE%BE%E5%A4%87%E5%8F%91%E7%8E%B0%EF%BC%8C%E7%AE%A1%E7%90%86%EF%BC%8C%E7%BB%B4%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="设备发现-管理-维护"><a href="#设备发现-管理-维护" class="headerlink" title="设备发现, 管理, 维护"></a>设备发现, 管理, 维护</h1><h2 id="设备发现"><a href="#设备发现" class="headerlink" title="设备发现"></a>设备发现</h2><h3 id="CDP"><a href="#CDP" class="headerlink" title="CDP"></a>CDP</h3><p>CISCO DISCORY PROTOCAL, 是一个思科专有第 2 层协议, 共享同一数据链路的思科设备的信息. 默认开启. </p><ul><li><p>有关命令</p><pre><code>show cdp // 查看cdp+show cdp neighbours // 查看发现的设备show cdp neighbours detail // 详细信息show cdp interface // 查看启用的接口(config) # cdp run // 启动cdp(config) # no cdp run // 全局禁用cdp, 最好这样做(config) # inter g0/0(conf-line) # cdp enable // 在端口上开启cdp(conf-line) # no cdp enable // 在端口上关闭cdp</code></pre></li></ul><h3 id="LLDP"><a href="#LLDP" class="headerlink" title="LLDP"></a>LLDP</h3><p>链路层发现协议 (LLDP), 国际通用协议. </p><ul><li><p>有关命令</p><pre><code>(config)lldp runinter g0/1lldp transmitlldp recieveexitexit(en)show lldpshow lldp neighboursshow lldp neighbours detail</code></pre></li></ul><h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><h3 id="NTP"><a href="#NTP" class="headerlink" title="NTP"></a>NTP</h3><p>使用NTP设置系统时钟</p><ul><li><p>手动配置时间</p><pre><code>clock set 20:01:00 dec 11 2019</code></pre></li><li><p>用ntp设置时间</p><pre><code>show clock detailconf tntp server 209.168.200.225exitshow ntp associations // 显示关联的ntp设备信息show ntp status // 显示本机ntp信息</code></pre></li></ul><p>ntp时间层级概念:</p><p>第0层: 权威时间源, 计时用.</p><p>第1层: 从权威时间源获取时间.</p><p>第n层: 从第n-1层获取时间</p><p>第16层: 表示设备不同步</p><h3 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h3><p>日志的功能</p><ul><li><p>能够收集日志记录信息来用于监控和故障排除        </p></li><li><p>能够选择捕获的日志记录信息的类型   </p></li><li><p>能够指定捕获的系统日志消息的目的地</p></li></ul><p>系统日志消息的常用目的地</p><ul><li><p>日志记录缓冲区（路由器或交换机内部的 RAM）     </p></li><li><p>控制台线路       </p></li><li><p>终端线路    </p></li><li><p>系统日志服务器</p></li></ul><p>设备可以配置为将所有系统消息转发到外部系统日志服务器, 内部缓冲区的日志只能从CLI上看到.</p><p>日志级别: 级别越小, 越紧急</p><p><img src="/2019/11/23/CCNA-2/2019-11-23-ch10%E8%AE%BE%E5%A4%87%E5%8F%91%E7%8E%B0%EF%BC%8C%E7%AE%A1%E7%90%86%EF%BC%8C%E7%BB%B4%E6%8A%A4/image-20191123153421475.png" alt="image-20191123153421475"></p><p>日志的构成</p><pre><code>seq no(日志的序号, 需要先配置service sequence-numbers) - timestamp(日志时间戳, 需要先配置service timestamp与ntp) - facility(来源设备) - severity(严重性, 上面的0-7) - MNEMONIC(简短的助记符) - 说明(详细报告)</code></pre><ul><li><p>开启时间戳</p><pre><code>conf tinter g0/0shutdownexit(config)service timestamps log datetimeinter g0/0no shut</code></pre></li></ul><ul><li><p>相关命令</p><pre><code>show logging //查看日志记录设置(config)logging 192.168.1.4 // 配置log服务器logging trap 4 // 显示0-4级loglogging source-interface g0/0 //指定系统日志数据包包含特定接口的 IPv4 或 IPv6 地址logging console // 把所有级别的日志都输出到consolelogging buffered // 缓冲系统日志消息</code></pre></li></ul><h2 id="设备维护"><a href="#设备维护" class="headerlink" title="设备维护"></a>设备维护</h2><h3 id="路由器交换机文件维护"><a href="#路由器交换机文件维护" class="headerlink" title="路由器交换机文件维护"></a>路由器交换机文件维护</h3><ul><li><p>文件系统</p><pre><code>show file systems // 查看文件系统dir // 列出文件, 类似lscd nvram: // 切换到nvrampwd</code></pre></li><li><p>使用TFTP备份和恢复</p><p>备份</p><p><img src="/2019/11/23/CCNA-2/2019-11-23-ch10%E8%AE%BE%E5%A4%87%E5%8F%91%E7%8E%B0%EF%BC%8C%E7%AE%A1%E7%90%86%EF%BC%8C%E7%BB%B4%E6%8A%A4/image-20191123160551545.png" alt="image-20191123160551545"></p><p>恢复</p><p><code>copy tftp running-config</code></p></li><li><p>USB接口</p><p><code>dir usbflash0</code></p><p>备份和恢复</p><pre><code>copy run usbflash0:/copy usbflshah0:/R1-config run //R1-config是usb上的备份文件名</code></pre></li></ul><h3 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h3><p>访问终端的配置</p><ul><li><p>9600 波特率       </p></li><li><p>无奇偶校验     </p></li><li><p>8 个数据位     </p></li><li><p>1 个停止位</p></li><li><p>无流量控制</p></li></ul><p>重置密码</p><ul><li><p>进入rommon模式: 登录中断开设备电源然后重接, 在终端上按下<a href="https://www.cisco.com/c/en/us/support/docs/routers/10000-series-routers/12818-61.html" target="_blank" rel="noopener">中断序列</a>访问.</p><pre><code>(rommon)confreg 0x2142 // 寄存器设置为这个值, 忽略启动配置文件reset</code></pre><p>重启中需要输入中断序列(快捷键)</p></li><li><p>重启后配置文件</p><pre><code>copy start runconf t**设置所有密码**config-register 0x2102 // 重置寄存器endcopy run startreload</code></pre></li></ul><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>类型说明</p><ul><li>名称中有 <strong>universalk9</strong>, 标准的映像, 提供所有功能</li><li>名称中<strong>带有“universalk9_npe</strong>, 提供强加密功能</li></ul><p>包含了四个技术包</p><ul><li>IP base</li><li>UC, 统一通信</li><li>数据</li><li>安全</li></ul><p>映像文件名</p><pre><code>show flash0:</code></pre><ul><li><p><strong>映像名称 (c1900)</strong> - 标识映像运行的平台。在本示例中，平台是思科 1900 路由器。</p></li><li><p><strong>universalk9</strong> - 指定映像标识。ISR G2 的两个标识是 universalk9 和  universalk9_npe。Universalk9_npe  不包含强加密，适用于具有加密限制的国家/地区。通过许可控制功能，并可将功能分为四个技术包。它们是 IP Base、安全、统一通信和数据。</p></li><li><p><strong>mz</strong> - 表示运行映像的位置以及文件是否经过压缩。在本示例中，“mz”表示文件从 RAM 运行并经过压缩。 </p><ul><li><p><strong>f</strong> - 闪存 </p></li><li><p><strong>m</strong> - RAM              </p></li><li><p><strong>r</strong> - ROM  </p></li><li><p><strong>l</strong> - 可重定位 </p></li><li><p>z - zip</p></li><li><p>x - mzip</p></li></ul></li><li><p><strong>SPA</strong> - 表示文件是由思科以数字形式签名的。</p></li><li><p><strong>152-4.M3</strong> - 指定映像 15.2(4)M3 的文件名格式。这是 IOS 的版本，其包括主要发行版、次要发行版、维护发行版和维护重新构建编号。M 指示这是扩展维护发行版。 </p></li><li><p><strong>bin</strong> - 文件扩展名。该扩展名表示此文件是二进制可执行文件。</p></li></ul><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>将映像备份到TFTP/从TFTP恢复</p><pre><code>copy flash0: tftp:</code></pre><h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><p>最好用<code>show flash0:</code>查看空间是否足够</p><pre><code>copy tftp: flash0: conf tboot system flash0://.....boot system rom // 如果flash0的系统无法使用, 就用rom的系统exitcopy run startreload</code></pre><h2 id="许可"><a href="#许可" class="headerlink" title="许可"></a>许可</h2><ul><li><p>用户购买思科设备, 思科设备预装了操作系统</p><ul><li>包括了IP base, data, uc, sec四个技术包</li><li>ip base许可证是安装其他技术包许可证的前提</li></ul></li><li><p>随着思科设备寄来的还有产品激活密钥(PAK)以及其他技术包的临时许可证, 可以试用新功能</p></li><li><p>查看设备的udi</p><pre><code>show license udi</code></pre><p>使用udi和pak, 下载 <strong>思科 License Manager (CLM)</strong>  , 来激活设备</p></li><li><p>收到邮件, 包含里一个.lic文件, 放入flash中</p><pre><code>license install flash0:...reload</code></pre></li><li><p>备份许可</p><pre><code> license save flash0:...</code></pre></li><li><p>清楚许可证</p><pre><code>// 禁用技术包license boot module c1900 technology-package seck9(包名称) disableexitreload// 清除许可证license clear seck9conf tno license boot module c1900 technology-package seck9(包名称) disableexit reload</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA-2 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-16-ch06VLAN</title>
      <link href="/2019/11/20/CCNA-2/2019-11-16-ch06VLAN/"/>
      <url>/2019/11/20/CCNA-2/2019-11-16-ch06VLAN/</url>
      
        <content type="html"><![CDATA[<h1 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h1><h2 id="VLAN分段"><a href="#VLAN分段" class="headerlink" title="VLAN分段"></a>VLAN分段</h2><h3 id="为何使用VLAN"><a href="#为何使用VLAN" class="headerlink" title="为何使用VLAN"></a>为何使用VLAN</h3><ul><li>通常, 一个交换机是一个网段, 多个交换机插在路由器上</li><li>访问其他网段必须通过路由器. 路由器可以隔离广播, 因此广播无法到达其他网段.</li><li>因此一个交换机称为一个广播域.</li><li>但是有的时候, 我的网段有<strong>数十个</strong>, 但是路由器的接口却没有这么多, 或者我想在两台交换机上<strong>灵活分配</strong>网段,传统的方式就显得不足.</li></ul><p><strong>VLAN就是用来跨交换机构建局域网</strong>, 优势有: </p><ul><li>安全, 隔离用户</li><li>降低成本, 提高性能, 减小广播域</li><li>提高IT员工效率, 相似网络需求的员工可以共享一个VLAN</li><li>简化项目管理, 无需为接线烦恼</li></ul><h4 id="VLAN类型"><a href="#VLAN类型" class="headerlink" title="VLAN类型"></a>VLAN类型</h4><ul><li>数据VLAN, 传输流量, 一般将语音流量, 管理流量, 数据流量分隔在不同VLAN上.</li><li>默认VLAN, 交换机端口默认属于VLAN 1.</li><li>本征VLAN, 链路部分收到了没有VLAN标签的数据, 就会加上本征VLAN标签.</li><li>管理VLAN, 访问交换机管理功能. 默认是VLAN 1.</li></ul><h3 id="多交换环境中的VLAN"><a href="#多交换环境中的VLAN" class="headerlink" title="多交换环境中的VLAN"></a>多交换环境中的VLAN</h3><h4 id="VLAN中继"><a href="#VLAN中继" class="headerlink" title="VLAN中继"></a>VLAN中继</h4><ul><li>两个交换机个有一些VLAN</li><li>把两个交换机相同的VLAN连接起来的链路叫做中继, 中继网络又称为VLAN TRUNK, 像树干一样链接整个网络. 遵循IEEE 802.1Q协议</li><li>广播域是同一个VLAN, 即使跨越了多个交换机.</li></ul><h4 id="标记以太网帧识别VLAN"><a href="#标记以太网帧识别VLAN" class="headerlink" title="标记以太网帧识别VLAN"></a>标记以太网帧识别VLAN</h4><p><img src="/2019/11/20/CCNA-2/2019-11-16-ch06VLAN/C:%5CUsers%5Clj%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191116200256396.png" alt></p><ul><li><p><strong>类型</strong> - 2 字节值，称为标记协议 ID (TPID) 值。对于以太网，它设置为十六进制 0x8100。   </p></li><li><p><strong>用户优先级</strong> - 3 位值，支持级别或服务实施。       </p></li><li><p><strong>规范格式标识符 (CFI)</strong> - 1 位标识符，便于在以太网链路上传输令牌环帧。</p></li><li><p><strong>VLAN ID (VID)</strong> - 12 位 VLAN 标识号，最多支持 4096 个 VLAN ID。</p></li></ul><h4 id="本征VLAN"><a href="#本征VLAN" class="headerlink" title="本征VLAN"></a>本征VLAN</h4><ul><li>接入TRUNK的无VLAN设备会被分配本征VLAN</li><li>无VLAN设备的数据会被转发到本征VLAN中</li></ul><h2 id="VLAN实施情况"><a href="#VLAN实施情况" class="headerlink" title="VLAN实施情况"></a>VLAN实施情况</h2><h3 id="VLAN分配"><a href="#VLAN分配" class="headerlink" title="VLAN分配"></a>VLAN分配</h3><h4 id="VLAN范围"><a href="#VLAN范围" class="headerlink" title="VLAN范围"></a>VLAN范围</h4><ul><li>1-1005<ul><li>普通VLAN</li><li>端口1, 1002-1005是自动创建的, 不可删除. 1002-1005是留给令牌和光纤分布式数据接口 (FDDI) VLAN 的.</li><li>配置文件存放在flash中, 名为vlan.dat</li><li>VLAN中继协议管理普通VLAN</li></ul></li><li>1006-4096<ul><li>扩展VLAN</li><li>保存在running config里</li></ul></li></ul><h3 id="创建VLAN"><a href="#创建VLAN" class="headerlink" title="创建VLAN"></a>创建VLAN</h3><p>创建一个VLAN</p><pre><code>conf tvlan 100name testend</code></pre><p>为VLAN分配端口</p><pre><code>conf tinter f0/0switchport mode access // 设置为接入端口switchport access vlan 10end</code></pre><p>为多个端口分配vlan</p><pre><code>inter range f0/1-15switchport mode accessswitchport access vlan 20 mls qos trust cos // 信任语音流量switchport access vlan 150end</code></pre><p><strong>通常一个端口只能分给一个vlan, 但是思科交换机可以为一个端口分给数据vlan和语音vlan</strong>. </p><p>给端口分配两个vlan</p><pre><code>inter f0/1switchport mode accessswitchport access vlan 20 mls qos trust cos // 信任语音流量switchport access vlan 150end</code></pre><p>查看vlan </p><pre><code>show vlan name studentshow vlan summaryshow inter vlan 20show inter f0/18 switchport</code></pre><p>删除端口的vlan</p><pre><code>inter f0/1no switchport access vlanendshow vlan brief // 查看vlan信息, 其实查看的是vlan.dat文件show inter f0/18 switchport // 查看端口信息</code></pre><p>删除vlan</p><pre><code>(config)# no vlan 20</code></pre><p>将交换机恢复为出厂设置</p><pre><code>erase startup-configdelete vlan.dat</code></pre><h3 id="VLAN中继-1"><a href="#VLAN中继-1" class="headerlink" title="VLAN中继"></a>VLAN中继</h3><ul><li><p>配置中继端口</p><pre><code>inter f0/19switchport mode trunkswitchport trunk native vlan 99switchport trunk allowed vlan 20,18end</code></pre></li><li><p>重置端口</p><pre><code>inter f0/19switchport mode trunkno switchport trunk allowed vlanswitchport trunk native vlan end</code></pre></li></ul><h3 id="vlan故障"><a href="#vlan故障" class="headerlink" title="vlan故障"></a>vlan故障</h3><ul><li><p>vlan中子网不同将无法通信</p></li><li><p>vlan配置错误, 检查</p><ul><li>vlan正确了吗</li><li>vlan是否已被删除</li></ul></li><li><p>中继错误</p><ul><li>本征vlan是否一致</li><li>是否开启了trunk链路</li><li>vlan是否被允许通过链路</li></ul></li></ul><h2 id="vlan间路由"><a href="#vlan间路由" class="headerlink" title="vlan间路由"></a>vlan间路由</h2><h3 id="传统vlan间路由"><a href="#传统vlan间路由" class="headerlink" title="传统vlan间路由"></a>传统vlan间路由</h3><ul><li>每一个vlan都要求接入路由器的一个接口</li><li>和不同交换机接入路由器无异</li></ul><h3 id="单臂路由"><a href="#单臂路由" class="headerlink" title="单臂路由"></a>单臂路由</h3><ul><li>只需要接入路由器一个接口</li><li>在路由器上也配置支持vlan</li></ul><h2 id="配置单臂路由"><a href="#配置单臂路由" class="headerlink" title="配置单臂路由"></a>配置单臂路由</h2><ul><li><p>在路由器上</p><pre><code>inter g0/0.10 // 为g0/0创建子接口.10(可以任意, 一般与vlan相等), 在这个子接口上配置vlan 10encapsulation dot1q 10 // 在这个端口中删除vlan 10ip addr 172.17.10.1 255.255.255.0inter g0/0.30encapsulation dot1q 30 // 在这个端口中删除vlan 30ip addr 172.17.30.1 255.255.255.0exitinter g0/0no shut //开启所有子接口</code></pre></li><li><p>验证vlan</p><pre><code>show vlanshow ip route</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA-2 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-10-ch04交换网络</title>
      <link href="/2019/11/20/CCNA-2/2019-11-10-ch04%E4%BA%A4%E6%8D%A2%E7%BD%91%E7%BB%9C/"/>
      <url>/2019/11/20/CCNA-2/2019-11-10-ch04%E4%BA%A4%E6%8D%A2%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="交换网络"><a href="#交换网络" class="headerlink" title="交换网络"></a>交换网络</h1><h2 id="LAN设计"><a href="#LAN设计" class="headerlink" title="LAN设计"></a>LAN设计</h2><h3 id="融合网络"><a href="#融合网络" class="headerlink" title="融合网络"></a>融合网络</h3><h4 id="无边界交换网络的层次结构"><a href="#无边界交换网络的层次结构" class="headerlink" title="无边界交换网络的层次结构"></a>无边界交换网络的层次结构</h4><ul><li>分层: 简化部署<ul><li>接入层: 用户pc连接的一层, 网络边缘.</li><li>分布层: 接入ISP</li><li>核心层: 网络主干</li></ul></li><li>模块化: 无缝网络扩展</li><li>恢复能力: 保持网络运行</li><li>灵活性: 只能流量负载</li></ul><h3 id="交换网络-1"><a href="#交换网络-1" class="headerlink" title="交换网络"></a>交换网络</h3><h4 id="选购交换机"><a href="#选购交换机" class="headerlink" title="选购交换机"></a>选购交换机</h4><ul><li><p>成本</p></li><li><p>接口密度: 接口不要空余. 一般有12, 24, 48接口</p></li><li><p>电源: 冗余电源</p></li><li><p>可靠性</p></li><li><p>端口速度</p></li><li><p>帧缓冲</p></li><li><p>扩展性: 交换机的菊花链可以连接交换机做成一个大交换机</p><p><img src="/2019/11/20/CCNA-2/2019-11-10-ch04%E4%BA%A4%E6%8D%A2%E7%BD%91%E7%BB%9C/image-20191126141544180.png" alt="image-20191126141544180"></p></li></ul><h3 id="帧转发"><a href="#帧转发" class="headerlink" title="帧转发"></a>帧转发</h3><p>交换机根据入口端口和目标地址转发帧</p><ul><li>存储转发: 循环冗余检查CRC, 检查帧(通过FCS校验)是否有错再转发</li><li>直通交换: 直接转发</li></ul><h3 id="交换域"><a href="#交换域" class="headerlink" title="交换域"></a>交换域</h3><h4 id="冲突域"><a href="#冲突域" class="headerlink" title="冲突域"></a>冲突域</h4><p>设备之间共享带宽的网段是冲突域. <strong>半双工</strong>的交换机, 每个网段都是冲突与. <strong>全双工</strong>则没有这个问题.</p><h4 id="广播域"><a href="#广播域" class="headerlink" title="广播域"></a>广播域</h4><p>路由器的一个接口就是一个广播域. 因为广播无法通过路由器.</p><p>交换机接收到广播会范洪处理, 除了接收端口以外转发到其他端口.</p><p>广播MAC地址为<code>FF-FF-FF-FF-FF-FF</code></p><h4 id="缓解网络拥塞"><a href="#缓解网络拥塞" class="headerlink" title="缓解网络拥塞"></a>缓解网络拥塞</h4><ul><li>高端口密度</li><li>大型帧缓冲区</li><li>端口速度</li><li>快速内部交换</li><li>低的端口成本</li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA-2 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-18-ch07访问控制列表</title>
      <link href="/2019/11/20/CCNA-2/2019-11-18-ch07%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8/"/>
      <url>/2019/11/20/CCNA-2/2019-11-18-ch07%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="访问控制列表-ACL"><a href="#访问控制列表-ACL" class="headerlink" title="访问控制列表(ACL)"></a>访问控制列表(ACL)</h1><h2 id="ACL工作原理"><a href="#ACL工作原理" class="headerlink" title="ACL工作原理"></a>ACL工作原理</h2><h3 id="ACL用途"><a href="#ACL用途" class="headerlink" title="ACL用途"></a>ACL用途</h3><ul><li>限制流量: 例如不允许视频传输</li><li>流量控制: 限制路由更新的传输</li><li>限制网络访问, 提高安全性</li><li>过滤流量: 例如不允许telnet传输</li><li>拒绝网络服务的访问: 例如拒绝用户访问http</li></ul><h3 id="数据包过滤"><a href="#数据包过滤" class="headerlink" title="数据包过滤"></a>数据包过滤</h3><p> 访问控制条目ACE, 由permit和deny构成, 分析传入和传出的数据包, 然后根据特定条件转发或丢弃分析后的数据包 </p><ul><li>标准IPv4 ACL 是在网络接入层生效, 分析数据IP, 在ACE中从上至下比对</li><li>不满足任何一条就不允许传入</li><li>如果匹配到最后都没有满足还是不传入</li></ul><h3 id="入站出站ACL"><a href="#入站出站ACL" class="headerlink" title="入站出站ACL"></a>入站出站ACL</h3><ul><li>每个端口都可以传入/传出流量</li><li>控制传入/传出规则的是出/入站ACL</li></ul><h3 id="通配符掩码"><a href="#通配符掩码" class="headerlink" title="通配符掩码"></a>通配符掩码</h3><ul><li>通配符掩码和IP地址结构相同</li><li>与IP地址做<strong>异或</strong>运算, 即掩码是0的部分会被保留, 1的部分会被舍弃</li><li>保留的部分是要在ACE中比较的部分</li></ul><h4 id="常用的例子"><a href="#常用的例子" class="headerlink" title="常用的例子"></a>常用的例子</h4><ul><li><p>要比较每一位IP地址</p><pre><code>IP=192.168.1.1掩码=0.0.0.0或者掩码=host 192.168.1.1</code></pre></li><li><p>允许所有IP</p><pre><code>掩码=0.0.0.0 255.255.255.255或掩码=any</code></pre></li></ul><ul><li><p>比较前24位, 禁止192.168.1.1/24网段的</p><pre><code>掩码=0.0.0.255</code></pre></li><li><p>允许/拒绝某个网段的IP访问,<code>通配符掩码=255.255.255.255-子网掩码</code></p></li></ul><h3 id="ACL创建规则"><a href="#ACL创建规则" class="headerlink" title="ACL创建规则"></a>ACL创建规则</h3><ul><li>指导规则<ul><li>内网和外网交界处使用ACL</li><li>网络两个部分交界处</li><li>网络边界的路由器</li><li>边界路由器不同的网络协议</li></ul></li><li>为每种协议, 每个方向, 每个接口配置ACL</li></ul><h3 id="ACL放置原则"><a href="#ACL放置原则" class="headerlink" title="ACL放置原则"></a>ACL放置原则</h3><ul><li>扩展ACL,  放置在尽可能靠近需要过滤的流量源的位置上, 这样, 减少网络流量.</li><li>标准ACL, 不会指定目标地址, 要靠近目标</li></ul><h2 id="标准IPv4ACL"><a href="#标准IPv4ACL" class="headerlink" title="标准IPv4ACL"></a>标准IPv4ACL</h2><h3 id="修改ACL"><a href="#修改ACL" class="headerlink" title="修改ACL"></a>修改ACL</h3><ul><li><p>直接编辑</p><pre><code>  no access-list 1  access-list 1 deny host 192.168.10.10  access-list 1 permit 192.168.0.0 0.0.255.255</code></pre></li><li><p>使用序号</p><pre><code>show access-lists 1conf tip access-list standard 1no 10 // 删除编号为10的ACL语句10 deny host 192.168.10.10end</code></pre></li><li><p>将ACL添加到端口</p><pre><code>inter g0/0no ip access-group 20 in // 删除ACLip access-group 10 in // 添加access-list 10 到入站口</code></pre></li></ul><h3 id="验证ACL"><a href="#验证ACL" class="headerlink" title="验证ACL"></a>验证ACL</h3><pre><code>show ip inter show access-listsshow running-config | include access-list 1</code></pre><ul><li><code>show access-lists</code>会显示统计匹配到的数据包的数量, 使用<code>clear access-list counters</code>删除统计</li></ul><h3 id="限制远程接入"><a href="#限制远程接入" class="headerlink" title="限制远程接入"></a>限制远程接入</h3><p>在vty上配置ACL</p><pre><code>line vty 0 4login localtransport input sshaccess-class 21 in // 限制传入exitaccess-list 21 permit host 192.168.10.2access-list 21 deny any</code></pre><h2 id="排除ACL故障"><a href="#排除ACL故障" class="headerlink" title="排除ACL故障"></a>排除ACL故障</h2><h3 id="使用ACL处理数据包"><a href="#使用ACL处理数据包" class="headerlink" title="使用ACL处理数据包"></a>使用ACL处理数据包</h3><ul><li><p>ACE写的顺序要从小范围到大范围, 以防先匹配大范围忽略特定IP. 思科路由器会自动排序.</p></li><li><p>路由器接到数据处理流程</p><ul><li>检查MAC地址</li><li>匹配入站ACL</li><li>匹配出站ACL</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA-2 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-09-28-ch05以太网</title>
      <link href="/2019/11/20/CCNA-1/2019-09-28-ch05%E4%BB%A5%E5%A4%AA%E7%BD%91/"/>
      <url>/2019/11/20/CCNA-1/2019-09-28-ch05%E4%BB%A5%E5%A4%AA%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h1><p>思乐公司发明, 最流行的LAN技术. 以太网协议定义了网络通信的很多方面: </p><ul><li>帧格式</li><li>帧大小</li><li>时序</li><li>编码</li></ul><h2 id="以太网协议"><a href="#以太网协议" class="headerlink" title="以太网协议"></a>以太网协议</h2><h3 id="以太网帧"><a href="#以太网帧" class="headerlink" title="以太网帧"></a>以太网帧</h3><ul><li><p>以太网封装</p><ul><li>最大支持100Gb/s的带宽, 定义二层协议和一层技术.</li><li>LLC子层, 获取网络协议数据(IPv4数据包)加入控制信息, 帮助数据包传送到目的节点. 可将其视为网卡的驱动程序. </li><li>MAC子层, 由硬件(计算机网卡)实施. </li></ul></li><li><p>MAC子层</p><ul><li><p>职责为:</p><ul><li>数据封装</li><li>介质访问控制</li></ul></li><li><p>数据封装: 发送前-组装帧, 收到帧-解析帧. 构建帧时向网络层PDU添加帧头帧尾</p><ul><li>帧定界: 标识组成帧的一组位,  这些定界位会对发送节点与接收节点进行同步.</li><li>编制:  封装过程包含第 3 层 PDU, 还提供数据链路层编址. </li><li>错误检测: 由帧尾负责</li></ul></li><li><p>介质访问控制: 把帧放入介质中, 或从介质中移除帧. 控制对介质的访问. 直接与物理层沟通. </p></li><li><p>以太网帧结构</p><p><img src="/2019/11/20/CCNA-1/2019-09-28-ch05%E4%BB%A5%E5%A4%AA%E7%BD%91/1570880643982.png" alt="1570880643982"></p><p>ethernet II 是TCP/IP网络中使用的以太网帧格式.</p></li></ul></li><li><p>以太网帧字段</p><ul><li>帧字段构成<ul><li>前导码: 7个字节+起始帧分界符(SFD)1个字节=8个字节. 通知对方准备接收帧, 并同步发送和接收设备.</li><li>目的MAC地址: 6个字节</li><li>源MAC地址: 6个字节</li><li>EtherType: 2个字节, 以太网帧的上层协议(IPv4, IPv6, ARP等)</li><li>数据字段, 46-1500个字节, 三层PDU. </li><li>FCS: 帧校验序列, 4个字节, 使用冗余循环检验(CRC), 发送帧包含CRC结果, 接收方计算CRC, 两者一致说明没有错误. </li></ul></li><li>最小64字节, 最大1518字节, 否则被丢弃.</li></ul></li></ul><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><ul><li>48位, 12个16进制数, 每块网卡都有一个MAC地址. 刻录在网卡的ROM中, 不可更改. </li><li>前三个字节是厂商编码: OUI, 组织唯一标识符, 接着三个字节由厂商分配. 思科OUI是00-60-2F</li><li>单播MAC地址: 单播通讯必须指定对方设备的MAC地址, 只处理符合自己MAC地址的信息. </li><li>多播: MAC地址为FF-FF-FF-FF-FF-FF</li><li>IPv4 组播地址的范围为 224.0.0.0 到 239.255.255.255,  IPv6 组播地址的范围以 FF00::/8 开头.  与 IPv4 组播地址关联的组播 MAC 地址是以 01-00-5E 开头,  其余部分通过将 IP 组播组地址的低 23 位换算成 6 个十六进制字符而创建. IPv6组播地址以33-33开头. </li><li>使用短横<code>-</code>, 冒号<code>:</code>或句点<code>.</code>来分割</li></ul><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><ul><li>二层设备, 只根据MAC地址做转发. </li><li>MAC地址表, 可编制内存(CAM)表, 在接受到端口1的信息, 包括源MAC和目标MAC, CAM记录这个端口对应的MAC地址, 然后给除了来源以外的端口群发信息(flood out, 泛洪), 4端口收到信息然后回复, CAM记录4端口对应的MAC地址. <ul><li>一个端口可以对应多个MAC地址, 一个MAC地址只能出现在一个端口.</li></ul></li></ul><h3 id="交换机转发"><a href="#交换机转发" class="headerlink" title="交换机转发"></a>交换机转发</h3><ul><li><p>存储转发: 存储整个帧道缓冲区, CRC校验完毕, 转发</p></li><li><p>直通: 收到数据包立刻转发. 不做错误检查. </p><ul><li>快速转发交换: 读取到MAC立刻转发. 延时指 收到第一个位到传出第一个位之间的时间差 .</li><li>免分片交换, 交换机检验数据前64个字节, 没有错误之后, 全部转发.</li></ul></li><li><p>内存缓冲: 转发帧之前存储帧, 当端口拥塞是, 可以一直存储帧到可以传送该帧.</p><ul><li>基于端口的内存缓冲, 缓存到传入-传出端口的队列中, 只有前面的帧都成功传送之后才会传送. </li><li>共享内存缓冲, 一个公共的缓冲区,  这可以使更多带宽专用于特定端口, 例如连接到服务器的端口. </li></ul></li><li><p>双工和速度设置:  交换机端口和连接的设备的双工设置和带宽设置必须匹配. 自动协调功能会自动选择高性能模式</p></li><li><p>Auto-MDIX: 自动介质相关接口交叉, 不用分别直通或者交叉电缆. 默认启用.</p></li></ul><h2 id="地址解析协议"><a href="#地址解析协议" class="headerlink" title="地址解析协议"></a>地址解析协议</h2><h3 id="MAC和IP"><a href="#MAC和IP" class="headerlink" title="MAC和IP"></a>MAC和IP</h3><ul><li><p>MAC地址, 物理地址. 以太网网卡的通信</p></li><li><p>IP地址, 逻辑地址.</p></li><li><p>前往远程网络:</p><ul><li>目的MAC地址位默认网关的地址</li><li>路由器收到帧, 根据IPv4的地址, 确定转发路径</li><li>负责转发的路由器收到帧, 根据IP地址确定下一跳的设备, 目的MAC地址修改为下一跳的MAC地址.</li></ul></li></ul><h3 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h3><ul><li><p>IP和MAC的映射</p></li><li><p>ARP请求包括目标IP, 源MAC. 使用<code>arp -a</code>(windows)来查看MAC地址表. 两分钟没有使用的MAC地址会被删掉. 静态MAC地址是有特殊用途的, 不会被删除. </p></li><li><p>如果数据包的目的 IPv4 地址与源 IPv4 地址处于同一个网络, 则设备会在 ARP 表中搜索目的 IPv4 地址.</p></li></ul><ul><li>如果目的 IPv4 地址与源 IPv4 地址不在同一个网络中, 则设备会在 ARP 表中搜索默认网关的 IPv4 地址.</li><li>ARP表的每一行绑定一个IPv4和MAC地址, 如果没有映射, 就发出ARP请求.</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA-1 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-10-26-ch07IP寻址</title>
      <link href="/2019/11/20/CCNA-1/2019-10-26-ch07IP%E5%AF%BB%E5%9D%80/"/>
      <url>/2019/11/20/CCNA-1/2019-10-26-ch07IP%E5%AF%BB%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="IP编址"><a href="#IP编址" class="headerlink" title="IP编址"></a>IP编址</h1><h2 id="IPv4网络地址"><a href="#IPv4网络地址" class="headerlink" title="IPv4网络地址"></a>IPv4网络地址</h2><h3 id="IPv4地址结构"><a href="#IPv4地址结构" class="headerlink" title="IPv4地址结构"></a>IPv4地址结构</h3><ul><li>包括网络部分和主机部分, 标识网络和主机</li><li>子网掩码: IP地址和子网掩码做与运算, 如果结果相同, 则表示为在同一个子网下.</li><li>非标准子网掩码: 用1的个数标识子网掩码: /27标识子网掩码前27位是1, 后面5位是0. 用IP地址+斜杠标识: <code>192.168.0.250/27</code>, 长度越大, 子网网段内地址越少. </li><li>主机位全为1的地址是广播地址, 全为0是网段地址</li></ul><h3 id="IPv4单播-组播-广播"><a href="#IPv4单播-组播-广播" class="headerlink" title="IPv4单播, 组播, 广播"></a>IPv4单播, 组播, 广播</h3><ul><li><p>特殊用途的地址段</p><ul><li>组播地址<ul><li>224.0.0.0-239.255.255.255: 用于组播</li><li>224.0.0.0-224.0.0.255: 用于本地组播</li><li>224.0.0.9: 用于RIP通讯</li></ul></li><li>私有地址<ul><li>10.0.0.0/8</li><li>172.16.0.0/12, 即172.16.0.0-172.31.255.255</li><li>192.168.0.0/16</li></ul></li><li>特殊地址<ul><li>127.0.0.0/8, 用于测试IPv4协议栈</li><li>169.254.0.0/16, 如果主机ip地址为此, 说明ip地址配置错误/没有dhcp服务器. 这个地址仅能用于内网通讯</li></ul></li></ul></li><li><p>有类编制, 目前已不采用, 用统一组织分配IP地址. 目前IPv4地址已耗尽</p><ul><li>A类: 0.0.0.0/8 – 127.0.0.0/8</li><li>B类128.0.0.0 /16 – 191.255.0.0 /16</li><li>C类192.0.0.0 /24 – 223.255.255.0 /24</li></ul></li></ul><h2 id="IPv6网络地址"><a href="#IPv6网络地址" class="headerlink" title="IPv6网络地址"></a>IPv6网络地址</h2><h3 id="IPv4和IPv6共存"><a href="#IPv4和IPv6共存" class="headerlink" title="IPv4和IPv6共存"></a>IPv4和IPv6共存</h3><ul><li>双堆栈: 同时有IPv4和v6协议栈</li><li>隧道: 让IPv6协议通过IPv4网络</li><li>转换: IPv6地址转化为IPv4</li></ul><h3 id="IPv6编址"><a href="#IPv6编址" class="headerlink" title="IPv6编址"></a>IPv6编址</h3><ul><li>128位2进制编码, 用8组*4位16进制编码, 用冒号分隔.</li><li>简写方式<ul><li>每个段由4个16进制构成, 可以忽略开头的0, 如果一个段全为0, 至少写1个0. </li><li>可以使用<strong>一次</strong>双冒号来省略全是0的段落. </li></ul></li><li>前64位是前缀(网络地址), 后64位是接口id(主机地址)</li></ul><h3 id="IPv6地址类型"><a href="#IPv6地址类型" class="headerlink" title="IPv6地址类型"></a>IPv6地址类型</h3><ul><li>单播: 唯一标记一个支持IPv6的<strong>接口</strong></li><li>组播: 把单个IPv6数据包发送到各个目的地<ul><li>全节点组播地址: 相当于广播</li></ul></li><li>任播: 可以分配到多个设备, 任播地址的数据包会送到最近拥有该地址的路由.</li><li>前缀(网络部分)64位, 接口(主机部分)64位.</li></ul><h3 id="IPv6单播地址"><a href="#IPv6单播地址" class="headerlink" title="IPv6单播地址"></a>IPv6单播地址</h3><p>用来唯一标识支持IPv6的设备的接口, 源地址必须是单播地址, 目的地址可以是组播或单播地址.</p><ul><li>全局单播(GUA): 公共地址, 前16位从2000到3FFF, 第一位是2或3. 前缀48位+16位子网id+最后64位是接口ID. </li><li>本地链路: 子网 <strong>FE80::/10</strong> , 在同一个链路(子网)上通信. 全局单播不是必须的, 但是必须要有本地链路地址. 如果没有手动配置, 且没有dhcp, 设备会自动创建本地链路地址. FE80::/10表示范围是<code>1111 1110 10xx xxxx</code>, 即从<code>1111 1110 1000 0000</code>, 到<code>1111 1110 1011 1111</code></li><li>唯一本地: FC00::/7-FDFF::/7, 唯一本地地址用于一个站点内或数量有限的站点之间的本地编址</li><li>环回: ::1/128</li></ul><h3 id="静态配置"><a href="#静态配置" class="headerlink" title="静态配置"></a>静态配置</h3><pre><code>enconf tinter g0/0ipv6 addr ...</code></pre><h3 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h3><ul><li><p>SLAAC, 无状态地址自动配置, 无需使用DHCPv6服务器, 根据本地路由器的 ICMPv6 路由器通告 (RA) 消息获取必要信息</p><ul><li><p>RA消息</p><p>IPv6 路由器每 200 秒定期将 ICMPv6 RA 消息发送到网络上所有支持 IPv6 的设备. 在响应发送 ICMPv6 路由器请求 (RS) 消息的主机时, 也会发送 RA 消息</p></li><li><p>RA内容</p><ul><li>网络前缀与前缀长度</li><li>RA消息的源IPv6地址作为默认网关的IPv6本地链路地址</li><li>DNS地址和域名</li></ul></li><li><p>RA选项</p><ul><li><p>仅SLAAC, </p><p>RA内容包含前缀, 前缀长度, 默认网关</p></li><li><p>SLAAC和无状态DHCPv6</p><p>RA内容包含前缀, 前缀长度, 默认网关, 从DHCP服务器获得域名等其他信息</p></li><li><p>有状态DHCPv6</p><p>RA只发送默认网关,  全局单播地址, DNS 服务器地址,域名和所有其他信息从DHCP服务器获得</p></li></ul></li><li><p>客户端接收到前缀之后使用EUI-64或随机64位作为接口ID</p></li></ul></li><li><p>SLAAC和无状态DHCP</p></li><li><p>RA选项为SLAAC和无状态DHCPv6</p></li><li><p>有状态DHCP</p><ul><li>RA选项为SLAAC和有状态DHCP</li></ul></li></ul><h3 id="静态配置-1"><a href="#静态配置-1" class="headerlink" title="静态配置"></a>静态配置</h3><pre><code>ipv6 addr fe80::1 link-local</code></pre><h3 id="检验IPv6配置"><a href="#检验IPv6配置" class="headerlink" title="检验IPv6配置"></a>检验IPv6配置</h3><pre><code>show ipv6 interface brief</code></pre><h3 id="IPv6-组播地址"><a href="#IPv6-组播地址" class="headerlink" title="IPv6 组播地址"></a>IPv6 组播地址</h3><ul><li><p>分配的组播: 为预先定义的设备组保留的组播地址. 有两种目的IPv6地址, 为: </p><ul><li>FF02::1 全节点组播, 发送到所有支持IPv6的设备组</li><li>FF02::1 全路由组播组, 路由器会转发组播消息到所有支持IPv6设备</li></ul></li><li><p>请求节点IPv6组播地址</p><ul><li>被映射到特殊的以太网组播地址 , 以太网网卡可以过滤帧</li></ul></li></ul><h2 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h2><h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><ul><li>主机确认: 确定主机是否正常</li><li>目标或服务不可达<ul><li>0-网络不可达</li><li>1-主机不可达</li><li>2-协议</li><li>3-端口</li></ul></li><li>超时</li></ul><h3 id="ICMPv6的新功能"><a href="#ICMPv6的新功能" class="headerlink" title="ICMPv6的新功能"></a>ICMPv6的新功能</h3><ul><li>地址解析: 使用NS(邻居查询)获得周围设备的MAC地址</li><li>重复地址检测(DAD): 检测是否是唯一的地址(不必须), 即NA(邻居通告)</li><li>还有请求IPv6地址的RA和RS</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="Ping-测试本地协议栈"><a href="#Ping-测试本地协议栈" class="headerlink" title="Ping, 测试本地协议栈"></a>Ping, 测试本地协议栈</h3><p>ping 127.0.0.1</p><p>ping ::1 </p><h3 id="Traceroute-测试路径"><a href="#Traceroute-测试路径" class="headerlink" title="Traceroute, 测试路径"></a>Traceroute, 测试路径</h3><p>提供每一跳的往返时间(让TTL从1开始增大, 测得通过每一个路由器往返时间)</p><p>IPv4用TTL限制跳数, IPv6用跳数限制限制跳数</p>]]></content>
      
      
      <categories>
          
          <category> CCNA-1 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-10-13-ch06网络层</title>
      <link href="/2019/11/20/CCNA-1/2019-10-13-ch06%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>/2019/11/20/CCNA-1/2019-10-13-ch06%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="网络层协议"><a href="#网络层协议" class="headerlink" title="网络层协议"></a>网络层协议</h2><h3 id="IP协议特征"><a href="#IP协议特征" class="headerlink" title="IP协议特征"></a>IP协议特征</h3><ul><li>封装, 添加报头, 路由至目的设备</li><li>无连接<ul><li>发送方不确定对方是否在侦听, 或者消息是否准时</li><li>接收方不知道数据到达</li></ul></li><li>尽力交付, 不保证送达</li><li>和传输介质无关</li></ul><h3 id="报头"><a href="#报头" class="headerlink" title="报头"></a>报头</h3><p><img src="/2019/11/20/CCNA-1/2019-10-13-ch06%E7%BD%91%E7%BB%9C%E5%B1%82/1570941840854.png" alt="1570941840854"></p><h3 id="IPv6数据包"><a href="#IPv6数据包" class="headerlink" title="IPv6数据包"></a>IPv6数据包</h3><p><img src="/2019/11/20/CCNA-1/2019-10-13-ch06%E7%BD%91%E7%BB%9C%E5%B1%82/1570942561869.png" alt="1570942561869"></p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="主机路由方式"><a href="#主机路由方式" class="headerlink" title="主机路由方式"></a>主机路由方式</h3><ul><li><p>转发决策</p><ul><li>三种目的地: 自己, LAN中主机, 远程主机<ul><li>自己: ping 127.0.0.1. 对环回接口执行 ping 操作可以测试主机上的 TCP/IP 协议堆栈.</li><li>本地主机: 一般交换机即可完成作业, 目前路由器都集成了交换机功能. 不需要经过默认网关</li></ul></li></ul></li><li><p>默认网关</p><ul><li>对于终端电脑, 要与远程主机通信, 就要把信息发到默认网关, 网关转发(称为路由). </li><li>拥有一个本地ip, 一个公网ip</li><li>可以转发数据</li></ul></li><li><p>主机路由表包括默认网关, 主机通过动态主机配置协议 (DHCP) 动态接收默认网关 IPv4 地址或手动配置 </p></li></ul><h3 id="路由器路由表"><a href="#路由器路由表" class="headerlink" title="路由器路由表"></a>路由器路由表</h3><ul><li><code>route print</code>, 查看路由器信息</li></ul><p><img src="/2019/11/20/CCNA-1/2019-10-13-ch06%E7%BD%91%E7%BB%9C%E5%B1%82/1571281834545.png" alt="1571281834545"></p><ul><li>路由器上的路由表</li></ul><p><img src="/2019/11/20/CCNA-1/2019-10-13-ch06%E7%BD%91%E7%BB%9C%E5%B1%82/1571446121743.png" alt="1571446121743"></p><ul><li>内容分析</li></ul><p><img src="/2019/11/20/CCNA-1/2019-10-13-ch06%E7%BD%91%E7%BB%9C%E5%B1%82/1571446144624.png" alt="1571446144624"></p><ul><li><p>C: 直连</p></li><li><p>L: 本地</p></li><li><p>目的网络<code>192.168.10.0/24</code>是一个子网, <code>192.168.10.1/32</code>是子网内路由器的地址</p></li><li><p><code>GigabitEthernet0/0</code>: 数据包到目的地从这个接口出去</p></li><li><p><img src="/2019/11/20/CCNA-1/2019-10-13-ch06%E7%BD%91%E7%BB%9C%E5%B1%82/1571446313359.png" alt="1571446313359"></p><ul><li>D/S/O: 路由来源, 确定路由器如何获得网络<ul><li>D: 增强型内部网关路由选择协议(EIGRP)</li><li>S: 静态路由</li><li>O: 开放最短路径优先(OSPF)</li></ul></li><li><code>10.1.1.0/24</code>: 确定目的网络</li><li><code>90</code>: 路由来源的管理距离, 越低越好</li><li><code>2170112</code>: 衡量路由好坏的参数, 越低越好</li><li><code>209.165.200.226</code>: 下一跳路由器的地址</li><li><code>00:00:05</code>: 路由最后一次侦听时间</li><li><code>Serial0/0/0</code>: 数据包传出接口</li></ul></li><li><p><img src="/2019/11/20/CCNA-1/2019-10-13-ch06%E7%BD%91%E7%BB%9C%E5%B1%82/1571447057488.png" alt="1571447057488"></p></li><li></li></ul><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><h3 id="路由器的特点"><a href="#路由器的特点" class="headerlink" title="路由器的特点"></a>路由器的特点</h3><ul><li><p>路由器是电脑. 用户配置放到NVRAM中, 操作系统在FLASH中, 有RAM, 主板, CPU等.</p></li><li><p>有不同级别的路由器, 包括民用的继承多业务路由器(ISR), 大企业的多业务路由器(ASR), 服务提供商的路由器.</p></li><li><p>路由器存储器</p><p><img src="/2019/11/20/CCNA-1/2019-10-13-ch06%E7%BD%91%E7%BB%9C%E5%B1%82/1571447559605.png" alt="1571447559605"></p><p><img src="/2019/11/20/CCNA-1/2019-10-13-ch06%E7%BD%91%E7%BB%9C%E5%B1%82/1571447979345.png" alt="1571447979345"></p><p><img src="/2019/11/20/CCNA-1/2019-10-13-ch06%E7%BD%91%E7%BB%9C%E5%B1%82/1571448861432.png" alt="1571448861432"></p></li><li><p>启动IOS</p><p><img src="/2019/11/20/CCNA-1/2019-10-13-ch06%E7%BD%91%E7%BB%9C%E5%B1%82/1571449205683.png" alt="1571449205683"></p></li></ul><h2 id="配置路由器"><a href="#配置路由器" class="headerlink" title="配置路由器"></a>配置路由器</h2><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><ul><li><p>交换机 | 路由器</p><p>基本配置配置单</p><pre><code>配置设备名称    hostname 名称保护用户模式    line console 0    password 口令    login保护远程 Telnet / SSH 访问    line vty 0 15    password 口令    login保护特权模式    enable secret 口令保护配置文件中的所有密码    service password-encryption提供约定通知    banner motd delimiter message delimiter配置管理 SVI    interface vlan 1    ip address ip-address subnet-mask    no shutdown</code></pre><p>操作</p><pre><code>Switch&gt; enableSwitch# configure terminalSwitch(config)# hostname S1S1(config)# enable secret classS1(config)# line console 0S1(config-line)# password ciscoS1(config-line)# loginS1(config-line)# line vty 0 15S1(config-line)# password ciscoS1(config-line)# loginS1(config-line)# exitS1(config)# service password-encryptionS1(config)# banner motd #No unauthorized access allowed!#S1(config)# interface vlan1S1(config-if)# ip address 192.168.10.50 255.255.255.0S1(config-if)# no shutdownS1(config-if)# endS1# copy running-config startup-configDestination filename [startup-config]?Building configuration...[OK]</code></pre></li><li><p>给交换机配置默认网关</p><pre><code>S1(config)# ip default-gateway 192.168.10.1</code></pre></li></ul><ul><li><p>路由器</p><p>给端口配置IP地址</p><pre><code>R1# conf tEnter configuration commands, one per line.End with CNTL/Z.R1(config)#R1(config)# interface gigabitethernet 0/0R1(config-if)# ip address 192.168.10.1 255.255.255.0R1(config-if)# description Link to LAN-10R1(config-if)# no shutdown%LINK-5-CHANGED: Interface GigabitEthernet0/0,changed state to up%LINEPROTO-5-UPDOWN: Line protocol on InterfaceGigabitEthernet0/0,changed state to upR1(config-if)#exitR1(config)#int g0/1R1(config-if)#ip add 192.168.11.1 255.255.255.0R1(config-if)#des Link to LAN-11R1(config-if)#no shut</code></pre><p>检验配置</p><pre><code>R1# show ip interface briefR1# ping 209.165.200.226R1# show ip brief</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA-1 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-02-ch08划分子网</title>
      <link href="/2019/11/20/CCNA-1/2019-11-02-ch08%E5%88%92%E5%88%86%E5%AD%90%E7%BD%91/"/>
      <url>/2019/11/20/CCNA-1/2019-11-02-ch08%E5%88%92%E5%88%86%E5%AD%90%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="对IP网络划分子网"><a href="#对IP网络划分子网" class="headerlink" title="对IP网络划分子网"></a>对IP网络划分子网</h1><h2 id="对IPv4网络划分子网"><a href="#对IPv4网络划分子网" class="headerlink" title="对IPv4网络划分子网"></a>对IPv4网络划分子网</h2><h3 id="网络分段"><a href="#网络分段" class="headerlink" title="网络分段"></a>网络分段</h3><h4 id="广播域"><a href="#广播域" class="headerlink" title="广播域"></a>广播域</h4><ul><li>广播可以用来发现其他设备的ip地址, 或者通过dhcp获取ipv4地址</li><li>交换机将广播转发到除接收端外所有接口(<strong>泛洪</strong>)</li><li>路由器<strong>隔离</strong>广播, 广播能到达的区域称为广播域</li></ul><h4 id="广播域过大"><a href="#广播域过大" class="headerlink" title="广播域过大"></a>广播域过大</h4><ul><li>网络流量大, 效率低下</li><li>设备处理过多广播</li><li>划分子网, 避免广播域过大</li></ul><h4 id="子网划分的情况"><a href="#子网划分的情况" class="headerlink" title="子网划分的情况"></a>子网划分的情况</h4><ul><li>按照地理位置划分</li><li>按照设备类型</li><li>按照组织单位</li></ul><h4 id="八位组边界"><a href="#八位组边界" class="headerlink" title="八位组边界"></a>八位组边界</h4><ul><li>前缀长度为8/16/24/</li><li>网络部分不能变, 从主机部分”借”位数组成子网, 剩下的是子网里面的主机</li><li>例如, 主机部分24位, 借8位做子网, 那就有256个子网, 剩下16位, 就有2^16-2个主机</li><li>表示为<code>x.x.x.x/16</code></li></ul><h4 id="无类子网划分"><a href="#无类子网划分" class="headerlink" title="无类子网划分"></a>无类子网划分</h4><ul><li><p>/n, 表示前n个是网络+子网地址, 后32-n个是主机地址</p></li><li><p>从/24的网络借1位, 能划出两个子网, 范围是0-127, 128-255. 借两位, 就是四个子网, 从0-63, 64-127, …</p></li><li><p>借用n位, 子网有2^n个, 网络内主机有2^(x-n)个, x是子网+主机的总长. </p></li></ul><h3 id="可变长子网掩码"><a href="#可变长子网掩码" class="headerlink" title="可变长子网掩码"></a>可变长子网掩码</h3><ul><li>从需求最大的子网开始划分, 知道最小的子网</li><li>通过对子网再划分子网</li></ul><h3 id="对路由器和交换机设置子网"><a href="#对路由器和交换机设置子网" class="headerlink" title="对路由器和交换机设置子网"></a>对路由器和交换机设置子网</h3><ol><li><p>基础设置</p><pre><code>enconf thostname banner motd &#39;&#39;enable secret ciscoline console 0 pass classloginline vty 0 15pass classloginexit</code></pre></li><li><p>配置ip地址</p><ul><li><p>首先需要通过路由表确定端口连接的是哪个子网</p><pre><code>show ip routeshow ipv6 route</code></pre></li><li><p>配置ip地址和子网掩码</p><pre><code>inter g0/0ip addr 192.168.100.64 255.255.255.224 // 根据实际情况确定// 子网掩码不可以用前缀缩写</code></pre></li><li><p>如果是交换机, 配置vlan端口地址</p><pre><code>interface vlan 1ip addr ...</code></pre></li><li><p>设置默认网关</p><pre><code>(config terminal)ip default-gateway 192...</code></pre></li></ul></li></ol><h2 id="对IPv6网络设计子网"><a href="#对IPv6网络设计子网" class="headerlink" title="对IPv6网络设计子网"></a>对IPv6网络设计子网</h2><h3 id="IPv6全局单播地址"><a href="#IPv6全局单播地址" class="headerlink" title="IPv6全局单播地址"></a>IPv6全局单播地址</h3><p><img src="/2019/11/20/CCNA-1/2019-11-02-ch08%E5%88%92%E5%88%86%E5%AD%90%E7%BD%91/1572763720767.png" alt="1572763720767"></p><ul><li>全局路由前缀: 供应商分配的地址, 48位</li><li>子网ID: 用来确定子网, 16位, 可以创建2^16个子网</li><li>接口ID: 主机部分.</li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA-1 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-03-ch09传输层</title>
      <link href="/2019/11/20/CCNA-1/2019-11-03-ch09%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
      <url>/2019/11/20/CCNA-1/2019-11-03-ch09%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><h2 id="传输层协议"><a href="#传输层协议" class="headerlink" title="传输层协议"></a>传输层协议</h2><h3 id="传输层原理"><a href="#传输层原理" class="headerlink" title="传输层原理"></a>传输层原理</h3><ul><li>传输层负责在应用之间建立临时会话和传输数据. 从源主机的某程序生成数据传输到目标主机. </li><li>会话: 源程序和目的程序传输的每个数据集称为一个会话</li><li>传输层负责跟踪会话, 把数据段切块加上报头, 重组数据段, 用端口号标识应用程序</li><li>多路复用: 把数据切成很小的块, 交替传输, 避免一个很大的块占用带宽</li><li>TCP: 传输控制协议,  可靠且功能齐全,  确保所有数据到达目的设备, 报头复杂, 延迟高. 数据包需要确认收到, 没有确认, 会重发</li><li>UDP: 用户数据报协议, 对可靠性要求不高的传输, 精简. </li></ul><h3 id="TCP功能"><a href="#TCP功能" class="headerlink" title="TCP功能"></a>TCP功能</h3><ul><li>建立会话:  在源设备和目的设备之间协商并建立永久连接(或会话), 协商转发流量, 通信数据得到管理. </li><li>可靠传输: 丢失补发</li><li>同序船速: 用序列号编排数据段</li><li>流量控制: 接收方处理能力有限的时候, 会请求原应用程序降低数据流速</li></ul><h4 id="TCP报头"><a href="#TCP报头" class="headerlink" title="TCP报头"></a>TCP报头</h4><p><img src="/2019/11/20/CCNA-1/2019-11-03-ch09%E4%BC%A0%E8%BE%93%E5%B1%82/1572777711842.png" alt="1572777711842"></p><h3 id="UDP功能"><a href="#UDP功能" class="headerlink" title="UDP功能"></a>UDP功能</h3><ul><li>数据按接收顺序重构</li><li>丢失数据不重传</li><li>不建立会话</li><li>不告知发送方资源可用性的信息</li></ul><h4 id="UDP报头"><a href="#UDP报头" class="headerlink" title="UDP报头"></a>UDP报头</h4><p><img src="/2019/11/20/CCNA-1/2019-11-03-ch09%E4%BC%A0%E8%BE%93%E5%B1%82/1572777792817.png" alt="1572777792817"></p><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>端口号用来表示会话</p><ul><li>源端口号由发送方设备动态生成 </li><li>目的端口常常是固定的<ul><li>POP3–110</li><li>HTTP-80</li><li>IM-531</li></ul></li><li>IP+端口组成了套接字</li><li>一个程序对应一个端口</li></ul><p>端口号分类</p><ul><li>公认端口0-1023, 用于固定的服务</li><li>注册端口1024-49151, 用于用户选择安装的一些应用程序</li><li>动态/私有端口49152-65535,  在开始连接服务时由客户端操作系统动态分配 , 在通信期间识别客户端应用程序</li></ul><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p>查看活跃的TCP连接</p><h2 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h2><h3 id="TCP通信进程"><a href="#TCP通信进程" class="headerlink" title="TCP通信进程"></a>TCP通信进程</h3><p>三次握手的消息都是在TCP报头的控制位中.</p><p><img src="/2019/11/20/CCNA-1/2019-11-03-ch09%E4%BC%A0%E8%BE%93%E5%B1%82/1572778713690.png" alt="1572778713690"></p><p>ACK-确认字段有效, =收到字节数+1</p><p>SYN-同步序列号</p><p>FIN-发送方不再发送数据</p><ul><li><p>建立连接-三次握手</p><ul><li>A发送SYN(SEQ=100, CTL=SYN), B接收SYN, </li><li>B发送SYN(SEQ=300, ACK=101, CTL=SYN&amp;ACK), ACK, A接收SYN, ACK</li><li>建立(SEQ=101, ACK=301, CTL=SYN&amp;ACK)</li></ul></li><li><p>终止会话</p><ul><li>A发送FIN, B接收FIN</li><li>B发送ACK, A接收ACK</li><li>B发送FIN, A接收FIN</li><li>A发送ACK, B接收ACK</li></ul></li></ul><h3 id="TCP可靠性和流量控制"><a href="#TCP可靠性和流量控制" class="headerlink" title="TCP可靠性和流量控制"></a>TCP可靠性和流量控制</h3><ul><li>使用序列号ISN标识数据段先后顺序</li><li>ISN从一个随机的数开始(防止攻击), 发送一个字节增加1, </li><li>窗口表示目的设备一次能处理的字节数, 在三次握手期间确定. 发送数据总大小不能超过窗口. </li><li>滑动窗口<ul><li>A向B发送数据, 假设窗口大小为N. A发送了X个数据(X&lt;N)</li><li>B报告A他已经接收了m个数据</li><li>窗口大小调整为m+N, 这样A就可以多发送m个数据</li><li>这种方式可以保证A发送的数据永远在B处理范围以内</li></ul></li><li>流量控制<ul><li>如果大量丢包, 发送端会减少发送的字节数, 直到收到正常数量的确认信息</li></ul></li></ul><h3 id="UDP低开销和可靠性"><a href="#UDP低开销和可靠性" class="headerlink" title="UDP低开销和可靠性"></a>UDP低开销和可靠性</h3><ul><li>按照接收的顺序重组数据报</li><li>UDP客户端进程从可用端口号动态挑选一个端口, 作为会话的源端口</li></ul><h3 id="使用TCP的应用"><a href="#使用TCP的应用" class="headerlink" title="使用TCP的应用"></a>使用TCP的应用</h3><ul><li>FTP</li><li>SMTP</li><li>HTTP</li><li>Telnet</li></ul><h3 id="使用UDP的应用"><a href="#使用UDP的应用" class="headerlink" title="使用UDP的应用"></a>使用UDP的应用</h3><p>流媒体, 简单的请求和应答, 不必高可靠的应用</p><ul><li>SNTP</li><li>TFTP</li><li>DNS</li><li>DHCP</li><li>VoIP</li><li>IPTV</li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA-1 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-03-ch10应用层</title>
      <link href="/2019/11/20/CCNA-1/2019-11-03-ch10%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2019/11/20/CCNA-1/2019-11-03-ch10%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><h3 id="应用层-表示层-会话层"><a href="#应用层-表示层-会话层" class="headerlink" title="应用层, 表示层, 会话层"></a>应用层, 表示层, 会话层</h3><h4 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h4><p>最接近用户. OSI的应用层, 表示层, 会话层对应了TCP/IP的应用层</p><h4 id="表示层和会话层"><a href="#表示层和会话层" class="headerlink" title="表示层和会话层"></a>表示层和会话层</h4><p>表示层的功能</p><ul><li>数据格式化</li><li>数据压缩</li><li>加密数据</li></ul><p>包括了各种文件标准, MPEG, GIF, JPG, PNG等</p><p>会话层的功能</p><ul><li>创建和维持会话</li><li>重启会话</li></ul><h4 id="TCP-IP应用层"><a href="#TCP-IP应用层" class="headerlink" title="TCP/IP应用层"></a>TCP/IP应用层</h4><p> 指定了许多常见 Internet 通信功能必需的格式和控制信息 </p><p><img src="/2019/11/20/CCNA-1/2019-11-03-ch10%E5%BA%94%E7%94%A8%E5%B1%82/1572788542262.png" alt="1572788542262"></p><h3 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h3><h4 id="客户端-服务器模式"><a href="#客户端-服务器模式" class="headerlink" title="客户端-服务器模式"></a>客户端-服务器模式</h4><p>客户端请求信息, 服务器想要请求</p><h4 id="对等网络"><a href="#对等网络" class="headerlink" title="对等网络"></a>对等网络</h4><p>P2P, 角色在客户端和服务器之间互换</p><h4 id="对等应用程序"><a href="#对等应用程序" class="headerlink" title="对等应用程序"></a>对等应用程序</h4><p>同时充当客户端和服务器的应用程序</p><p>例如即使消息</p><h2 id="常用应用层协议"><a href="#常用应用层协议" class="headerlink" title="常用应用层协议"></a>常用应用层协议</h2><h3 id="web和email"><a href="#web和email" class="headerlink" title="web和email"></a>web和email</h3><h4 id="HTTP和HTTPs"><a href="#HTTP和HTTPs" class="headerlink" title="HTTP和HTTPs"></a>HTTP和HTTPs</h4><p>三种消息类型为get/post/put</p><p>https的数据流通过ssl加密</p><h4 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h4><ul><li><p>SMTP</p><p>邮件有报头和正文, 公认端口25, 客户端把邮件给服务器, 服务器转发邮件. 目标不可达时会尝试重发, 一段时间无法重发会将邮件退回.</p></li><li><p>POP</p><p>检索邮件, 邮件下载到客户端后就从服务器删除. 端口110</p></li><li><p>IMAP</p><p>原始邮件会存在服务器上. 有文件结构, 便于管理. 可以手动删除</p></li></ul><h3 id="IP编址"><a href="#IP编址" class="headerlink" title="IP编址"></a>IP编址</h3><ul><li><p>DNS层级</p><ul><li><a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li><li>域名越往上, 层级越高</li><li>查询IP, 先查.com, 再查baidu.com, 最后查<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li></ul></li><li><p>nslookup, 手动查询dns服务器IP地址</p></li><li><p>动态主机配置协议DHCP, 可以减少配置工作量, 减少错误</p><ul><li>通过广播请求DHCP服务器响应</li><li>服务器回复, 提供IPv4地址, 子网掩码, DNS服务器的IPv4地址和默认网关, 还有地址的使用期限.</li></ul></li></ul><h3 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h3><h4 id="服务器消息块SMB"><a href="#服务器消息块SMB" class="headerlink" title="服务器消息块SMB"></a>服务器消息块SMB</h4><ul><li>功能<ul><li>启动, 身份验证, 终止会话</li><li>控制文件和打印机访问(Windows文件共享, 连接打印机等)</li><li>允许应用程序向任何设备发消息</li></ul></li></ul><h4 id="文件传输协议FTP"><a href="#文件传输协议FTP" class="headerlink" title="文件传输协议FTP"></a>文件传输协议FTP</h4><ul><li>客户端与服务器用21端口建立一个用于控制传输的会话</li><li>用20端口传输数据</li><li>可以上传也可以下载</li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA-1 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-11-03-ch11构建小型网络</title>
      <link href="/2019/11/20/CCNA-1/2019-11-03-ch11%E6%9E%84%E5%BB%BA%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%BB%9C/"/>
      <url>/2019/11/20/CCNA-1/2019-11-03-ch11%E6%9E%84%E5%BB%BA%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="构建小型网络"><a href="#构建小型网络" class="headerlink" title="构建小型网络"></a>构建小型网络</h1><h2 id="网络设计"><a href="#网络设计" class="headerlink" title="网络设计"></a>网络设计</h2><h3 id="小型网络中的设备"><a href="#小型网络中的设备" class="headerlink" title="小型网络中的设备"></a>小型网络中的设备</h3><h4 id="设备选择"><a href="#设备选择" class="headerlink" title="设备选择"></a>设备选择</h4><ul><li>成本: 冗余量, 性能要求，布线费用， 安全技术</li><li>端口: 前瞻性</li><li>扩展性: 模块化设备便于扩展</li><li>操作系统, 网络设备的功能</li></ul><h4 id="冗余"><a href="#冗余" class="headerlink" title="冗余"></a>冗余</h4><p>高可靠性. </p><p>例如: 多个默认网关提供单个互联网出口点</p><h4 id="扩展网络要考虑的要素"><a href="#扩展网络要考虑的要素" class="headerlink" title="扩展网络要考虑的要素"></a>扩展网络要考虑的要素</h4><ul><li><p>网络文档: 物理拓扑和逻辑拓扑</p></li><li><p>设备清单</p></li><li><p>预算</p></li><li><p>流量分析</p><p>捕获高峰期的流量, 了解流量类型</p><p>争夺不同网段捕获流量</p></li></ul><h2 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h2><h3 id="威胁类型"><a href="#威胁类型" class="headerlink" title="威胁类型"></a>威胁类型</h3><ul><li>数据丢失</li><li>DoS</li><li>身份盗窃</li><li>信息盗窃</li></ul><h3 id="物理安全"><a href="#物理安全" class="headerlink" title="物理安全"></a>物理安全</h3><ul><li>硬件威胁: 物理破坏</li><li>环境威胁: 极端环境造成破坏</li><li>电气威胁: 供电问题</li><li>维护威胁: 静电处理缺失/备用件缺失/布线混乱</li></ul><h3 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h3><ul><li>技术漏洞</li><li>配置缺陷</li><li>管理漏洞</li></ul><h3 id="恶意软件"><a href="#恶意软件" class="headerlink" title="恶意软件"></a>恶意软件</h3><ul><li>病毒: 把自身的副本插入另一个程序, 借助其传播. 宿主程序被执行的时候也会执行. 破坏系统.</li><li>蠕虫: 独立软件, 利用网络自主传播</li><li>特洛伊木马: 看起来合法的有害软件. 只通过用户交互传播.</li></ul><h3 id="攻击手段"><a href="#攻击手段" class="headerlink" title="攻击手段"></a>攻击手段</h3><ul><li>侦察攻击: 查询攻击对象在互联网上的信息, 测试IP地址段, 端口扫描, 数据包嗅探</li><li>访问攻击: 密码攻击, 信任利用(通过系统A信任的系统B攻击系统A), 端口重定向, 中间人</li><li>拒绝服务攻击: 耗尽系统资源, 阻止系统服务<ul><li>死亡之ping, 异常的ping数据包</li><li>syn泛洪: 发送大量的syn, 让服务器等待完成三次握手, 正常用户不可访问</li><li>DDoS, 僵尸计算机攻击受害主机</li><li>Smurf, 发送大量ICMP淹没到达受害主机的线路</li></ul></li></ul><h3 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h3><ul><li><p>更新系统</p></li><li><p>身份验证, 授权, 记账(记录行为)</p></li><li><p>防火墙</p><ul><li>数据包过滤: 根据IP或MAC允许或阻止访问</li><li>应用程序过滤: 根据端口号允许或阻止</li><li>URL过滤: 根据URL</li><li>状态包侦测(SPI):  传入数据包必须是对内部主机请求的合法相应, 否则数据包会被拦截</li></ul></li></ul><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><ul><li><p>强密码</p><pre><code>(config)# security passwords min-length // 限制长度(config)# login block-for 120 attempts 3 within 60 // 60s内3次失败将锁定120s</code></pre></li><li><p>SSH</p><pre><code>// 确保路由器有唯一主机名(config)# ip domain-name //配置IP域名(config)# crypto key generate rsa general-keys //生成密钥(config)# username // 创建数据库用户名条目(config)# line vty 0 4(config-line)# login local# transport input sshexit</code></pre><p><img src="/2019/11/20/CCNA-1/2019-11-03-ch11%E6%9E%84%E5%BB%BA%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%BB%9C/1572792063003.png" alt="1572792063003"></p></li></ul><h3 id="基础网络性能"><a href="#基础网络性能" class="headerlink" title="基础网络性能"></a>基础网络性能</h3><pre><code>arp -d * // 清除arp缓存(windows)show cdp neighbours // 发现cdp邻居的信息</code></pre>]]></content>
      
      
      <categories>
          
          <category> CCNA-1 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-09-21-ch02配置网络操作系统</title>
      <link href="/2019/11/20/CCNA-1/2019-09-21-ch02%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/11/20/CCNA-1/2019-09-21-ch02%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="ch2：配置网络操作系统"><a href="#ch2：配置网络操作系统" class="headerlink" title="ch2：配置网络操作系统"></a>ch2：配置网络操作系统</h1><h2 id="思科IOS"><a href="#思科IOS" class="headerlink" title="思科IOS"></a>思科IOS</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>思科的操作系统</li><li>允许用户与设备交互</li><li>RJ45接口：console口，即控制台接口，在控制计算机上打开一个终端CLI进行配置. 使用控制台电缆, 连接主机的串行接口和控制台接口. </li><li>AUX口: 辅助控制口, console口无法使用的时候</li><li>每一个思科系统都有一个IOS</li></ul><h3 id="命令结构"><a href="#命令结构" class="headerlink" title="命令结构"></a>命令结构</h3><ul><li>关键字, 如果不会引起歧义, 可以缩短</li><li>参数</li></ul><h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><ul><li>上下文帮助, 直接输入问号<code>?</code></li></ul><h2 id="基本设备配置"><a href="#基本设备配置" class="headerlink" title="基本设备配置"></a>基本设备配置</h2><h3 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h3><ul><li><p>设备名称: 用来区分设备, 好的设备名能准确表达设备的角色</p><ul><li>大小写敏感</li><li>字母, 数字, 破折号</li></ul></li><li><p>配置主机名</p><pre><code>enableconfig terminalhostname SW-Floor-1no hostname // 把主机名设置为</code></pre></li><li><p>防止不必要的dns查找, 命令输错时, 防止交换机把他们认为是主机名而进行搜索</p><pre><code>// 配置模式下no ip domain-lookup</code></pre></li></ul><h3 id="默认限制对设备配置的访问"><a href="#默认限制对设备配置的访问" class="headerlink" title="默认限制对设备配置的访问"></a>默认限制对设备配置的访问</h3><ul><li><p>使用分层模式对设备设置密码</p><ul><li>密码保护特权exec访问</li><li>密码保护用户exec访问</li><li>密码保护telnet访问</li><li>加密密码+法律通知</li></ul></li><li><p>配置密码</p><ul><li><p>特权exec密码</p><pre><code class="shell">// 用户模式下enableconf terminalenable secret your_password // 设置特权exec的使能加密密码, 密码以密文存储exit // 退出配置模式disable // 退出特权模式enable // 会提示输入密码</code></pre></li><li><p>用户exec密码</p><pre><code>// 配置模式(config)下line console 0 // line console代表线路控制台配置, 0代表第一个(大多只有一个)控制台接口password your_passwordlogin // 启用用户exec访问exit // 回到配置模式</code></pre></li><li><p>虚拟终端(VTY)线路支持设备远程访问, 配置密码</p><pre><code>// 配置模式下line vty 0 15 // 为0-15共16个VTY线路配置密码password your_password login</code></pre></li></ul></li><li><p>加密密码</p><pre><code>// 配置模式下service password-encryption // 加密密码show running-conf // 查看密码是否加密</code></pre></li><li><p>标语</p><pre><code>// 配置模式下banner motd #No unauthorized access allowed# // ## 是分隔符, 是必须的, 分隔符可以任意, 但不能是警告语句中的字符</code></pre></li><li><p>保存配置</p><pre><code>// 特权模式下show running-config // 目前配置show startup-config // 开机配置copy running-config startup-config // 或者 copy run startreload // 重启, 删除为保存的配置erase startup-config // 删除开机配置</code></pre></li><li><p>保存配置到文本文件</p><ul><li>使用<code>show startup-config</code>输出所有配置到屏幕上</li><li>复制配置到文本文件中</li><li>复制文本文件的配置到另一个终端里, 就可以重复这一配置</li></ul></li></ul><h2 id="地址方案"><a href="#地址方案" class="headerlink" title="地址方案"></a>地址方案</h2><h3 id="端口和地址"><a href="#端口和地址" class="headerlink" title="端口和地址"></a>端口和地址</h3><ul><li><p>ip地址</p><ul><li><p>可以分配给物理端口和虚拟接口, 虚拟接口表示设备没有关联任何物理硬件</p></li><li><p>默认网关: 主机将用于远程网络(internet访问)的路由器IP地址</p></li><li><p>子网掩码: 对于ipv4是必要的, 区分地址的网络部分和主机部分</p></li></ul></li><li><p>端口和接口</p><ul><li>接口设备包括: 用户设备接口, 网络设备接口, 电缆</li><li>通信介质要考虑: 传输信号距离, 部署环境, 传输数据量和速度, 材料与成本</li><li>交换机是二层设备, 不要ip地址, 分给思科交换机的ip地址是为了远程连接, 称为svi, 交换机虚拟接口. </li></ul></li></ul><h3 id="配置ip地址"><a href="#配置ip地址" class="headerlink" title="配置ip地址"></a>配置ip地址</h3><ul><li><p>dhcp: dynamic host configuration protocol, 动态主机设置协议, 自动分配ip, 子网掩码, 网关.</p></li><li><p>为思科交换机配置svi</p><pre><code>// 在全局配置下interface vlan 1 // 默认虚拟交换机接口ip address 192.168.1.10 255.255.255.0no shutdown // 激活vlan 1接口exit // 进入使能模式show ip interface brief // 查看ip接口简要信息// 看到vlan 1接口逻辑上是开启的, 物理上关闭, 因为没有设备vlan接入// 将一个以太网电缆从终端上接到交换机的以太网接口show ip interface brief // 这次逻辑上和物理上接口都是up// 如果看到administratively down, 说明忘记设置no shutdown// 在计算机上设置ip和子网掩码// 用命令行ping交换机的接口</code></pre></li><li><p>交换机的ip是绑定到svi而不是物理接口, 因此无论哪个接口, ip地址都是一样的. pc的ip地址就是绑定到以太网</p></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA-1 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-09-21-ch01初识网络</title>
      <link href="/2019/11/20/CCNA-1/2019-09-21-ch01%E5%88%9D%E8%AF%86%E7%BD%91%E7%BB%9C/"/>
      <url>/2019/11/20/CCNA-1/2019-09-21-ch01%E5%88%9D%E8%AF%86%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="ch1：初识网络"><a href="#ch1：初识网络" class="headerlink" title="ch1：初识网络"></a>ch1：初识网络</h1><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul><li><p>局域网、广域网……</p></li><li><p>对等网</p><ul><li>一台机器同时作为服务器，客户端</li><li>适用于小型网络</li></ul></li></ul><h2 id="LAN-WAN和互联网"><a href="#LAN-WAN和互联网" class="headerlink" title="LAN,WAN和互联网"></a>LAN,WAN和互联网</h2><ul><li><p>终端设备：源或目标设备</p></li><li><p>网络介质：无线、电缆……</p></li><li><p>中间网络设备：交换机、路由器</p></li><li><p>网络表示方式：打印机、IP电话、无线连接、路由器</p></li><li><p>拓扑图</p></li><li><p>局域网（LAN）：单一组织管理、局部的、内部设备提供带宽、终端互联</p></li><li><p>广域网：服务提供商管理、局域网互联、费用敏感</p></li><li><p>内部网、互联网</p></li><li><p>互联网访问计数</p><ul><li>ISP：互联网服务提供商</li></ul></li></ul><h2 id="作为平台的网络"><a href="#作为平台的网络" class="headerlink" title="作为平台的网络"></a>作为平台的网络</h2><ul><li>融合网络：在一个网络基础设施上传输所有数据</li><li>可靠性<ul><li>容错能力</li><li>扩展性</li><li>服务质量QoS</li><li>安全</li></ul></li></ul><h2 id="发展趋势"><a href="#发展趋势" class="headerlink" title="发展趋势"></a>发展趋势</h2><ul><li>自带设备BYOD：自己买设备</li><li>在线协作</li></ul><h2 id="家庭网络技术"><a href="#家庭网络技术" class="headerlink" title="家庭网络技术"></a>家庭网络技术</h2><ul><li>电力线网络</li><li>智能家庭</li><li>无线互联网服务提供商（WISP）</li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA-1 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-09-28-ch03网络协议和通信</title>
      <link href="/2019/11/20/CCNA-1/2019-09-28-ch03%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%92%8C%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/11/20/CCNA-1/2019-09-28-ch03%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%92%8C%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="网络协议和通信"><a href="#网络协议和通信" class="headerlink" title="网络协议和通信"></a>网络协议和通信</h1><h2 id="通信规则"><a href="#通信规则" class="headerlink" title="通信规则"></a>通信规则</h2><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ul><li><p>通信要素包括: 消息来源, 目的地址, 通道</p></li><li><p>协议要对以下要求做出说明</p><ul><li>标识发送方, 接收方</li><li>语言和语法</li><li>传递的速度和时间</li><li>证实或确认要求</li></ul></li><li><p>消息编码</p><ul><li>适合介质</li></ul></li><li><p>消息格式与封装</p><ul><li>称为<strong>帧</strong></li><li>目的地址和源主机的地址</li></ul></li><li><p>消息大小</p></li><li><p>消息时序</p><ul><li>访问方法: 消息发送的时间以及发生冲突的响应方式</li><li>流量控制: 信息量和发送速度</li><li>响应超时: 没有及时回复的操作</li></ul></li><li><p>消息传输</p><ul><li>单播: 一对一, 只有一个目的地址</li><li>组播: 一对多, 发送同一条消息到一组主机</li><li>广播: 发送消息到所有主机</li></ul></li></ul><h2 id="网络协议与标准"><a href="#网络协议与标准" class="headerlink" title="网络协议与标准"></a>网络协议与标准</h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ul><li><p>协议簇: 执行某种通信功能所需的一组内在相关协议, 在通讯涉及到的软硬件中实施</p></li><li><p>网络协议</p><ul><li>协议是为了让发送接收方都理解信息。</li><li>消息格式化/结构化</li><li>网络设备与其他网络贡献路径信息</li><li>传送错误信息与系统消息的方式与使劲啊</li><li>网络通道建立和拆除</li></ul></li><li><p>协议交互: 示例: web服务器和客户端</p><ul><li>应用层-HTTP(超文本传输协议)</li><li>传输层-TCP(传输控制协议), TCP将HTTP消息划分为小片段(数据段), 控制消息大小和传输速率</li><li>互联网层-IP(Internet 协议), 从TCP获得格式化数据段, 封装成为数据包, 分配地址, 传送到目标主机</li><li>网络接入层-以太网, 网络访问协议, 包括数据链路上的通信和网络介质中数据的物理传输. 接受来自IP的数据包, 封装称为介质传输的格式</li></ul><p><img src="/2019/11/20/CCNA-1/2019-09-28-ch03%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%92%8C%E9%80%9A%E4%BF%A1/1570074476689.png" alt="1570074476689"></p></li></ul><h3 id="TCP-IP协议簇"><a href="#TCP-IP协议簇" class="headerlink" title="TCP/IP协议簇"></a>TCP/IP协议簇</h3><ul><li>协议分层: 不同厂商专注于自己的层, 层之间的交互方式是固定的. TCP/IP协议簇包括: 应用层-传输层-互联网层-网络接入层.</li><li>TCP/IP协议簇被作为TCP/IP协议栈来实施, 通过网络为应用程序提供给端到端的传送. 以太网协议用于通过 LAN 使用的物理介质传输 IP 数据包</li><li>不同层的常用协议<ul><li>应用层<ul><li>DNS, 域名系统</li><li>DHCP, 动态主机配置协议, 动态分配/回收ip</li><li>SMTP(简单邮件传输协议, 客户端或服务器发送邮件), POP3(邮局协议, 检索和下载邮件), IMAP(Internet 消息访问协议, 访问存储在邮件服务器中的邮件, 维护电子邮件)</li><li>FTP(文件传输协议, 确认传输结果, 可靠, 面向连接), TFTP(简单文件传输协议, 无连接, 五确认, 比FTP占用资源少)</li><li>HTTP, 超文本传输协议</li></ul></li><li>传输层<ul><li>UDP, 用户数据报协议, 不确认数据传输是否成功</li><li>TCP, 确认成功传输, 可靠</li></ul></li><li>互联网层<ul><li>IP, 从传输层接收消息段, 打包为数据包, 数据包在网络上端对端传输.</li><li>NAT, 将私有网络IP地址转化为公有IP地址</li><li>ICMP, Internet控制消息协议, 反馈数据包传输过程中的错误</li><li>OSPF, 开放最短路径优先, 路由协议</li><li>EIGRP, 增强型内部网关路由协议, 综合度量带宽, 延迟, 负载, 可靠性</li></ul></li><li>网络接入层<ul><li>ARP, 地址解析(resolution)协议, 查询局域网IP地址对应的MAC地址</li><li>PPP, 点对点协议</li><li>以太网, 网络接入层的布线标准, 信令标准</li><li>接口驱动程序</li></ul></li></ul></li><li>TCP/IP通信过程, 以HTTP为例<ul><li>HTTP将报头添加到HTML数据前面, 把HTML格式的网页数据传给传输层</li><li>TCP传输层协议管理当个会话</li><li>将IP信息添加到TCP信息前, 形成<strong>IP数据包</strong></li><li>以太网协议添加到IP数据包两端, 形成<strong>数据链路帧</strong></li></ul></li></ul><h3 id="标准组织"><a href="#标准组织" class="headerlink" title="标准组织"></a>标准组织</h3><ul><li>IEEE, 电气电子工程师协会</li><li>ISOC</li><li>TIA, 电信工业协会(网线排列的协议), TIA/EIA协议</li><li>EIA, 美国电子工业协会(网线排列的协议)</li><li>……</li></ul><h3 id="参考模型"><a href="#参考模型" class="headerlink" title="参考模型"></a>参考模型</h3><p><img src="/2019/11/20/CCNA-1/2019-09-28-ch03%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%92%8C%E9%80%9A%E4%BF%A1/1570077783264.png" alt="1570077783264"></p><ul><li>OSI模型, 用层的编号代替名称, 第一层指物理层, 第七层是应用层<ul><li>应用层, 进程通信的协议</li><li>表示层, 规定应用层数据传输的表示方式</li><li>会话层, 为表示层提供组值对话, 管理数据交换的服务</li><li>传输层, 数据分段, 传输, 重组</li><li>网络层, 通过网络交换数据片段</li><li>数据链路层, 通过公共介质交换数据帧</li><li>物理层, 硬件设备, 电气, 功能, 操作方法, 为设备传输提供物理连接</li></ul></li><li>TCP/IP模型<ul><li>应用层, 提供数据, 编码, 会话控制</li><li>传输层, 各种设备通过不同网络通信</li><li>互联网层, 通信最佳路径</li><li>网络接入层, 控制组成网络的硬件设备和介质</li></ul></li></ul><h2 id="网络数据传输"><a href="#网络数据传输" class="headerlink" title="网络数据传输"></a>网络数据传输</h2><h3 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h3><ul><li><p>消息分段</p><ul><li>分段: 消息切割, 方便重传, 避免占用网络过长时间</li><li>多路复用: 指源设备向目标设备发送一个个小片段, 交替发送不同的会话</li></ul></li><li><p>PDU, 协议数据单元, 在不同层有不同的名字</p><ul><li><p>应用层-data, 数据</p></li><li><p>传输层-segment, 数据段, 包含目的和源的端口号</p></li><li><p>网络层-package, 打包, 包含目的和源的网络地址</p></li><li><p>数据链路层-frame, 帧, 物理地址, 包括<strong>一次转发的</strong>网络接口卡(NIC)的物理地址(MAC地址)和接收数据链路帧的NIC的物理地址, 会自动删除上一次转发的地址. </p><p>对于客户端来说, 想访问web服务器, 第一级的目的MAC地址常常是<strong>默认网关</strong></p></li><li><p>物理层-位, 定时和同步</p></li></ul></li><li><p>封装/接触封装</p><ul><li>encapsulation</li></ul></li></ul><h3 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h3><ul><li>网络地址<ul><li>目的和源的物理地址(mac地址, 不可跨区域), 本地网络进行点对点通讯, 在<strong>数据链路层</strong>定义</li><li>目的和源的逻辑地址(逻辑地址, 可跨区), 在<strong>网络层</strong>定义</li><li>目的和源的进程号, 端口号, 在<strong>传输层</strong>定义</li><li>通往特定进程</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA-1 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-09-28-ch04网络访问</title>
      <link href="/2019/11/20/CCNA-1/2019-09-28-ch04%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/"/>
      <url>/2019/11/20/CCNA-1/2019-09-28-ch04%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="网络访问"><a href="#网络访问" class="headerlink" title="网络访问"></a>网络访问</h1><h2 id="物理层协议"><a href="#物理层协议" class="headerlink" title="物理层协议"></a>物理层协议</h2><h3 id="物理层连接"><a href="#物理层连接" class="headerlink" title="物理层连接"></a>物理层连接</h3><ul><li>NIC, 网络接口卡, 以太网网卡用作有线连接</li><li>ISR, 集成多业务路由器， 常用的家用路由器.</li><li>WLAN, 无线网卡</li></ul><h3 id="物理层协议的作用"><a href="#物理层协议的作用" class="headerlink" title="物理层协议的作用"></a>物理层协议的作用</h3><ul><li>从数据链路层接受帧</li><li>把帧编码成电信号, 发送到介质上</li><li>检索信号, 还原为完整的帧, 传送给数据链路层</li></ul><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li><p>物理层管理的功能区</p><ul><li>物理组件: 电子硬件设备, 介质和连接器. 用来传输位信号</li><li>编码: 将数据位流转化为电信号的方法</li><li>信令: 位的表示方法称为信令方法, 规定那种类型的信号代表1, 哪种代表0</li></ul></li><li><p>带宽: 最多能承载的数据能力, 单位时间可以流向目的地的数据量, 单位是bit/s, 常用有Mb/s, 或Mbps</p></li><li><p>吞吐量: 给定时段内通过介质传输的位的量度, 与带宽不同, 带宽是理想最大值, 吞吐量是实际值.</p></li></ul><h2 id="网络介质"><a href="#网络介质" class="headerlink" title="网络介质"></a>网络介质</h2><h3 id="铜缆"><a href="#铜缆" class="headerlink" title="铜缆"></a>铜缆</h3><p> 成本低, 易于安装, 电阻率低, 受到距离和信号干扰, 发送电脉冲信号. 容易受到两个干扰源的干扰: </p><ul><li>电磁干扰(EMI)或者射频干扰(RFI), 来源于无线电波和电磁设备(荧光灯, 电动机)</li><li>串扰, 电线中的电信号对周围电线照成的干扰, 来源于电话串线.</li></ul><p>铜缆有以下几种类型</p><ul><li>非屏蔽双绞线(UTP, unshielded twisted pair), 四对绞起来的线. 双绞线防止信号受到干扰, 铜线外包裹彩色塑料绝缘层(看到是彩色的线), 用颜色区分每个线对, 使用RJ-45连接器端接.</li></ul><p><img src="/2019/11/20/CCNA-1/2019-09-28-ch04%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/1570174138628.png" alt="1570174138628"></p><ul><li>屏蔽双绞线(STP, shielded twisted pair), 比UTP多裹了一层覆盖的金属屏蔽层(法拉第笼), 使用RJ-45连接器端接. 如果接地不正确, 反而会接受多于信号. </li></ul><p><img src="/2019/11/20/CCNA-1/2019-09-28-ch04%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/1570174149278.png" alt="1570174149278"></p><ul><li>同轴电缆, 几乎被淘汰. 从内到外依次是: 导线-绝缘层-铜网屏蔽层-塑料保护层. 用于无线安装或有线互联网安装. 可以连接BNC口, N口, F口.</li></ul><p><img src="/2019/11/20/CCNA-1/2019-09-28-ch04%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/1570174158306.png" alt="1570174158306"></p><h3 id="UTP布线"><a href="#UTP布线" class="headerlink" title="UTP布线"></a>UTP布线</h3><ul><li><p>两根电线紧密排列, 彼此磁场恰好相反, 磁场抵消, 也消除了EMI和RFI干扰, 不同颜色的线绞合密度不同. 遵循TIA/EIA 共同制定的标准TIA/EIA-568, 定义了电缆类型, 长度, 连接器, 电缆端接, 测试电缆的方法.</p></li><li><p>分类</p><ul><li>3类: 线没有绞合, 带宽一般, 用作电话线</li><li>5(Cat5)类, 增强型5类/5e类(Cat5e): 线按照一定规格绞合, 用于百兆网</li><li>6(Cat6)类: 绞合的线外面包裹了分隔物, 支持千兆传输. 推荐使用</li></ul></li><li><p>采用RJ-45连接器, 遵循TIA/EIA-568标准. 8根线, 只用到了1236四根线, 12负责输入, 36负责输出.注意正反面. 图中是宽的面在上.  </p><p><img src="/2019/11/20/CCNA-1/2019-09-28-ch04%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/1570175859931.png" alt="1570175859931"></p><ul><li>对于同种设备, 发送端的36要对应接收端的12. (交叉电缆), 包括主机-主机, 交换机-交换机, 路由器-路由器. 一端是T568A, 另一端T568B.</li><li>如果是异种设备, 两种设备12对应12, 36要对应36.(直通电缆). 包括主机-交换机, 主机-集线器</li></ul></li><li><p>传输距离100m</p></li></ul><h3 id="光纤"><a href="#光纤" class="headerlink" title="光纤"></a>光纤</h3><p>发送光脉冲信号, 从内到外为: 纤芯(玻璃制成)-涂层(反射用)-缓冲区(保护)-强化材料(保护)-表皮(保护)</p><p><img src="/2019/11/20/CCNA-1/2019-09-28-ch04%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/1570176590558.png" alt="1570176590558"></p><ul><li>单模光纤: 数百公里, 用激光发射, 很细, 几乎不反射</li><li>多模: 较粗, LED光源, 光反射</li><li>信号损失发生在光纤到接口上</li><li>OTDR, 光时域反射器, 根据反射光传输时间定位损坏位置</li></ul><h3 id="无线"><a href="#无线" class="headerlink" title="无线"></a>无线</h3><p>发送微波信号, 802.11标准</p><ul><li>无线接入点AP, 集中用户的无线信号, 并连接到现有基于铜介质的网络基础设施, 如以太网.</li></ul><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><h3 id="职能"><a href="#职能" class="headerlink" title="职能"></a>职能</h3><ul><li>允许上层访问介质</li><li>接受第 3 层数据包，并将它们打包为帧</li></ul><ul><li><p>为物理网络准备网络数据</p></li><li><p>控制数据在介质中的放置和接收方式</p></li><li><p>在物理网络介质（例如 UTP 或光纤）中的节点之间交换帧</p></li><li><p>收数据包并将其传输给上层协议</p></li><li><p>执行错误检测</p></li></ul><p>分为两个子层:</p><ul><li><p>LLC, 逻辑链路控制, 根据网络层协议进行封装</p></li><li><p>MAC, 介质访问控制, 对接物理标准, 把帧放到介质上, 从介质上获取帧. 不同的介质需要使用不同的数据链路层协议. 转发信息时, 需要接收帧-解封-重新封装-发送</p><p>需要解决以下的问题</p><ul><li>拓扑-节点之间的连接如何显示在数据链路层中</li><li>介质共享-如何共享介质</li></ul></li></ul><h3 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h3><p>网络设备以及互联布局或关系. 分类有: </p><ul><li>物理拓扑, 表示终端设备和基础设施设备, 突出设备位置, 设备种类</li><li>逻辑拓扑, 突出ip地址, 连接端口</li></ul><h3 id="物理WAN拓扑"><a href="#物理WAN拓扑" class="headerlink" title="物理WAN拓扑"></a>物理WAN拓扑</h3><ul><li>点对点<ul><li>节点1-网络-节点二</li><li>不用共享介质, 判断帧的目的地址</li></ul></li><li>中心型</li><li>网状</li></ul><h3 id="物理LAN拓扑"><a href="#物理LAN拓扑" class="headerlink" title="物理LAN拓扑"></a>物理LAN拓扑</h3><ul><li>星型<ul><li>集线器(假星型, 其实还是总线型, 公用带宽)<ul><li>连接所有的点</li><li>载波侦听多点接入/冲突检测CSMA/CD, 监听-冲突-等待-重发</li><li>利用效率低</li></ul></li><li>交换机(真星型, 独享带宽)<ul><li>点对点通路</li></ul></li><li>路由器<ul><li>隔离广播, 广播不允许通过</li></ul></li></ul></li><li>总线</li><li>环</li><li>扩展星型(多个星型相连)</li><li>单工, 半双工, 双工: 单工: 发射接收角色不互换, 半双工(集线器), 发射接收不同时, 双工(交换机), 同时.</li><li>争用访问-CSMA/CD, 载波侦听多路访问/冲突<strong>检测</strong>机制, 用于半双工, 需要一个进程管理设备合适可以发送以及多设备同时发送的处理. 进程如下:<ul><li>A想要发送帧</li><li>检测是否有人传输, 如果没有, 发送</li><li>集线器接收帧</li><li>B设备想发送, 必须等待</li><li>所有设备接收到帧, MAC地址匹配的主机接收整个帧</li><li>两台设备同时传输造成冲突, 两台设备都将检测到, 数据损失. 等待一段时间重新发送.</li></ul></li><li>争用访问-CSMA/CA, 载波侦听多路访问/冲突<strong>避免</strong>机制, 数据包包含自己的长度. 其他设备收到此信息, 就会知道介质不可用时间, 在此期间停止传输. 接收方收到之后, 返回确认信息, 表示帧已到达. 用于无线连接. 全双工. 不会检测冲突, 而是在传输之前等待来避免冲突</li></ul><h3 id="数据链路帧"><a href="#数据链路帧" class="headerlink" title="数据链路帧"></a>数据链路帧</h3><ul><li>帧: 帧头, 数据, 帧尾</li><li>帧头<ul><li>帧开始和停止标志, 标识帧的开始和结束位置的限制</li><li>编址, 表示介质上的源节点和目的节点. 用MAC地址. 还包含了源地址.<ul><li>路由器用IP地址确定通往目的设备的最佳路径</li><li>路由器重新填写MAC地址, 转发到下一级</li></ul></li><li>类型, 用于标识数据字段中的第 3 层协议</li><li>控制, 用于标识特殊流量控制服务, 例如QoS, 某些信息有优先权. </li></ul></li><li>帧尾<ul><li>错误检测</li><li>帧结束</li></ul></li><li>协议种类<ul><li>802.11无线帧</li><li>以太帧</li><li>……</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA-1 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
